@model TaxFiling.Web.Models.SelfOnlineSummary
@{
    var ExcessAmount = (Model.selfFilingSummaryCalculationViewModel.InterestIncome - Model.selfFilingSummaryCalculationViewModel.TotalCashOutflow);
}

<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Calculation of Income Tax Liability – Year of Assessment</title>
    <style>
        /* ====== Page + Typography ====== */
        :root {
            --blue: #7cc7f0;
            --accent: #34a3df;
            --ink: #111827;
            --muted: #374151;
            --grid: #999;
        }

        html, body {
            height: 100%;
        }

        body {
            font-family: system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif;
            color: var(--ink);
            margin: 0;
            background: #f8fafc;
        }

        .sheet {
            /* width: 210mm; */
            min-height: 297mm;
            /* margin: 20px auto; */
            background: #fff;
            box-shadow: 0 10px 30px rgba(0, 0, 0, .08);
            /* padding: 22mm 18mm; */
            box-sizing: border-box;
            margin-top: 14px;
        }

        /* ====== Header ====== */
        .header.pdf {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 16px;
            margin-bottom: 16px;
            padding-right: 16px;
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 12px
        }

        .logo {
            width: 42px;
            height: 42px;
            background: linear-gradient(135deg, var(--accent), #89d0ff);
            border-radius: 6px;
            display: grid;
            place-items: center;
            color: #fff;
            font-weight: 700;
            font-size: 12px;
        }

        h1 {
            font-size: 18px;
            letter-spacing: .4px;
            margin: 0;
            text-transform: uppercase;
            text-align: center;
        }

        .subtitle {
            font-size: 12px;
            color: var(--muted);
            text-align: center;
        }

        .note {
            font-size: 10px;
            color: var(--muted);
            text-align: right
        }

        /* ====== Table ====== */
        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 12px;
        }

        colgroup col:nth-child(1) {
            width: 48%;
        }

        colgroup col:nth-child(2) {
            width: 10%;
        }

        colgroup col:nth-child(3) {
            width: 18%;
        }

        colgroup col:nth-child(4) {
            width: 24%;
        }

        th, td {
            border: 1px solid #cfd8e3;
            padding: 8px 10px;
            vertical-align: top;
        }

        th {
            background: #f3f6fb;
            font-weight: 600;
            text-align: left;
        }

        td.num {
            text-align: right;
            white-space: nowrap;
        }

        .muted {
            color: #6b7280
        }

        .red {
            color: #b91c1c;
            font-weight: 600
        }

        .indent {
            padding-left: 28px
        }

        .section {
            background: var(--blue);
            color: #0b3652;
            font-weight: 700;
        }

            .section td, .section th {
                border-color: #a8d8f2
            }

        .right-merge {
            border-left: 0
        }

        .left-merge {
            border-right: 0
        }

        .totals {
            font-weight: 700
        }

        /* ====== Footer area ====== */
        .footer-row td {
            background: #eef7fd;
            font-weight: 700
        }

        /* ====== Print ====== */
        @@media print {
            body {
                background: #fff
            }

            .sheet {
                box-shadow: none;
                margin: 0;
                width: auto;
                min-height: auto;
                padding: 0
            }
        }

        .logo.pdf {
            background-image: url(https://taxfiling.lk/assets/img/footer-logo-new.png) !important;
            width: 274px;
            height: 100px;
            background-size: contain;
            background-repeat: no-repeat;
            margin-left: auto;
            margin-right: auto;
            background-image: url(https://taxfiling.lk/assets/img/footer-logo-new.png) !important;
            background-size: 244px !important;
            background-position: center !important;
            background-repeat: no-repeat !important;
        }

        .right {
            text-align: right;
        }

        .center {
            text-align: center;
        }

        .bold {
            font-weight: bold;
        }

        body h4 {
    font-size: 17px !important;
}
    </style>

    <script>
        $(function () {
        document.querySelectorAll(".numeric-input").forEach(function (input) {
        let value = input.textContent.replace(/,/g, "");
        if (value && !isNaN(value)) {
        let num = parseFloat(value);
        input.textContent = num.toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }
        });
        }); Disposal of assets including shares (sale/transfer/gift) during the year
    </script>
</head>
<body>
    <div class="sheet" role="document">
        <!-- Header -->
        <div class="header pdf">
            <div class="brand">
                <div class="logo pdf"></div>

            </div>
            <div style="text-align:center;/* flex:1; */display: block !important;width: 100% !important;">
                <h1>CALCULATION OF INCOME TAX LIABILITY</h1>
                <div class="subtitle">YEAR OF ASSESSMENT</div>
            </div>
            <div class="note">(All amounts are in Sri Lankan Rupees)</div>
        </div>

        <!-- Main Table -->
        <table aria-label="Calculation of Income Tax Liability">
            <colgroup>
                <col>
                <col>
                <col>
                <col>
            </colgroup>
            <thead>
                <tr>
                    <th>Income Liable To Tax</th>
                    <th>Note</th>
                    <th></th>
                    <th class="num">Amount</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Employment Income</td>
                    <td class="num">10</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.EmploymentIncomeTotal)</td>
                </tr>
                <tr>
                    <td>Business Income</td>
                    <td class="num">20</td>
                    <td></td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td>Investment Income</td>
                    <td class="num">30</td>
                    <td></td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">+ Interest Income</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InterestIncome)</td>
                    <td class="num right-merge">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">+ Dividend Income <span class="red">(Final Tax)</span></td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InvIncome_Dividend)</td>
                    <td class="num right-merge">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">+ Rent Income</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InvIncome_Rent)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">+ Other Income</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InvIncome_Other)</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InterestIncome)</td>
                </tr>
                <tr>
                    <td>Other Income</td>
                    <td class="num">40</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.OtherIncomeTotal)</td>
                </tr>

                <tr class="section">
                    <td>Assessable Income</td>
                    <td class="num">50</td>
                    <td class="muted"></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.AssessableIncome)</td>
                </tr>

                <tr>
                    <th colspan="4">Deduction From Assessable Income</th>
                </tr>
                <tr>
                    <td>Personal relief</td>
                    <td class="num">60</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.PersonalRelief)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td>Relief for rent income (25% Max)</td>
                    <td class="num">80</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.RentIncomeRelief)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td>Solar Relief</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.SolarRelief)</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Relief for foreign service income</td>
                    <td class="num">90</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.ForeignServiceRelief)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr class="totals">
                    <td>Total relief</td>
                    <td class="num">100</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TotalRelief)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td>Qualifying payments</td>
                    <td class="num">110</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.QualifyingPayments)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr class="totals">
                    <td>Total deduction from assessable income</td>
                    <td class="num">120</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TotalDeductions)</td>
                    <td class="num">&nbsp;</td>
                </tr>

                <tr class="section">
                    <td>Taxable income</td>
                    <td class="num">130</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxableIncome)</td>
                    <td class="num">&nbsp;</td>
                </tr>

                <tr>
                    <th colspan="4">Calculation of tax payable</th>
                </tr>
                <tr>
                    <td>Tax on terminal benefits</td>
                    <td class="num">140</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxOnTerminalBenefits)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td>Tax on gain on realization of investment assets</td>
                    <td class="num">150</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxOnInvestmentGains)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td>Tax on balance taxable income</td>
                    <td class="num">160</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxOnBalanceIncome)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">500,000 @@ 6%</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxBracket1)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">500,000 @@ 12%</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxBracket2)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">500,000 @@ 18%</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxBracket3)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">500,000 @@ 24%</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxBracket4)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">500,000 @@ 30%</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxBracket5)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td class="indent">Balance @@ 36%</td>
                    <td></td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxBracket6)</td>
                    <td class="num">&nbsp;</td>
                </tr>

                <tr class="footer-row">
                    <td>Total Tax Payable</td>
                    <td class="num">170</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TotalTaxPayable)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr>
                    <td>Less: Tax Credits</td>
                    <td class="num">180</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxCredits)</td>
                    <td class="num">&nbsp;</td>
                </tr>
                <tr class="section">
                    <td>Balance Tax Payable / (Refund)</td>
                    <td class="num">190</td>
                    <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.BalanceTaxPayable)</td>
                    <td class="num">&nbsp;</td>
                </tr>
            </tbody>
        </table>

        @*  <p class="subtitle" style="margin-top:18px">This HTML is a clean, print‑ready reproduction of the provided image. Adjust numbers/labels as needed.</p> *@
    </div>

    <br />
    
    <h2 class="mb-3 center">
        &nbsp;Income and Tax Credits
    </h2>
<br />
    <h3> Employment Income</h3>
    
    @if (Model.selfOnlineEmploymentIncomeDetails != null &&
    Model.selfOnlineEmploymentIncomeDetails.Any(d => d.CategoryName == "EmploymentDetails"))
    {
        <br />
    <h4> Employment Details</h4>
    <br />
   
        <div class="table-responsive" id="employmentDetails1Grid">
            <table class="table table-bordered table-striped mt-2">
                <thead class="table-light">
                    <tr>
                        <th>No</th>
                        <th>Residency</th>
                        <th>Senior Citizen</th>
                        <th>Type Employment</th>
                        <th>Company/Employer Name</th>
                        <th>TIN of Employer</th>
                        <th>Cash Benefit</th>
                        <th>Non Cash Benefit</th>
                        <th>APIT Primary</th>
                        <th>APIT Secondary</th>


                    </tr>
                </thead>
                <tbody>

                    @{
                        var index = 0;
                        foreach (var eploymentIncome in Model.selfOnlineEmploymentIncomeDetails
                        .Where(d => d.CategoryName == "EmploymentDetails"))
                        {
                            var Residency = "";
                            var SeniorCitizen = "";
                            if (@eploymentIncome.Residency == 1)
                            {
                                Residency = "Resident";
                            }
                            if (@eploymentIncome.Residency == 0)
                            {
                                Residency = "Non-resident";
                            }
                            if (@eploymentIncome.SeniorCitizen)
                            {
                                SeniorCitizen = "Yes";
                            }
                            if (!@eploymentIncome.SeniorCitizen)
                            {
                                SeniorCitizen = "No";
                            }
                            <tr>
                                <td>@(++index)</td>
                                <td>@Residency</td>
                                <td>@SeniorCitizen</td>
                                <td>@eploymentIncome.TypeOfName</td>
                                <td>@eploymentIncome.EmployerORCompanyName</td>
                                <td>@eploymentIncome.TINOfEmployer</td>
                                <td>@String.Format("{0:N2}", eploymentIncome.CashBenefit)</td>
                                <td>@String.Format("{0:N2}", eploymentIncome.NonCashBenefit)</td>
                                <td>@eploymentIncome.APITPrimaryEmployment</td>
                                <td>@eploymentIncome.APITSecondaryEmployment</td>

                            </tr>
                        }
                    }

                </tbody>

            </table>
        </div>
    }
   
  
    @if (Model.selfOnlineEmploymentIncomeDetails != null &&
    Model.selfOnlineEmploymentIncomeDetails.Any(d => d.CategoryName == "TerminalBenefits"))
    {
        <br />
    <h4>Terminal Benefits (Gratuity, ETF, EPF, Compensation)</h4>
    <br />
   
        <div class="table-responsive" id="terminalDetailsGrid">
            <table class="table table-bordered table-striped mt-2">
                <thead class="table-light">
                    <tr>
                        <th>No</th>
                        <th>Type Employment</th>
                        <th>Company/Employer Name</th>
                        <th>TIN of Employer</th>
                        <th>Terminal Benefits</th>
                       

                    </tr>
                </thead>
                <tbody>


                    @{
                        var indexT = 0;
                        foreach (var eploymentIncome in Model.selfOnlineEmploymentIncomeDetails
                        .Where(d => d.CategoryName == "TerminalBenefits"))
                        {
                            <tr>
                                <td>@(++indexT)</td>
                                <td>@eploymentIncome.TypeOfName</td>
                                <td>@eploymentIncome.EmployerORCompanyName</td>
                                <td>@eploymentIncome.TINOfEmployer</td>
                                <td>@String.Format("{0:N2}", @eploymentIncome.TerminalBenefits)</td>
                                <td>

                                    <button class="btn btn-primary btn-sm terminalbenefits-editbtn" type="button"
                                            data-id="@eploymentIncome.SelfOnlineEmploymentDetailsId"
                                            data-type="@eploymentIncome.TypeOfName"
                                            data-name="@eploymentIncome.EmployerORCompanyName"
                                            data-tin="@eploymentIncome.TINOfEmployer"
                                            data-benefit="@eploymentIncome.TerminalBenefits"
                                            data-filename="@eploymentIncome.FileName"
                                            data-decryptionkey="@eploymentIncome.DecryptionKey"
                                            data-originalfilename="@eploymentIncome.OriginalName">
                                        Edit
                                    </button>
                                    <button class="btn btn-danger btn-sm employmentdetails-deletebtn" type="button" data-id="@eploymentIncome.SelfOnlineEmploymentDetailsId" data-name="TerminalBenefits">Delete</button>
                                </td>
                            </tr>
                        }
                    }


                </tbody>
            </table>
        </div>
    }
   
   
    @if (Model.selfOnlineEmploymentIncomeDetails != null &&
    Model.selfOnlineEmploymentIncomeDetails.Any(d => d.CategoryName == "ExemptAmounts"))
    {
        <br />
    <h4>Exempt Amounts</h4>
    <br />
   
        <div class="table-responsive" id="exemptDetailsGrid">
            <table class="table table-bordered table-striped mt-2">
                <thead class="table-light">
                    <tr>
                        <th>No</th>
                        <th>Type Employment</th>
                        <th>Company/Employer Name</th>
                        <th>TIN of Employer</th>
                        <th>Amount </th>
                       

                    </tr>
                </thead>
                <tbody>


                    @{
                        var indexT = 0;
                        foreach (var eploymentIncome in Model.selfOnlineEmploymentIncomeDetails
                        .Where(d => d.CategoryName == "ExemptAmounts"))
                        {
                            <tr>
                                <td>@(++indexT)</td>
                                <td>@eploymentIncome.TypeOfName</td>
                                <td>@eploymentIncome.EmployerORCompanyName</td>
                                <td>@eploymentIncome.TINOfEmployer</td>
                                <td>@eploymentIncome.Amount</td>
                               
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>

    }
    
    <br />

    <h3> Investment Income </h3>
   
    @if (Model.selfOnlineInvestmentIncomeDetailViewModel != null && Model.selfOnlineInvestmentIncomeDetailViewModel.Any(d => d.Category == "Savings"))
    {
        <br />
    <h4> Interest Income from Savings Accounts</h4>
    <br />
   
        <div class="table-responsive" id="SavingsGrid">
            <table class="table table-bordered table-striped mt-2">
                <thead class="table-light">
                    <tr>
                        <th>No</th>
                        <th>Type Of Investment</th>
                        <th>Bank</th>
                        <th>Branch</th>
                        <th>Account No</th>
                        <th>Interest Income</th>
                        <th>WHT Deducted Amount</th>


                    </tr>
                </thead>
                <tbody>

                    @{
                        var index = 0;
                        foreach (var savingsIncome in Model.selfOnlineInvestmentIncomeDetailViewModel.Where(d => d.Category == "Savings"))
                        {
                            <tr>
                                <td>@(++index)</td>
                                <td>@savingsIncome.TypeOfInvestment</td>
                                <td>@savingsIncome.BankName</td>
                                <td>@savingsIncome.BankBranch</td>
                                <td>@savingsIncome.AccountNo</td>
                                <td>@String.Format("{0:N2}", @savingsIncome.IncomeAmount)</td>
                                <td>@String.Format("{0:N2}", @savingsIncome.WHTDeducted)</td>

                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    }
    
    @if (Model.selfOnlineInvestmentIncomeDetailViewModel != null && Model.selfOnlineInvestmentIncomeDetailViewModel.Any(d => d.Category == "FixedDeposit"))
    {
    <br />
    <h4> Interest Income from Fixed Deposit Accounts</h4>
    <br />

   
        <div class="table-responsive" id="FDGrid">
            <table class="table table-bordered table-striped mt-2">
                <thead class="table-light">
                    <tr>
                        <th>No</th>
                        <th>Type Of Investment</th>
                        <th>Bank</th>
                        <th>Branch</th>
                        <th>Account No</th>
                        <th>Interest Income</th>
                        <th>WHT Deducted Amount</th>
                       

                    </tr>
                </thead>
                <tbody>

                    @{
                        var index = 0;
                        foreach (var fdIncome in Model.selfOnlineInvestmentIncomeDetailViewModel.Where(d => d.Category == "FixedDeposit"))
                        {
                            <tr>
                                <td>@(++index)</td>
                                <td>@fdIncome.TypeOfInvestment</td>
                                <td>@fdIncome.BankName</td>
                                <td>@fdIncome.BankBranch</td>
                                <td>@fdIncome.AccountNo</td>
                                <td>@String.Format("{0:N2}", @fdIncome.IncomeAmount)</td>
                                <td>@String.Format("{0:N2}", @fdIncome.WHTDeducted)</td>

                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
   
    @if (Model.selfOnlineInvestmentIncomeDetailViewModel != null && Model.selfOnlineInvestmentIncomeDetailViewModel.Any(d => d.Category == "Dividend"))
    {
    <br />
    <h4> Dividend Income</h4>
    <br />
  
                  
    <div class="table-responsive" id="DividentGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type Of Investment</th>
                    <th>Amount Invested </th>
                    <th>Dividend Income </th>
                    <th>Company/Institution</th>
                    <th>Shares/Stocks</th>
                    <th>Cost Acquisition</th>
                   
                </tr>
            </thead>
            <tbody>
                 @{var index = 0;
                        foreach (var dividendIncome in Model.selfOnlineInvestmentIncomeDetailViewModel.Where(d => d.Category == "Dividend"))
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@dividendIncome.TypeOfInvestment</td>
                            <td>@String.Format("{0:N2}", @dividendIncome.AmountInvested)</td>
                            <td>@String.Format("{0:N2}", @dividendIncome.NetDividendIncome)</td>
                            <td>@dividendIncome.CompanyInstitution</td>
                            <td>@dividendIncome.SharesStocks</td>
                            <td>@String.Format("{0:N2}", @dividendIncome.CostAcquisition)</td>
                            
                        </tr>
                    }
                    }
               
            </tbody>
        </table>
    </div>
    }
    
    @if (Model.selfOnlineInvestmentIncomeDetailViewModel != null && Model.selfOnlineInvestmentIncomeDetailViewModel.Any(d => d.Category == "Rent"))
    {

    <br />
    <h4> Rent Income</h4>
    <br />
   
    <div class="table-responsive" id="RentGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type Of Investment</th>
                    <th>Situation property Deed No</th>
                    <th>Total Rent Income </th>
                    <th>Cost Gift/ Inhreted</th>
                    <th>Market value</th>
                   

                </tr>
            </thead>
            <tbody>
                  @{var index = 0;
                    foreach (var rentIncome in Model.selfOnlineInvestmentIncomeDetailViewModel.Where(d => d.Category == "Rent"))
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@rentIncome.TypeOfInvestment</td>
                            <td>@rentIncome.PropertySituation</td>
                            <td>@String.Format("{0:N2}", @rentIncome.IncomeAmount)</td>
                            <td>@String.Format("{0:N2}", @rentIncome.GiftOrInheritedCost)</td>
                            <td>@String.Format("{0:N2}", @rentIncome.MarketValue)</td>

                        </tr>
                    }
                    }
               
            </tbody>
        </table>
    </div>
    }
   
    @if (Model.selfOnlineInvestmentIncomeDetailViewModel != null && Model.selfOnlineInvestmentIncomeDetailViewModel.Any(d => d.Category == "Other"))
    {
    <br />
    <h4> Other Income</h4>
    <br />
   
                  
    <div class="table-responsive" id="OtherGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type Of Investment</th>
                    <th>Amount Invested</th>
                    <th>Interest Income </th>
                   

                </tr>
            </thead>
            <tbody>
                 @{var index = 0;
                        foreach (var otherIncome in Model.selfOnlineInvestmentIncomeDetailViewModel.Where(d => d.Category == "Other"))
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@otherIncome.TypeOfInvestment</td>
                            <td>@String.Format("{0:N2}", @otherIncome.AmountInvested)</td>
                            <td>@String.Format("{0:N2}", @otherIncome.IncomeAmount)</td>

                        </tr>
                        }
                    }
               
            </tbody>
        </table>
    </div>
    }
   
    @if (Model.selfOnlineInvestmentPartnerBeneficiaryExemptViewModel != null && Model.selfOnlineInvestmentPartnerBeneficiaryExemptViewModel.Any(d => d.Category == "Partner"))
    {
    <br />
    <h4>Partner's investment income from partnership (Both local & foreign)</h4>
    <br />
    
    <div class="table-responsive" id="partnerInvestmentsGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Total Investment Individual</th>
                    <th>Partnership Name</th>
                    <th>Gains and Profits</th>
                    <th>Total Investment Partnership</th>
                

                </tr>
            </thead>
            <tbody>
               
                    @{var index = 0;
                    foreach (var fdIncome in Model.selfOnlineInvestmentPartnerBeneficiaryExemptViewModel.Where(d => d.Category == "Partner"))
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@fdIncome.TotalInvestmentIncome</td>
                            <td>@fdIncome.PartnershipName</td>
                            <td>@fdIncome.GainsProfits</td>
                            <td>@fdIncome.TotalInvestmentIncomePartnership</td>
                        </tr>
                    }
                    }
               
            </tbody>
        </table>
    </div>
    }
   
    @if (Model.selfOnlineInvestmentPartnerBeneficiaryExemptViewModel != null && Model.selfOnlineInvestmentPartnerBeneficiaryExemptViewModel.Any(d => d.Category == "Beneficiary"))
    {

    <br />
    <h4>Beneficiary's investment income from trust (Both local & foreign)</h4>
    <br />

   
    <div class="table-responsive" id="beneficiaryDetailsGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Total Investment</th>
                    <th>Partnership Name</th>
                    <th>Gains and Profits</th>
                    <th>Total Investment Trust</th>
                   

                </tr>
            </thead>
            <tbody>
                
                    @{var index = 0;
                        foreach (var fdIncome in Model.selfOnlineInvestmentPartnerBeneficiaryExemptViewModel.Where(d => d.Category == "Beneficiary"))
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@fdIncome.TotalInvestmentIncome</td>
                            <td>@fdIncome.TrustName</td>
                            <td>@fdIncome.GainsProfits</td>
                            <td>@fdIncome.TotalInvestmentIncomeTrust</td>
                          
                        </tr>
                    }
                    }
              
            </tbody>
        </table>
    </div>
    }
   

    <br />
    <h4>Exempt Amounts/Gains and Profits for Investment Income A Excluded amount</h4>
    <br />
    <div class="row g-3">
        @{
            var exemptRecord = Model.selfOnlineInvestmentPartnerBeneficiaryExemptViewModel.FirstOrDefault(d => d.Category == "Exempt");
          //  var IsExemptAmountA = Model.selfOnlineInvestmentPartnerBeneficiaryExemptViewModel.FirstOrDefault()?.IsExemptAmountA;
            }
        <div class="col-md-6">
            <label class="col-sm-11 col-form-label font-weight-bold">
                Exempt amounts/gains and profits for Investment Income A
            </label>
            <input type="checkbox" class="form-check-input"
                   id="rdbTProfitsInvestment"
                   name="IsExemptAmountA"
                   value="true"
            @(exemptRecord?.IsExemptAmountA == true ? "checked" : "") disabled />
           
        </div>

        <div class="col-md-6">
            <label class="col-sm-5 col-form-label font-weight-bold">Excluded Amount B</label>
            <input type="checkbox" class="form-check-input"
                   id="rdbTExcludedAmount"
                   name="IsExcludedAmountB"
                   value="true"
           @(exemptRecord?.IsExcludedAmountB == true ? "checked" : "") disabled />
           
        </div>

        <div class="col-md-6">
            <label class="form-label"><span style="color: red">*</span>Exempt / Excluded Investment Income Name</label>
            <input type="text" class="form-control" id="txtTExemptName" name="txtTExemptName"
                   value="@exemptRecord?.ExemptExcludedIncomeName" disabled>
        </div>

        <div class="col-md-6">
            <label class="form-label"><span style="color: red">*</span>Exempt / Excluded Investment Income</label>
            <input type="text" class="form-control numeric-input" maxlength="9" id="txtTExempt" name="txtTExempt"
                   value="@exemptRecord?.ExemptExcludedIncome" disabled>
        </div>
    </div>



    @*  --------------------------- *@
    @*   <h2>Sudarshana Prashad</h2> *@
    <br />
    <h2 class="mb-3 center">RECEIPTS & PAYMENT ACCOUNT</h2>
    <br />
    <p>
        <b>YEAR OF ASSESSMENT 2024/2025</b><br>
        (All Amounts Are In Sri Lanka Rupees)
    </p>
    <p><b>TIN:</b> 123456789</p>

    <table>
        <tr>
            <td class="bold">Cash in Hand as at 01.04.2024</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.CashInHandStart)</td>
        </tr>
        <tr>
            <td class="bold">Cash at Bank as at 01.04.2024</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.CashAtBankStart)</td>
        </tr>

        <tr><td colspan="5" class="bold">Add: Receipts</td></tr>
        <tr>
            <td>Employment Income</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>Business Income</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td rowspan="4">Investment Income</td>
            <td>Interest Income</td>
            <td></td>
            <td class ="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InterestIncome)</td>
            <td class="right"></td>
        </tr>
        <tr>
            <td>Dividend Income</td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InvIncome_Dividend)</td>
            <td class="right"></td>
        </tr>
        <tr>
            <td>Rent Income</td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InvIncome_Rent)</td>
            <td class="right"></td>
        </tr>
        <tr>
            <td>Other Income</td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InvIncome_Other)</td>
            <td class="right"></td>
        </tr>
        <tr>
            <td class="bold"></td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.InterestIncome)</td>
        </tr>

        <tr><td colspan="5" class="bold">Less: Expenses</td></tr>
        <tr>
            <td>EPF Contribution</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxPayments)</td>
        </tr>

        <tr>
            <td>Tax Payments</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TaxPayments)</td>
        </tr>

        <tr>
            <td>Living / Education Expenses</td>
            <td></td>
            <td class="text-center"></td>
            <td class="text-center"></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.LivingEducationExpenses)</td>
        </tr>

        <tr>
            <td>Children Education Expenses</td>
            <td></td>
            <td class="text-center"></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.ChildrenEducationExpenses)</td>
        </tr>

        <tr>
            <td>Vehicle Expenses</td>
            <td></td>
            <td ></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.VehicleExpenses)</td>
        </tr>

        <tr>
            <td>Life / Medical Insurance Premium</td>
            <td></td>
            <td class="text-center"></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.LifeMedicalInsurance)</td>
        </tr>

        <tr>
            <td>Loan Installments</td>
            <td></td>
            <td class="text-center"></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.LoanInstallments)</td>
        </tr>

        <tr>
            <td>Credit Card Expenses</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.CreditCardExpenses)</td>
        </tr>

        <tr>
            <td>Purchase of Equity or Securities</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.PurchaseEquitySecurities)</td>
        </tr>

        <tr>
            <td>Any Other Expenses</td>
            <td></td>
            <td></td>
            <td class="text-center"></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.AnyOtherExpenses)</td>
        </tr>

        <tr class="fw-bold table-light">
            <td>Total Cash Outflow</td>
            <td></td>
            <td></td>
            <td class="text-center"></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.TotalCashOutflow)</td>
        </tr>

        <tr class="fw-bold ">
            <td>Excess / (Deficit)</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", @ExcessAmount) </td>
        </tr>

        <tr>
            <td>Cash in Hand as at 31.03.2025</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.CashInHandEnd)</td>
        </tr>

        <tr>
            <td>Cash at Bank as at 31.03.2025</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input">@string.Format("{0:N2}", Model.selfFilingSummaryCalculationViewModel.CashAtBankEnd)</td>
        </tr>

        <tr class="fw-bold table-light">
            <td>Total Closing Cash</td>
            <td></td>
            <td></td>
            <td></td>
            <td class="num numeric-input"></td>
        </tr>
    </table>


    @*   ---------------------------- *@

    <br />
    <h2 class="mb-3 center">
        &nbsp;Assets and Liabilities
    </h2>
    @if (Model.selfonlineAssetsImmovablePropertyViewModel != null && Model.selfonlineAssetsImmovablePropertyViewModel.Any())
                {
    <br />
    <h4 class="mb-3">
        Immovable Properties
    </h4>
    <div class="table-responsive" id="ImmovablePropertiesGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type</th>
                    <th>S/N</th>
                    <th>Situation Property</th>
                    <th>Date Acquisition  </th>
                    <th>Cost</th>
                    <th>Market value</th>


                </tr>
            </thead>
            <tbody>
                
                    @{var index = 0;
                    foreach (var immovableProperties in Model.selfonlineAssetsImmovablePropertyViewModel)
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@immovableProperties.Type</td>
                            <td>@immovableProperties.SerialNumber</td>
                            <td>@immovableProperties.Situation</td>   <!-- fixed -->
                            <td>@immovableProperties.DateOfAcquisition?.ToString("yyyy-MM-dd")</td>
                            <td>@immovableProperties.Cost?.ToString("N2")</td>
                            <td>@immovableProperties.MarketValue?.ToString("N2")</td>

                        </tr>
                    }
                    }
               
            </tbody>
        </table>
    </div>
    }
    

    @if (Model.selfonlineAssetsMotorVehicleViewModel != null && Model.selfonlineAssetsMotorVehicleViewModel.Any())
                {
                    <br />
    <h4 class="mb-3">
     Motor Vehicle
    </h4>
    <div class="table-responsive" id="MotorVehicleGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type</th>
                    <th>S/N</th>
                    <th>Registration No</th>
                    <th>Date Acquisition</th>
                    <th>Cost/Market Value</th>


                </tr>
            </thead>
            <tbody>
                
                    @{var index = 0;
                    foreach (var motorVehicle in Model.selfonlineAssetsMotorVehicleViewModel)
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@motorVehicle.Type</td>
                            <td>@motorVehicle.SerialNumber</td>
                            <td>@motorVehicle.RegistrationNo</td>
                            <td>@motorVehicle.DateOfAcquisition?.ToString("yyyy-MM-dd")</td>
                            <td>@motorVehicle.CostMarketValue?.ToString("N2")</td>

                        </tr>
                    }
                    }
               
            </tbody>
        </table>
    </div>
    }
    
     @if (Model.selfonlineAssetsSharesStocksSecuritiesViewModel != null && Model.selfonlineAssetsSharesStocksSecuritiesViewModel.Any())
                {
                    <br />
    <h4 class="mb-3">
         Shares/Stocks/Securities as at 31.03.2025
    </h4>
    <div class="table-responsive" id="SharesStocksGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type</th>
                    <th>S/N</th>
                    <th>No Of Shares/Stocks</th>
                    <th>Date Acquisition</th>
                    <th>Cost Acquisition</th>
                    <th>Net dividend</th>


                </tr>
            </thead>
            <tbody>
               
                    @{var index = 0;
                    foreach (var sharesStocksSecurities in Model.selfonlineAssetsSharesStocksSecuritiesViewModel)
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@sharesStocksSecurities.Type</td>
                            <td>@sharesStocksSecurities.SerialNumber</td>
                            <td>@sharesStocksSecurities.NoOfSharesStocks</td>
                            <td>@sharesStocksSecurities.DateOfAcquisition?.ToString("yyyy-MM-dd")</td>
                            <td>@sharesStocksSecurities.CostOfAcquisition?.ToString("N2")</td>
                            <td>@sharesStocksSecurities.NetDividendIncome?.ToString("N2")</td>

                        </tr>
                    }
                    }
               
            </tbody>
        </table>
    </div>
    }
    

     @if (Model.selfonlineAssetsCapitalCurrentAccountViewModel != null && Model.selfonlineAssetsCapitalCurrentAccountViewModel.Any())
                {
                    <br />
    <h4 class="mb-3">
     Declare the Capital and Current Account (credit) Balances Held as a Part of Business, as at 31.03.2025
    </h4>
    <div class="table-responsive" id="DeclareCapitalGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type</th>
                    <th>S/N</th>
                    <th>Business Name</th>
                    <th>Current Balance</th>
                    <th>Capital Balance</th>


                </tr>
            </thead>
            <tbody>
               
                    @{var index = 0;
                    foreach (var capitalCurrentAccount in Model.selfonlineAssetsCapitalCurrentAccountViewModel)
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@capitalCurrentAccount.Type</td>
                            <td>@capitalCurrentAccount.SerialNumber</td>
                            <td>@capitalCurrentAccount.BusinessName</td>
                            <td>@capitalCurrentAccount.CurrentAccountBalance?.ToString("N2")</td>
                            <td>@capitalCurrentAccount.CapitalAccountBalance?.ToString("N2")</td>

                        </tr>
                    }
                    }
               
            </tbody>
        </table>
    </div>
    }
    else
   
    @if (Model.selfonlineLiabilitiesAllLiabilities != null && Model.selfonlineLiabilitiesAllLiabilities.Any())
                {
    <h4 class="mb-3">
        &nbsp;All liabilities including any debit balance of a business capital, current or credit card account
    </h4>
    <div class="table-responsive" id="LiabilityGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type</th>
                    <th>S/N</th>
                    <th>Security Liability</th>
                    <th>Date Commencement  </th>
                    <th>Original Amount</th>
                    <th>Amount</th>
                    <th>Amount Repaid Y/A</th>


                </tr>
            </thead>
            <tbody>

                
                   @{ var index = 0;
                    foreach (var liabilities in Model.selfonlineLiabilitiesAllLiabilities)
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@liabilities.Type</td>
                            <td>@liabilities.SerialNumber</td>
                            <td>@liabilities.SecurityOnLiability</td>   <!-- fixed -->
                            <td>@liabilities.DateOfCommencement?.ToString("yyyy-MM-dd")</td>
                            <td>@liabilities.OriginalAmount?.ToString("N2")</td>
                            <td>@liabilities.AmountAsAt?.ToString("N2")</td>
                            <td>@liabilities.AmountRepaid?.ToString("N2")</td>

                        </tr>
                    }
                    }
              

            </tbody>
        </table>
    </div>
    }
   
     @if (Model.selfonlineLiabilitiesOtherAssetsGifts != null && Model.selfonlineLiabilitiesOtherAssetsGifts.Any())
                {
                    <br />
    <h4 class="mb-3">
        &nbsp;Any other assets acquired or gifts received during the year
    </h4>
    <div class="table-responsive" id="OtherAssetsGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type</th>
                    <th>S/N</th>
                    <th>Gift/Exchange/Purchase</th>
                    <th>Date Acquisition  </th>
                    <th>Cost</th>

                </tr>
            </thead>

            <tbody>
               
                    @{var index = 0;
                    foreach (var otherAssets in Model.selfonlineLiabilitiesOtherAssetsGifts)
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@otherAssets.Type</td>
                            <td>@otherAssets.SerialNumber</td>
                            <td>@otherAssets.AcquisitionMode</td>   <!-- fixed -->
                            <td>@otherAssets.DateOfAcquisition?.ToString("yyyy-MM-dd")</td>
                            <td>@otherAssets.CostMarketValue?.ToString("N2")</td>

                        </tr>
                    }
                    }
               
            </tbody>
        </table>
    </div>
    }
   
    @if (Model.selfonlineLiabilitiesDisposalAssets != null && Model.selfonlineLiabilitiesDisposalAssets.Any())
                {
                   <br />
    <h4 class="mb-3">
        &nbsp;Disposal of assets including shares (sale/transfer/gift) during the year
    </h4>
    <div class="table-responsive" id="DisposalAsetsGrid">
        <table class="table table-bordered table-striped mt-2">
            <thead class="table-light">
                <tr>
                    <th>No</th>
                    <th>Type</th>
                    <th>S/N</th>
                    <th>Date Disposal</th>
                    <th>Sales Proceed</th>
                    <th>Date Acquired</th>
                    <th>Cost</th>


                </tr>
            </thead>
            <tbody>
                
                    @{var index = 0;
                    foreach (var disposalAsets in Model.selfonlineLiabilitiesDisposalAssets)
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@disposalAsets.Type</td>
                            <td>@disposalAsets.SerialNumber</td>
                            <td>@disposalAsets.DateOfDisposal?.ToString("yyyy-MM-dd")</td>
                            <td>@disposalAsets.SalesProceed</td>
                            <td>@disposalAsets.DateAcquired?.ToString("yyyy-MM-dd")</td>
                            <td>@disposalAsets.Cost</td>

                        </tr>
                    }
                    }
               
            </tbody>
        </table>
    </div>

    }
   
</body>
</html>
