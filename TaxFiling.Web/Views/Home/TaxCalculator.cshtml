<main class="cal">

    <div class="container">
        <br>
        <br>
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="false" tabindex="-1">Domestic Employment (APIT / PAYE)</button>
            </li>

            <li class="nav-item" role="presentation">
                <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false" tabindex="-1">Foreign Income</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="contact-tab" data-bs-toggle="tab" data-bs-target="#contact" type="button" role="tab" aria-controls="profile" aria-selected="true">Total Individual Income Tax</button>
            </li>

        </ul>
        <div class="tab-content mt-3" id="myTabContent">
            <div class="tab-pane fade domestic " id="home" role="tabpanel" aria-labelledby="home-tab">
             <div class="wrap">
    <h1>Tax Calculator effective from 01.04.2025</h1>
    <div class="sub">Calculate <b>PAYE / APIT</b> on your local monthly salary in LKR.</div>

    <div class="container">
      <div class="title">Local Tax Calculator</div>

      <div class="grid">
        <!-- Left column: inputs + stats -->
        <div>
          <label for="income">Monthly Income (LKR)</label>
          <input id="income" type="text" inputmode="numeric" placeholder="e.g. 250,000" />

          <div class="two">
            <div class="stat">
              <div class="k">Monthly Income (LKR)</div>
              <div id="monIncome" class="v">–</div>
              <div class="muted">Monthly Tax (LKR): <b id="monTax">–</b></div>
            </div>
            <div class="stat">
              <div class="k">Annual Income (LKR)</div>
              <div id="annIncome" class="v">–</div>
              <div class="muted">Annual Tax (LKR): <b id="annTax">–</b></div>
            </div>
          </div>

          <div class="actions">
            <button id="reset" class="ghost">Reset Calculator</button>
            <button id="example" class="primary">Use Example (250,000)</button>
          </div>
          <div class="hint">Bands used after monthly relief of Rs. 150,000: First ~83,333 @ 6%, next ~41,667 @ 18%, next ~41,667 @ 24%, next ~41,667 @ 30%, balance @ 36%.</div>
        </div>

        <!-- Right column: breakdown -->
        <div>
          <table>
            <thead>
              <tr>
                <th>Monthly Salary (Annual/12)</th>
                <th>Rate (%)</th>
                <th>Tax</th>
              </tr>
            </thead>
            <tbody id="rows">
              <tr><td colspan="3" style="color:#cbd8e6">Enter a monthly income to see the breakdown.</td></tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
            </div>
            <div class="tab-pane fade  cal-foreing" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                <div class="page foreing">
  <h1>Foreign Employment & Overseas Income – APIT Table 8 (Effective 01.04.2025)</h1>

  <div class="grid g-2">
    <!-- Inputs -->
    <div class="card">
      <div class="grid g-3">
        <div>
          <label>Period</label>
          <select id="period">
            <option value="monthly" selected>Monthly</option>
            <option value="annual">Annual</option>
          </select>
        </div>
        <div>
          <label>Salary in Foreign Currency</label>
          <input id="salaryFC" type="number" step="0.01" value="3000">
        </div>
        <div>
          <label>FX Rate (LKR per 1 FC unit)</label>
          <input id="fx" type="number" step="0.0001" value="305">
        </div>
      </div>

      <div class="grid g-3" style="margin-top:12px">
        <div>
          <label>Salary in LKR (auto)</label>
          <input id="salaryLKR" type="number" step="0.01" value="915000" disabled>
        </div>
        <div>
          <label>Personal Relief (LKR)</label>
          <input id="relief" type="number" step="0.01" value="150000">
          <div class="foot">Tip: Monthly 150,000 → Annual 1,800,000.</div>
        </div>
        <div>
          <label>Rounding</label>
          <select id="round">
            <option value="nearest" selected>Nearest Rupee</option>
            <option value="down">Round Down</option>
            <option value="up">Round Up</option>
          </select>
        </div>
      </div>

      <div class="grid" style="margin-top:14px">
        <div class="pill">Eligibility (Table 8) – ensure all true:</div>
        <ul class="muted" style="margin:8px 0 0 18px;line-height:1.35">
          <li>Employer is <b>outside Sri Lanka</b> (no PE/branch in SL).</li>
          <li>Services are <b>utilized outside Sri Lanka</b>.</li>
          <li>Salary is <b>paid in foreign currency</b> and <b>remitted via a licensed Sri Lankan bank</b>.</li>
        </ul>
      </div>
    </div>

    <!-- Slabs -->
    <div class="card">
      <div class="right">
        <button class="btn secondary" id="addSlab">+ Add slab</button>
        <button class="btn secondary" id="resetSlabs">Reset to Table 8</button>
      </div>
      <div class="foot">Define slabs from lowest upwards. Last row “Above” applies to the balance.</div>
      <table id="slabTable" style="margin-top:8px">
        <thead>
          <tr>
            <th>Upto (LKR)</th>
            <th>Rate</th>
            <th></th>
          </tr>
        </thead>
        <tbody id="slabs"></tbody>
      </table>
    </div>
  </div>

  <!-- Results -->
  <div class="card" style="margin-top:16px">
    <div class="grid g-3">
      <div><div class="muted">Gross Income</div><div class="big mono" id="rGross">—</div></div>
      <div><div class="muted">Taxable (after relief)</div><div class="big mono" id="rTaxable">—</div></div>
      <div><div class="muted">Monthly/Annual Tax</div><div class="big mono" id="rTax">—</div></div>
    </div>
    <div class="grid" style="margin-top:10px">
      <table id="breakdown">
        <thead>
          <tr>
            <th>Slab</th>
            <th>Taxable in Slab (LKR)</th>
            <th>Rate</th>
            <th>Tax (LKR)</th>
          </tr>
        </thead>
        <tbody id="rows"></tbody>
        <tfoot>
          <tr>
            <th colspan="3" style="text-align:right">Total Tax</th>
            <th id="sumTax" class="mono">—</th>
          </tr>
        </tfoot>
      </table>
      <div class="grid g-3">
        <div><div class="muted">Annual Tax Liability</div><div class="big mono" id="rAnnual">—</div></div>
        <div><div class="muted">Effective Tax Rate</div><div class="big mono" id="rEff">—</div></div>
        <div style="align-self:end;text-align:right">
          <button class="btn" id="recalc">Recalculate</button>
        </div>
      </div>
    </div>
  </div>

  <p class="foot">
    Notes: This tool computes APIT for Table 8 based on the slabs you set. Tax is calculated on
    <i>Taxable Income = Gross Income − Relief</i>. Results are informational only.
  </p>
</div>
            </div>
            <div class="tab-pane fade active show" id="contact" role="tabpanel" aria-labelledby="contact-tab">
                <div class="sheet">
                    <h1>INCOME TAX LIABILITY </h1>
                    <br>
                    <h4>(Starting 01.04.2025 to 31.03.2025)</h4>


                    <!-- ================= 1) INCOME SOURCES ================= -->
                    <table class="grid" id="tblIncome">
                        <thead><tr><th>Source</th><th class="num">Amount (LKR)</th></tr></thead>
                        <tbody>
                            <tr>
                                <td class="lbl">Employment Income – <span class="muted">Local (APIT deducted)</span></td>
                                <td class="num"><input id="emp_apit_annual" type="text" inputmode="decimal" value="0"></td>
                            </tr>

                            <!-- Foreign employment: Annual amount + currency + FX (one line) -->
                            <tr class="band-soft">
                                <td class="lbl">
                                    Employment Income – <span class="muted">Foreign</span>
                                    <div class="controls" style="margin:6px 0 2px">
                                        <span class="pill">Annual</span>
                                        <input id="foreign_amount_annual" type="text" inputmode="decimal" value="0" style="max-width:200px">
                                        <select id="foreign_currency" style="max-width:110px">
                                            <option>USD</option>
                                            <option>EUR</option>
                                            <option>GBP</option>
                                            <option>AUD</option>
                                            <option>CAD</option>
                                            <option selected="">LKR</option>
                                        </select>
                                        <span class="pill">FX→LKR</span>
                                        <input id="fx_rate" type="text" inputmode="decimal" value="300" style="max-width:120px">
                                    </div>
                                    <small class="note">If your figure is already in LKR, set FX to <b>1</b>.</small>
                                </td>
                                <td class="num"><span id="foreign_lkr_annual" class="mono">0.00</span></td>
                            </tr>

                            <tr>
                                <td class="lbl">Business / Professional Income – <span class="muted">Annual profit</span></td>
                                <td class="num"><input id="biz_profit_annual" type="text" inputmode="decimal" value="0"></td>
                            </tr>

                            <tr>
                                <td class="lbl">Investment Income – Interest</td>
                                <td class="num"><input id="interest_gross_annual" type="text" inputmode="decimal" value="0"></td>
                            </tr>

                            <tr>
                                <td class="lbl">Investment Income – Rent (gross)</td>
                                <td class="num"><input id="rent_gross_annual" type="text" inputmode="decimal" value="0"></td>
                            </tr>

                            <tr>
                                <td class="lbl">Investment Income – Dividend <span class="muted">(Final Tax 15%)</span></td>
                                <td class="num"><input id="dividend_gross_annual" type="text" inputmode="decimal" value="0"></td>
                            </tr>

                            <tr>
                                <td class="lbl">Other Investment Income<span class="muted"> (WHT not dedcted)</span></td>
                                <td class="num"><input id="invest_other_annual" type="text" inputmode="decimal" value="0"></td>
                            </tr>

                            <tr>
                                <td class="lbl">Other Income</td>
                                <td class="num"><input id="other_income_annual" type="text" inputmode="decimal" value="0"></td>
                            </tr>

                            <tr class="band">
                                <td class="lbl"><b>Assessable Income</b> <span class="muted">(excludes dividends)</span></td>
                                <td class="num kpi" id="kpi_assessable">0.00</td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- ================= 2) DEDUCTIONS ================= -->
                    <h3 class="section-title">Deduction From Assessable Income</h3>
                    <table class="grid" id="tblDeduct">
                        <thead><tr><th>Relief / Deduction</th><th class="num">Amount (LKR)</th></tr></thead>
                        <tbody>
                            <tr>
                                <td class="lbl">Personal Relief</td>
                                <td class="num"><input id="relief_personal" type="text" inputmode="decimal" value="1800000"></td>
                            </tr>
                            <tr>
                                <td class="lbl">Relief for Rent Income <span class="muted">(auto 25% of gross)</span></td>
                                <td class="num"><span id="relief_rent_auto" class="mono">0.00</span></td>
                            </tr>
                            <tr>
                                <td class="lbl">Solar Relief <span class="muted">(cap 600,000)</span></td>
                                <td class="num"><input id="relief_solar" type="text" inputmode="decimal" value="0"></td>
                            </tr>
                            <tr>
                                <td class="lbl">Qualifying Payments &amp; Other Deductions</td>
                                <td class="num"><input id="relief_qualifying" type="text" inputmode="decimal" value="0"></td>
                            </tr>

                            <tr class="band-soft">
                                <td class="lbl"><b>Total Relief</b></td>
                                <td class="num kpi" id="kpi_deductions">1,800,000.00</td>
                            </tr>
                            <tr class="band">
                                <td class="lbl"><b>Taxable Income</b></td>
                                <td class="num kpi" id="kpi_taxable">0.00</td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- ================= 3) TAX CALCULATION ================= -->
                    <h3 class="section-title">Tax Calculation</h3>
                    <table class="grid" id="tblSlabs">
                        <thead><tr><th>Slab</th><th class="num">Taxable Portion (LKR)</th><th class="num">Rate</th><th class="num">Tax (LKR)</th></tr></thead>
                        <tbody id="slab_body"></tbody>
                        <tfoot>
                            <tr class="band-soft">
                                <td class="lbl"><b>Total Tax Liability</b></td>
                                <td></td>
                                <td></td>
                                <td class="num kpi" id="kpi_tax_liability">0.00</td>
                            </tr>
                        </tfoot>
                    </table>

                    <!-- ================= 4) CREDITS & RESULT ================= -->
                    <h3 class="section-title">Tax Credits (deductions from Total Tax Liability)</h3>
                    <table class="grid" id="tblLiab">
                        <tbody>
                            <tr>
                                <td class="lbl">Less: APIT deducted by employer <span class="muted">(auto from Local Employment Income)</span></td>
                                <td class="num"><span id="credit_apit_auto" class="mono">0.00</span></td>
                            </tr>
                            <tr>
                                <td class="lbl">Less: WHT on Interest <span class="muted">(auto 10% of interest income)</span></td>
                                <td class="num"><span id="credit_wht_interest_auto" class="mono">0.00</span></td>
                            </tr>
                            <tr class="band">
                                <td class="lbl totals">Final Income Tax Payable / (Refundable)</td>
                                <td class="num totals pos" id="sum_net">0.00</td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- Dividend info (final tax shown separately; not part of liability/credits) -->
                    <table class="grid" style="margin-top:8px">
                        <tbody>
                            <tr>
                                <td class="lbl">Dividend Final Tax (15%)</td>
                                <td class="num" id="sum_div15">0.00</td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- Effective Tax Rate -->
                    <table class="grid" style="margin-top:8px">
                        <tbody>
                            <tr>
                                <td class="lbl">Effective Tax Rate</td>
                                <td class="num" id="sum_eff">0.00%</td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- ===== Controls at the very bottom ===== -->
                    <div class="controls" style="justify-content:center; margin-top:20px">
                        <button class="btn" id="btn_calc" type="button">Calculate</button>
                        <button class="btn" id="btn_reset" type="button">Reset</button>
                    </div>
                </div>

            </div>
        </div>

    </div>
</main>

<script>
    // ===== helpers =====
    const q = id => document.getElementById(id);
    const fmt = (n) => (n??0).toLocaleString(undefined,{maximumFractionDigits:2,minimumFractionDigits:2});
    const money = fmt;
    const fromMoney = (s) => { const v = (typeof s==='number')? s : Number(String(s).replace(/[^0-9.-]/g,'')); return isNaN(v)?0:v; };
    const getN = id => fromMoney(q(id)?.value||0);


    const SLABS_AFTER6_LOCAL = [
      {cap: 500_000, rate: 0.18, label:'Next 500,000'},
      {cap: 500_000, rate: 0.24, label:'Next 500,000'},
      {cap: 500_000, rate: 0.30, label:'Next 500,000'},
      {cap: Infinity, rate: 0.36, label:'Balance'}
    ];

    function slabOtherAfter6(amount){
      let rem = Math.max(0, amount), tax=0, rows=[];
      for(const s of SLABS_AFTER6_LOCAL){
        const portion = Math.min(rem, s.cap);
        if(portion<=0) break;
        const rowTax = portion*s.rate;
        rows.push({label:s.label, portion, rate:s.rate, tax:rowTax});
        tax += rowTax; rem -= portion;
      }
      return {tax, rows};
    }

    function calc(){
      // Inputs
      const empLocal = getN('emp_apit_annual');

      // Foreign annual (one line) with currency & FX
      const foreignAnnualInput = fromMoney(q('foreign_amount_annual').value)||0;
      const fxEntered = fromMoney(q('fx_rate').value);
      const fx = (fxEntered && fxEntered>0) ? fxEntered : 1;
      const foreignAnnual = foreignAnnualInput * fx;
      q('foreign_lkr_annual').textContent = fmt(foreignAnnual);

      const biz = getN('biz_profit_annual');
      const interest = getN('interest_gross_annual');
      const rent = getN('rent_gross_annual');
      const divi = getN('dividend_gross_annual');
      const investOther = getN('invest_other_annual');
      const otherInc = getN('other_income_annual');

      // Assessable (dividends excluded from slabs)
      const assessable = empLocal + foreignAnnual + biz + interest + rent + investOther + otherInc;
      q('kpi_assessable').textContent = fmt(assessable);

      // Deductions
      const personal = getN('relief_personal');
      const rentRelief = (rent*0.25);
      q('relief_rent_auto').textContent = fmt(rentRelief);

      const solarInput = getN('relief_solar');
      const solar = Math.min(solarInput, 600_000);
      if (solarInput !== solar) q('relief_solar').value = money(solar); // clamp to cap

      const qualifying = getN('relief_qualifying');

      const totalDeductions = Math.max(personal + rentRelief + solar + qualifying, 0);
      q('kpi_deductions').textContent = fmt(totalDeductions);

      const taxable = Math.max(assessable - totalDeductions, 0);
      q('kpi_taxable').textContent = fmt(taxable);

      // Split taxable between foreign and other for RULES
      // Apply all deductions to LOCAL first (max benefit), then any leftover to FOREIGN
      const assessLocal = empLocal + biz + interest + rent + investOther + otherInc;
      const assessForeign = foreignAnnual;

      const dedToLocal = Math.min(totalDeductions, assessLocal);
      const localAfterDed = Math.max(assessLocal - dedToLocal, 0);
      const dedLeft = Math.max(totalDeductions - dedToLocal, 0);
      const foreignAfterDed = Math.max(assessForeign - dedLeft, 0);

      const taxableTotal = localAfterDed + foreignAfterDed; // should equal 'taxable'
      q('kpi_taxable').textContent = fmt(taxableTotal);

      // ---- Unified slabs: 6% first 1M (allocated to LOCAL first), then 15% (foreign-only), then 18%/24%/30%/36% for remaining LOCAL
      const first6Cap = Math.min(taxableTotal, 1_000_000);
      const p6_local = Math.min(localAfterDed, first6Cap);
      const p6_foreign = Math.max(first6Cap - p6_local, 0);
      const tax6 = first6Cap * 0.06;

      const remainingLocal = Math.max(localAfterDed - p6_local, 0);
      const remainingForeign = Math.max(foreignAfterDed - p6_foreign, 0);

      // 15% special applies only to remaining FOREIGN portion
      const p15 = remainingForeign;
      const tax15 = p15 * 0.15;

      // Local portion continues at 18%+ slabs
      const resLocal = slabOtherAfter6(remainingLocal);

      const taxLiability = tax6 + tax15 + resLocal.tax;
      q('kpi_tax_liability').textContent = fmt(taxLiability);

      // Build rows for display: 6% then 15% (if any) then 18%+
      const tbody = q('slab_body'); tbody.innerHTML='';

      if (first6Cap > 0){
        const tr6 = document.createElement('tr');
        tr6.innerHTML = `<td class="lbl">First 1,000,000</td>
                         <td class="num">${fmt(first6Cap)}</td>
                         <td class="num">6%</td>
                         <td class="num">${fmt(tax6)}</td>`;
        tbody.appendChild(tr6);
      }

      if (p15 > 0){
        const tr15 = document.createElement('tr');
        tr15.innerHTML = `<td class="lbl">15% (Foreign only)</td>
                          <td class="num">${fmt(p15)}</td>
                          <td class="num">15%</td>
                          <td class="num">${fmt(tax15)}</td>`;
        tbody.appendChild(tr15);
      }

      resLocal.rows.forEach(r=>{
        const tr = document.createElement('tr');
        tr.innerHTML = `<td class="lbl">${r.label}</td>
                        <td class="num">${fmt(r.portion)}</td>
                        <td class="num">${(r.rate*100).toFixed(0)}%</td>
                        <td class="num">${fmt(r.tax)}</td>`;
        tbody.appendChild(tr);
      });

      // Dividend final tax (15%) — shown separately (not part of liability/credits)
      const divTax = divi * 0.15;
      q('sum_div15').textContent = fmt(divTax);

      // ===== APIT (auto) =====
      // APIT = tax on Local Employment Income after personal relief ONLY (normal slabs)
      const apitTaxable = Math.max(empLocal - personal, 0);
      const apitLocal6 = Math.min(apitTaxable, 1_000_000) * 0.06;
      const apitLocalRest = Math.max(apitTaxable - 1_000_000, 0);
      const apitRes = slabOtherAfter6(apitLocalRest);
      const apit = apitLocal6 + apitRes.tax;
      q('credit_apit_auto').textContent = fmt(apit);

      // WHT on interest (auto 10%)
      const whtInterest = interest * 0.10;
      q('credit_wht_interest_auto').textContent = fmt(whtInterest);



      // Credits and final
      const credits = apit + whtInterest;



      const net = taxLiability - credits; // payable (+) or refundable (-)
      q('sum_net').textContent = (net>=0?fmt(net):`(${fmt(Math.abs(net))})`);
      q('sum_net').className = 'num totals ' + (net>=0 ? 'pos' : 'neg');

      const eff = assessable>0 ? (taxLiability/assessable*100) : 0;
      q('sum_eff').textContent = `${eff.toFixed(2)}%`;
    }

    function resetAll(){
      [ 'emp_apit_annual','foreign_amount_annual','biz_profit_annual','interest_gross_annual','rent_gross_annual','dividend_gross_annual','invest_other_annual','other_income_annual','relief_solar','relief_qualifying' ].forEach(id=> q(id).value = money(0));
      q('relief_personal').value = money(1800000);
      q('foreign_currency').value = 'LKR';
      q('fx_rate').value = money(300);
      calc();
    }

    // Live updates on input/change
    document.querySelectorAll('input,select').forEach(el=>{
      el.addEventListener('input', calc);
      el.addEventListener('change', calc);
      if (el.tagName === 'INPUT') el.addEventListener('keyup', calc);
    });
    // Format money on blur for all text inputs
    function formatMoneyInputs(){ document.querySelectorAll('input[type="text"]').forEach(el=>{ el.value = money(fromMoney(el.value)); }); }
    document.querySelectorAll('input[type="text"]').forEach(el=>{ el.addEventListener('blur', ()=>{ el.value = money(fromMoney(el.value)); }); });
    document.querySelectorAll('input[type="text"]').forEach(el=>{ el.addEventListener('blur', ()=>{ el.value = money(fromMoney(el.value)); calc(); }); });
    q('btn_calc').addEventListener('click', ()=>{ formatMoneyInputs(); calc(); });
    q('btn_reset').addEventListener('click', ()=>{ resetAll(); formatMoneyInputs(); calc(); });

    // Init
    formatMoneyInputs();
    calc();
</script>




 <script>

    // ===== Domestic Employment (APIT / PAYE) =====
    // ===== CONFIG (monthly amounts) =====
    const RELIEF_MONTHLY = 150000; // tax-free monthly relief
    // Monthly equivalents of annual slabs (1,000,000; 500k; 500k; 500k; balance)
    const CAP1 = 1000000/12; // ~83,333.33 at 6%
    const CAP2 =  500000/12; // ~41,666.67 at 18%
    const CAP3 =  500000/12; // ~41,666.67 at 24%
    const CAP4 =  500000/12; // ~41,666.67 at 30%

    const SLABS = [
      { cap: CAP1, rate: 6 },
      { cap: CAP2, rate: 18 },
      { cap: CAP3, rate: 24 },
      { cap: CAP4, rate: 30 },
      { cap: Infinity, rate: 36 }
    ];

    // ===== Helpers =====
    const fmt = n => (isFinite(n) ? n.toLocaleString("en-LK", {maximumFractionDigits: 2}) : "–");
    const digits = s => s.replace(/[^\d.]/g, "");

    function parseMoney(v){
      const n = Number(digits(String(v)));
      return isNaN(n) ? 0 : n;
    }

    function calcMonthlyTax(monthIncome){
      const rows = [];
      // Relief row (not taxed)
      rows.push({ label: `Up to ${fmt(RELIEF_MONTHLY)}`, rateLabel: 'Relief', tax: 0 });

      const taxable = Math.max(0, monthIncome - RELIEF_MONTHLY);
      let remaining = taxable;
      let total = 0;
      let previous = 0;

      for(const s of SLABS){
        if(remaining <= 0) break;
        const band = Math.min(remaining, s.cap);
        const t = band * (s.rate/100);
        total += t;
        const pretty = previous === 0 ? `First ${fmt(Math.round(CAP1))} LKR` : (s.cap === Infinity ? `Balance` : `Next ${fmt(Math.round(s.cap))} LKR`);
        rows.push({ label: pretty, rateLabel: s.rate + '%', tax: t });
        previous += band;
        remaining -= band;
      }

      return { rows, total };
    }

    // ===== UI =====
    const elIncome   = document.getElementById('income');
    const elMonInc   = document.getElementById('monIncome');
    const elAnnInc   = document.getElementById('annIncome');
    const elMonTax   = document.getElementById('monTax');
    const elAnnTax   = document.getElementById('annTax');
    const elRows     = document.getElementById('rows');
    const elReset    = document.getElementById('reset');
    const elExample  = document.getElementById('example');

    function render(){
      const income = parseMoney(elIncome.value);
      if(!income){
        elMonInc.textContent = '–';
        elAnnInc.textContent = '–';
        elMonTax.textContent = '–';
        elAnnTax.textContent = '–';
        elRows.innerHTML = `<tr><td colspan="3" style="color:#cbd8e6">Enter a monthly income to see the breakdown.</td></tr>`;
        return;
      }

      elIncome.value = fmt(income);

      const { rows, total } = calcMonthlyTax(income);

      elMonInc.textContent = 'Rs. ' + fmt(income);
      elAnnInc.textContent = 'Rs. ' + fmt(income * 12);
      elMonTax.textContent = 'Rs. ' + fmt(total);
      elAnnTax.textContent = 'Rs. ' + fmt(total * 12);

      let html = '';
      rows.forEach(r=>{
        html += `<tr><td>${r.label}</td><td>${r.rateLabel}</td><td>Rs. ${fmt(r.tax)}</td></tr>`;
      });
      html += `<tr class="tr-total"><td><strong>Monthly Total</strong></td><td></td><td><strong>Rs. ${fmt(total)}</strong></td></tr>`;
      elRows.innerHTML = html;
    }

    // Events
    elIncome.addEventListener('input', () => {
      const pos = elIncome.selectionStart;
      elIncome.value = digits(elIncome.value);
      elIncome.setSelectionRange(pos, pos);
    });
    elIncome.addEventListener('change', render);
    elIncome.addEventListener('blur', render);

    elReset.addEventListener('click', ()=>{
      elIncome.value = '';
      render();
      elIncome.focus();
    });
    elExample.addEventListener('click', ()=>{
      elIncome.value = '250000';
      render();
    });

    // initial
    render();
  </script>


  <script>
   // ---- Foreign Income ----
  // ---- state helpers ----
  const fmt = n => (isFinite(n) ? n.toLocaleString('en-LK', {maximumFractionDigits:0}) : '—');
  const fmt2 = n => (isFinite(n) ? n.toLocaleString('en-LK', {minimumFractionDigits:2, maximumFractionDigits:2}) : '—');

  const els = {
    period: document.getElementById('period'),
    salaryFC: document.getElementById('salaryFC'),
    fx: document.getElementById('fx'),
    salaryLKR: document.getElementById('salaryLKR'),
    relief: document.getElementById('relief'),
    round: document.getElementById('round'),
    addSlab: document.getElementById('addSlab'),
    resetSlabs: document.getElementById('resetSlabs'),
    slabTbody: document.getElementById('slabs'),
    recalc: document.getElementById('recalc'),
    rows: document.getElementById('rows'),
    sumTax: document.getElementById('sumTax'),
    rGross: document.getElementById('rGross'),
    rTaxable: document.getElementById('rTaxable'),
    rTax: document.getElementById('rTax'),
    rAnnual: document.getElementById('rAnnual'),
    rEff: document.getElementById('rEff')
  };

  // Default Table 8 (as per your example)
  let slabs = [
    { upto: 83333.33, rate: 6 },
    { upto: Infinity, rate: 15 }
  ];

  // ---- UI for slabs ----
  function renderSlabs(){
    els.slabTbody.innerHTML = '';
    slabs.forEach((s, i) => {
      const tr = document.createElement('tr');
      const uptoCell = document.createElement('td');
      const rateCell = document.createElement('td');
      const delCell  = document.createElement('td');
      // Inputs
      const upto = document.createElement('input');
      upto.type = 'number'; upto.step = '0.01';
      upto.value = (isFinite(s.upto) ? s.upto : '');
      upto.placeholder = (i === slabs.length - 1 ? 'Above (leave blank)' : '');
      upto.disabled = (i === slabs.length - 1); // last is "Above"
      const rate = document.createElement('input');
      rate.type='number'; rate.step='0.01'; rate.value = s.rate;
      const del = document.createElement('button');
      del.className='btn secondary'; del.textContent='Delete';
      del.onclick = () => { slabs.splice(i,1); if(!slabs.length) slabs=[{upto:Infinity,rate:0}]; // keep one
                            if(slabs[slabs.length-1].upto!==Infinity) slabs.push({upto:Infinity,rate:slabs.pop().rate});
                            renderSlabs(); calc(); };

      upto.oninput = e => { const v = parseFloat(e.target.value); slabs[i].upto = isNaN(v)?Infinity:v; calc(); };
      rate.oninput = e => { slabs[i].rate = parseFloat(e.target.value)||0; calc(); };

      uptoCell.appendChild(upto); rateCell.appendChild(rate); delCell.appendChild(del);
      tr.append(uptoCell, rateCell, delCell);
      els.slabTbody.appendChild(tr);
    });
  }

  document.getElementById('addSlab').onclick = () => {
    // insert before the last "Above" slab
    const last = slabs.pop(); // Infinity
    slabs.push({ upto: 0, rate: 0 }, last);
    renderSlabs();
  };

  document.getElementById('resetSlabs').onclick = () => {
    slabs = [
      { upto: 83333.33, rate: 6 },
      { upto: Infinity, rate: 15 }
    ];
    renderSlabs(); calc();
  };

  // ---- Calculations ----
  function rounder(mode, value){
    if(mode==='down') return Math.floor(value);
    if(mode==='up') return Math.ceil(value);
    return Math.round(value);
  }

  function calc(){
    // Salary in LKR
    const salaryFC = parseFloat(els.salaryFC.value)||0;
    const fx = parseFloat(els.fx.value)||0;
    const gross = salaryFC * fx;
    els.salaryLKR.value = fmt2(gross);

    // Relief
    const relief = parseFloat(els.relief.value)||0;
    const taxable = Math.max(0, gross - relief);

    // Walk slabs
    let remaining = taxable, lastLimit = 0, totalTax = 0;
    els.rows.innerHTML = '';
    for(let i=0;i<slabs.length;i++){
      const {upto, rate} = slabs[i];
      const cap = isFinite(upto) ? upto : Infinity;
      const span = Math.max(0, Math.min(remaining, cap - lastLimit));
      const tax = span * (rate/100);
      totalTax += tax;

      // row
      const tr = document.createElement('tr');
      const label = isFinite(upto) ? `Up to ${fmt(upto)}` : 'Above';
      tr.innerHTML = `<td>${label}</td>
                      <td class="mono">${fmt(rounder(els.round.value, span))}</td>
                      <td>${rate.toFixed(2)}%</td>
                      <td class="mono">${fmt(rounder(els.round.value, tax))}</td>`;
      els.rows.appendChild(tr);

      remaining -= span; lastLimit = cap;
      if(remaining<=0) break;
    }

    // Results
    const period = els.period.value;
    const taxRounded = rounder(els.round.value, totalTax);
    const annualTax = (period==='monthly') ? taxRounded*12 : taxRounded;
    const effective = gross>0 ? (taxRounded/gross)*100 : 0;

    els.sumTax.textContent = fmt(taxRounded);
    els.rGross.textContent = fmt(gross);
    els.rTaxable.textContent = fmt(taxable);
    els.rTax.textContent = (period==='monthly' ? `Rs. ${fmt(taxRounded)} / month` : `Rs. ${fmt(taxRounded)} / year`);
    els.rAnnual.textContent = `Rs. ${fmt(annualTax)} / year`;
    els.rEff.textContent = `${effective.toFixed(2)}%`;
  }

  // ---- Wire events ----
  ['period','salaryFC','fx','relief','round'].forEach(id=>{
    document.getElementById(id).addEventListener('input', e=>{
      if(id==='period'){
        // auto-switch relief between monthly/annual baseline if it exactly matches the default on change
        const isMonthly = e.target.value==='monthly';
        const currentRelief = parseFloat(els.relief.value)||0;
        if(isMonthly && currentRelief===1800000) els.relief.value = 150000;
        if(!isMonthly && currentRelief===150000) els.relief.value = 1800000;
      }
      calc();
    });
  });
  document.getElementById('recalc').onclick = calc;

  // Init
  renderSlabs(); calc();
</script>