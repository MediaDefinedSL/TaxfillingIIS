
<main class="cal">
    <div class="page-title accent-background">
        <div class="container d-lg-flex justify-content-between align-items-center">
            <h2 class="mb-2 mb-lg-0 mb-2 mb-lg-0 font-weight-bold">Tax Calculator</h2>
            <nav class="breadcrumbs">
                <ol>
                </ol>
            </nav>
        </div>
    </div>
    <div class="container calu">

        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="contact-tab" data-bs-toggle="tab" data-bs-target="#contact" type="button" role="tab" aria-controls="profile" aria-selected="true">Individual Income Tax</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="false" tabindex="-1">Domestic Employment (APIT / PAYE)</button>
            </li>

            <li class="nav-item" role="presentation">
                <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false" tabindex="-1">Foreign Income</button>
            </li>


        </ul>
        <div class="tab-content mt-3" id="myTabContent">
            <div class="tab-pane fade domestic " id="home" role="tabpanel" aria-labelledby="home-tab">


                <div class="wrap Domestic">
                    <h1 class="h1">APIT / PAYE Salary Tax Estimator <span style="white-space:nowrap">– Effective 01.04.2025</span></h1>
                    <!-- <p class="subtitle">Calculate <strong>PAYE / APIT</strong> on your <strong>Local Salary</strong> (Sri Lanka)</p>-->
                    <p class="muted text-changes-cal" style="text-align:center;max-width:760px;margin:0 auto 24px">
                        This calculator gives you an estimate of the Advance Personal Income Tax (APIT/PAYE) on your local salary in Sri Lanka. It is designed to give you a quick idea of the possible tax on your monthly or annual salary.
                    </p>

                    <div class="alert alert-warning cal-wa" role="alert">
                        <span class="importent-text"><i class="bi bi-exclamation-triangle-fill"></i> Important:</span><span class="importent-text twoo">
                            Please note that this is only a guide. Your final tax liability may be different once other employment benefits such as bonuses, allowances, and non-cash benefits are included under Inland Revenue rules.
                        </span>
                    </div>


                    <div class="card">
                        <div class="panel">
                            <!-- <h2 style="text-align:center;margin:0 0 8px">Local Tax Calculator</h2> -->

                            <div>
                                <label for="monthlyIncome">Montly Gross Employment Income </label>
                                <input id="monthlyIncome" class="input" inputmode="decimal" placeholder="" />
                                <!-- <div class="note" style="margin-top:8px">Formatting with commas is OK. Calculator updates as you type.</div> -->
                            </div>

                            <div class="grid md-domes">
                                <div class="tile">
                                    <h4>Monthly Summary</h4>
                                    <div class="muted" style="margin-top:8px">Employment Income </div>
                                    <div class="big" id="outMonthlyIncome">Rs. </div>
                                    <div class="muted pl-4" style="margin-top:8px">APIT/PAYE</div>
                                    <div class="big" id="outMonthlyTax">Rs. </div>
                                </div>
                                <div class="tile md-domes">
                                    <h4>Annual Summary</h4>
                                    <div class="muted" style="margin-top:8px">Employment Income </div>
                                    <div class="big" id="outAnnualIncome">Rs. 0</div>
                                    <div class="muted pl-4" style="margin-top:8px">APIT/PAYE</div>
                                    <div class="big" id="outAnnualTax">Rs. </div>
                                </div>
                            </div>

                            <div class="tile no-padding" style="background:#fff">
                                <div style="display:flex;align-items:center;gap:8px;justify-content:space-between;margin-bottom:10px; display:none;">
                                    <div>
                                        <strong>Monthly Salary (Annual / 12)</strong>
                                        <span class="tag" title="Tax-free monthly relief">Relief: Rs <span id="reliefTag">150,000</span></span>
                                    </div>
                                </div>

                                <div class="tableWrap">
                                    <table aria-describedby="breakdown">
                                        <thead>
                                            <tr>
                                                <th>Tax Bracket</th>
                                                <th>Taxable Income</th>
                                                <th>Tax Rate</th>
                                                <th>Tax Amount</th>
                                            </tr>
                                        </thead>
                                        <tbody id="rows01"></tbody>
                                        <tfoot>
                                            <tr>
                                                <td colspan="3">Monthly APIT</td>
                                                <td id="monthlyTotal">Rs. </td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>

                            <div style="text-align:center">
                                <button id="resetBtn" class="btn" type="button" aria-label="Reset calculator">
                                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path d="M21 12a9 9 0 1 1-2.64-6.36" stroke="currentColor" stroke-width="2" stroke-linecap="round" /><path d="M21 3v6h-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" /></svg>
                                    Reset
                                </button>
                            </div>

                            <!--   <p class="note" style="margin:6px 2px 0">Assumptions: relief of <strong>Rs 1,800,000</strong> per year (Rs 150,000 monthly). Post‑relief bands (annual): next 1,000,000 @@ 6%; next 1,500,000 @@ 18%; next 1,500,000 @@ 24%; next 1,500,000 @@ 30%; balance @@ 36%. You can change bands in code easily.</p>-->
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade  cal-foreing" id="profile" role="tabpanel" aria-labelledby="profile-tab">

                <div class="page foreing">
                    <h1>Foreign Employment Income Tax Calculator – APIT Table 08 (Sri Lanka)</h1>

                    <label class="text-changes-cal">
                        <p style="
    margin-bottom: 3px;
">This calculator estimates your Advance Personal Income Tax (APIT) on foreign employment <br>income under Table 08. <br> Applicable only if:		</p>
                        <ul>
                            <li>You are a Sri Lankan resident employed by a foreign employer.</li>
                            <li>Your salary is paid in foreign currency and remitted through a bank in Sri Lanka.</li>
                            <li>Your work is used outside Sri Lanka.</li>
                            <br>
                        </ul>
                    </label>

                    <div class="alert alert-warning cal-wa" role="alert">
                        <span class="importent-text"><i class="bi bi-exclamation-triangle-fill"></i> Important:</span><span class="importent-text twoo">
                            Tax must be calculated on a cumulative basis and paid monthly by the employee (within 15 days of the following month).
                        </span>
                    </div>

                    <div class="grid g-2">
                        <!-- Inputs -->
                        <div class="card" style="display: none;">
                            <div class="grid g-3">
                                <div>
                                    <label>Period</label>
                                    <select id="period">
                                        <option value="monthly" selected="">Monthly</option>
                                        <option value="annual">Annual</option>
                                    </select>
                                </div>
                                <div>
                                    <label>Salary in Foreign Currency</label>
                                    <input id="salaryFC" type="text" step="0.01" value="3000">
                                </div>
                                <div>
                                    <label>FX Rate (LKR per 1 FC unit)</label>
                                    <input id="fx" type="text" step="0.0001" value="305">
                                </div>
                            </div>

                            <div class="grid g-3" style="margin-top:12px">
                                <div>
                                    <label>Salary in LKR (auto)</label>
                                    <input id="salaryLKR" type="text" step="0.01" value="915000" disabled="">
                                </div>
                                <div>
                                    <label>Personal Relief (LKR)</label>
                                    <input id="relief" type="text" step="0.01" value="150000">
                                    <div class="foot">Tip: Monthly 150,000 → Annual 1,800,000.</div>
                                </div>
                                <div>
                                    <label>Rounding</label>
                                    <select id="round">
                                        <option value="nearest" selected="">Nearest Rupee</option>
                                        <option value="down">Round Down</option>
                                        <option value="up">Round Up</option>
                                    </select>
                                </div>
                            </div>

                            <div class="grid" style="margin-top:14px">
                                <div class="pill">Eligibility (Table 8) – ensure all true:</div>
                                <ul class="muted" style="margin:8px 0 0 18px;line-height:1.35">
                                    <li>Employer is <b>outside Sri Lanka</b> (no PE/branch in SL).</li>
                                    <li>Services are <b>utilized outside Sri Lanka</b>.</li>
                                    <li>Salary is <b>paid in foreign currency</b> and <b>remitted via a licensed Sri Lankan bank</b>.</li>
                                </ul>
                            </div>
                        </div>

                        <!-- Slabs -->
                        <div class="card">
                            <div class="right" style="display: none;">
                                <button class="btn secondary" id="addSlab">+ Add slab</button>
                                <button class="btn secondary" id="resetSlabs">Reset to Table 8</button>
                            </div>
                            <div class="foot" style="display: none;">Define slabs from lowest upwards. Last row “Above” applies to the balance.</div>

                        </div>
                    </div>

                    <!-- Results -->
                    <div class="card" style="/* margin-top:16px; */">

                        <table>
                            <tbody>


                                <tr>
                                    <td class="left" style="
    padding-bottom: 0px;
    height: 14px;
">
                                        Monthly Salary Paid in Foreign Currency
                                    </td>
                                    <td>
                                        <input type="text" inputmode="decimal" id="monthly_foreign" value="">
                                    </td>
                                    <td>
                                        <select id="foreign_currencyy">
                                            <option value="USD" selected>USD</option>
                                            <option value="EUR">EUR</option>
                                            <option value="GBP">GBP</option>
                                            <option value="INR">INR</option>
                                        </select>
                                    </td>

                                    <td class="left" style=""></td>
                                    <td>
                                        <input type="text" id="exchange_rate" value="305" class="none-edit" tabindex="-1">
                                    </td>

                                    <td><span id="salary_lkr"></span></td>
                                </tr>
                                <!--
                                  <tr>
                                    <td class="left">Monthly Salary Paid in Foreign Currency</td>
                                    <td><input type="number" inputmode="decimal"  id="monthly_foreign" value="3000"></td>
                                    <td class="left" style="
                                    width: 86px;
                                ">Ex Rate</td>
                                    <td><input type="number" id="exchange_rate" value="305"></td>
                                    <td><span id="salary_lkr">122,000,000</span></td>
                                  </tr>-->

                                <tr>
                                    <td class="left">Personal Relief</td>
                                    <td colspan="1"><input type="text" inputmode="decimal" id="personal_relief" value="150000" class="none-edit" tabindex="-1"></td>
                                    <td>0%</td>
                                    <td colspan="3" style="text-align: right;"><span id="relief_deduction" style="text-align: right;">150,000</span></td>
                                </tr>

                                <tr class="color-change">
                                    <th class="left"></th>

                                    <th class="left">Tax Bracket</th>
                                    <th>Tax Rate</th>
                                    <th colspan="3" style="
    text-align: right;
">Tax Amount</th>
                                </tr>

                                <tr>

                                    <td style="
    text-align: left;
">
                                        First
                                    </td>
                                    <td> <span id="first_slab">83,333.33</span></td>
                                    <td>6%</td>
                                    <td colspan="3" style="
    text-align: right;
">
                                        <span id="first_tax">5,000</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td>Balance</td>
                                    <td> <span id="balance_slab">121,766,666.67</span></td>
                                    <td>15%</td>
                                    <td colspan="3" style="
    text-align: right;
">
                                        <span id="balance_tax">18,265,000.001</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td class="left">Monthly Tax</td>
                                    <td colspan="3"><span id="taxable_income">122,000,000</span></td>
                                    <td colspan="2" class="highlight" style="
    text-align: right;
">
                                        <span id="monthly_tax">18,270,000</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td colspan="3" class="left">Annual Tax Liability</td>
                                    <td colspan="3" class="highlight" style="
    text-align: right;
">
                                        <span id="annual_tax">219,240,000.004</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td colspan="3" class="left">Effective Tax Rate</td>
                                    <td colspan="3" class="highlight" style="
    text-align: right;
">
                                        <span id="effective_rate">14.98%</span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                        <div class="controls">
                            <button class="btn" id="btn_calc" type="button" style="
    display: none;
">
                                Calculate
                            </button>
                            <button class="btn-reset" onclick="resetCalculator()">
                                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path d="M21 12a9 9 0 1 1-2.64-6.36" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path><path d="M21 3v6h-6" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path></svg>
                                Reset
                            </button>
                        </div>
                    </div>


                </div>


            </div>
            <div class="tab-pane fade active show" id="contact" role="tabpanel" aria-labelledby="contact-tab">
                <div class="sheet">
                    <h1>Income Tax Calculator – Get an estimate of your annual tax liability (Sri Lanka)<br>Year of Assessment 2025/2026</h1>

                    <span class="text-changes-cal muted " style="
    padding-left: 0px;
">
                        <ul style="
    padding-left: 18px;
">
                            <li>Local employment income (APIT/PAYE).</li>
                            <li>Interest income – subject to 10% Withholding Tax (WHT)</li>
                            <li>Foreign employment/business income – included, with a maximum rate of 15%</li>
                            <li>Rent income – with the 25% statutory relief</li>
                            <li>Dividend income – subject to final tax at 15%.</li>
                        </ul>
                    </span>



                    <div class="alert alert-warning cal-wa" role="alert">
                        <span class="importent-text"><i class="bi bi-exclamation-triangle-fill"></i> Important:</span><span class="importent-text twoo">
                            This tool only gives a rough estimate. Your final tax liability may differ based on credits, deductions, and reliefs available under the Inland Revenue Act, No. 24 of 2017 (as amended).
                        </span>
                    </div>

                    <!-- ================= 1) INCOME SOURCES ================= -->
                    <table class="grid" id="tblIncome">
                        <thead><tr><th>Sources of Income</th><th class="num center">Amount (LKR)</th></tr></thead>
                        <tbody>
                            <tr>
                                <td class="lbl">Employment Income – <span class="muted">Local (APIT deducted)</span></td>
                                <td class="num month-cal">
                                    <div class="monthly-div">
                                        <span style="">Monthly</span>
                                        <input id="emp_apit_annual" type="text" inputmode="decimal" value="">
                                    </div>
                                    <div class="annual-div">
                                        <span style="">Annual</span>
                                        <input id="annual-money" class="none-edit" tabindex="-1" type="text" inputmode="decimal" value="">
                                    </div>
                                </td>
                            </tr>

                            <!-- Foreign employment: Annual amount + currency + FX (one line) -->
                            <tr class="band-soft">
                                <td class="lbl one-line-thre inline-f">
                                    <div class="one-line-two">
                                        Employment Income – <span class="muted">Foreign</span>
                                    </div>
                                    <div class="controls one-line" style="margin:6px 0 2px">

                                        <input id="foreign_amount_annual" type="text" inputmode="decimal" value="" style="max-width:200px">
                                        <select id="foreign_currency" style="max-width:110px">
                                            <option>USD</option>
                                            <option>EUR</option>
                                            <option>GBP</option>
                                            <option>INR</option>
                                        </select>

                                        <input id="fx_rate" type="text" inputmode="decimal" value="" style="max-width:120px" class="none-edit" tabindex="-1">
                                    </div>

                                </td>
                                <td class="num">
                                    <span id="foreign_lkr_annual" style="border-radius: 0px !important;" class="mono"></span>
                                    <span id="lkr_annual_all" class="mono"></span>
                                </td>
                            </tr>

                            <tr>
                                <td class="lbl">Business / Professional Income – <span class="muted">(profit)</span></td>
                                <td class="num inline">
                                    <input id="biz_profit_annual" type="text" inputmode="decimal" value="">
                                    <input id="profit_annual" class="none-edit" tabindex="-1" type="text" inputmode="decimal" value="">
                                </td>
                            </tr>

                            <tr>
                                <td class="lbl">Investment Income – Interest<span class="muted"> (WHT deducted) </span></td>
                                <td class="num inline">
                                    <input id="interest_gross_annual" type="text" inputmode="decimal" value="">
                                    <input id="gross_annual" class="none-edit" tabindex="-1" type="text" inputmode="decimal" value="">
                                </td>
                            </tr>
                            <tr>
                                <td class="lbl">Other Investment Income<span class="muted"> (WHT not deducted)</span></td>
                                <td class="num inline">
                                    <input id="invest_other_annual" type="text" inputmode="decimal" value="">
                                    <input id="other_annual" class="none-edit" tabindex="-1" type="text" inputmode="decimal" value="">
                                </td>
                            </tr>
                            <tr>
                                <td class="lbl">Investment Income – Rent <span class="muted">(Gross)</span></td>
                                <td class="num inline">
                                    <input id="rent_gross_annual" type="text" inputmode="decimal" value="">
                                    <input id="gross_annuall" class="none-edit" tabindex="-1" type="text" inputmode="decimal" value="">
                                </td>
                            </tr>

                            <tr>
                                <td class="lbl">Investment Income – Dividend <span class="muted">(Final Tax 15%)</span></td>
                                <td class="num inline">
                                    <input id="dividend_gross_annual" type="text" inputmode="decimal" value="">
                                    <input id="dividend_annuall" class="none-edit" tabindex="-1" type="text" inputmode="decimal" value="">
                                </td>
                            </tr>

                            <tr>
                                <td class="lbl">Other Income</td>
                                <td class="num inline">
                                    <input id="other_income_annual" type="text" inputmode="decimal" value="">
                                    <input id="other_annual2" class="none-edit" tabindex="-1" type="text" inputmode="decimal" value="">
                                </td>
                            </tr>
                            <!--
                                                        <tr class="band text-boldd">
                                                            <td class="lbl text-bold">Total Assessable Income(excludes dividends)</td>
                                                            <td class="num kpi" id="kpi_assessable">0.00
                                                           </td>
                                                           <span class="kpi_assessable_all">0.00</span>


                                                        </tr>-->
                            <tr class="band text-boldd">
                                <td rowspan="3" class="lbl text-bold">Total Assessable Income (excludes dividends)</td>
                                <td class="num kpi kpi-first" rowspan="3" style="
">
                                    <span id="kpi_assessable"></span>
                                </td>
                                <td class="num aling-total" style="
">
                                    <span class="kpi_assessable_all"></span>
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- ================= 2) DEDUCTIONS ================= -->
                    <h3 class="section-title nothi">Deduction From Assessable Income </h3>
                    <table class="grid" id="tblDeduct">
                        <thead><tr><th>Relief / Deduction</th><th class="num Amount-table">Amount (LKR)</th></tr></thead>
                        <tbody>
                            <tr>
                                <td class="lbl">Personal Relief</td>
                                <td class="num"><input id="relief_personal" class="none-edit" tabindex="-1" type="text" inputmode="decimal" value="1800000"></td>
                            </tr>
                            <tr>
                                <td class="lbl">Relief for Rent Income – <span class="muted">(25% of Gross Rent)</span></td>
                                <td class="num"><span id="relief_rent_auto" class="mono"></span></td>
                            </tr>
                            <tr>
                                <td class="lbl">Relief for Solar Panel - <span class="muted">(Deductable up to Rs. 600,000 or Actual cost)</span></td>
                                <td class="num"><input id="relief_solar" type="text" inputmode="decimal" value=""></td>
                            </tr>
                            <tr>
                                <td class="lbl">Qualifying Payments &amp; Other Deductions</td>
                                <td class="num"><input id="relief_qualifying" type="text" inputmode="decimal" value=""></td>
                            </tr>

                            <tr class="band-soft">
                                <td class="lbl"><b>Total Relief</b></td>
                                <td class="num kpi" id="kpi_deductions">1,800,000.00</td>
                            </tr>
                            <tr class="band text-boldd">
                                <td class="lbl text-bold">Taxable Income</td>
                                <td class="num kpi" id="kpi_taxable"></td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- ================= 3) TAX CALCULATION ================= -->
                    <h3 class="section-title nothi">Tax Calculation</h3>
                    <table class="grid" id="tblSlabs">
                        <thead><tr><th>Tax Bracket</th><th class="num">Taxable Income</th><th class="num">Tax Rate</th><th class="num">Tax Amount</th></tr></thead>
                        <tbody id="slab_body"></tbody>
                        <tfoot>
                            <tr class="band-soft tax-boldd">
                                <td class="lbl tax-bold">Total Tax Liability</td>
                                <td></td>
                                <td></td>
                                <td class="num kpi" id="kpi_tax_liability"></td>
                            </tr>
                        </tfoot>
                    </table>

                    <!-- ================= 4) CREDITS & RESULT ================= -->
                    <h3 class="section-title nothi">Tax Credits (Deductions From Total Tax Liability)</h3>
                    <table class="grid" id="tblLiab">
                        <tbody>
                            <tr>
                                <td class="lbl">Less: APIT Deducted by Employer </td>
                                <td class="num"><span id="credit_apit_auto" class="mono"></span></td>
                            </tr>
                            <tr>
                                <td class="lbl">Less: WHT on Interest <span class="muted">(10% of interest income)</span></td>
                                <td class="num"><span id="credit_wht_interest_auto" class="mono"></span></td>
                            </tr>
                            <tr class="band text-boldd">
                                <td class="lbl totals">Final Income Tax Payable / (Refundable)</td>
                                <td class="num totals pos" id="sum_net"></td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- Dividend info (final tax shown separately; not part of liability/credits) -->
                    <table class="grid" style="margin-top:8px">
                        <tbody>
                            <tr>
                                <td class="lbl">Dividend Final Tax (15%)</td>
                                <td class="num" id="sum_div15"></td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- Effective Tax Rate -->
                    <table class="grid" style="margin-top:8px">
                        <tbody>
                            <tr>
                                <td class="lbl">Effective Tax Rate</td>
                                <td class="num" id="sum_eff">0.00%</td>
                            </tr>
                        </tbody>
                    </table>

                    <!-- ===== Controls at the very bottom ===== -->
                    <div class="controls" style="justify-content:center; margin-top:20px">
                        <button class="btn" id="btn_calc" type="button">Calculate</button>
                        <button class="btn" id="btn_resett" type="button">
                            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path d="M21 12a9 9 0 1 1-2.64-6.36" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path><path d="M21 3v6h-6" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path></svg>
                            Reset
                        </button>
                    </div>
                </div>

            </div>
        </div>

    </div>
</main>

<script>
    // ===== helpers =====
    const q = id => document.getElementById(id);
    const fmt = (n) => (n??0).toLocaleString(undefined,{maximumFractionDigits:2,minimumFractionDigits:2});
    const money = fmt;
    // const fromMoney = (s) => { 
    //     const v = (typeof s==='number')? s : Number(String(s).replace(/[^0-9.-]/g,'')); 
    //     return isNaN(v)?0:v; };

     const fromMoney = (s) => {
        if (typeof s === 'number') return s;
        if (!s || !s.toString().trim()) return ''; // keep empty string
        // remove commas
        const v = Number(String(s).replace(/,/g, '').trim());
        return isNaN(v) ? '' : v; // return '' if not a number
    };

    const getN = id => fromMoney(q(id)?.value||0);
    const getAnnual = id => getN(id) * 12;


    const SLABS_AFTER6_LOCAL = [
      {cap: 500_000, rate: 0.18, label:'Next 500,000'},
      {cap: 500_000, rate: 0.24, label:'Next 500,000'},
      {cap: 500_000, rate: 0.30, label:'Next 500,000'},
      {cap: Infinity, rate: 0.36, label:'Balance'}
    ];

    function slabOtherAfter6(amount){
      let rem = Math.max(0, amount), tax=0, rows=[];
      for(const s of SLABS_AFTER6_LOCAL){
        const portion = Math.min(rem, s.cap);
        if(portion<=0) break;
        const rowTax = portion*s.rate;
        rows.push({label:s.label, portion, rate:s.rate, tax:rowTax});
        tax += rowTax; rem -= portion;
      }
      return {tax, rows};
    }

    function limitTo99MillionPlain(inputId) {
      const input = document.getElementById(inputId);

      input.addEventListener("input", () => {
        // Remove non-digit characters
        let val = input.value.replace(/\D/g, "");

        // Limit to 8 digits
        if (val.length > 8) val = val.slice(0, 8);

        let num = parseInt(val) || 0;

        // Cap at 99,000,000
        if (num > 99000000) num = 99000000;

        input.value = num;
      });
    }

    function calc(){
      // Inputs
      //const empLocal = getN('emp_apit_annual');
      const empLocal = getAnnual('emp_apit_annual');
      const empLocalMonthly = getN('emp_apit_annual');

      // Foreign annual (one line) with currency & FX
      const foreignAnnualInput = (fromMoney(q('foreign_amount_annual').value)||0) ;
      const fxEntered = fromMoney(q('fx_rate').value);
      const fx = (fxEntered && fxEntered>0) ? fxEntered : 1;
      const foreignAnnual = (foreignAnnualInput * fx) *12;
      const foreignAnnualMonthly = (foreignAnnualInput * fx)
      q('foreign_lkr_annual').textContent = fmt(foreignAnnualMonthly);

      const biz = getAnnual('biz_profit_annual');
      const interest = getAnnual('interest_gross_annual');
      const rent = getAnnual('rent_gross_annual');
      const divi = getAnnual('dividend_gross_annual');
      const investOther = getAnnual('invest_other_annual');
      const otherInc = getAnnual('other_income_annual');

      const bizMonthly = getN('biz_profit_annual');
      const interestMonthly = getN('interest_gross_annual');
      const rentMonthly = getN('rent_gross_annual');
      const diviMonthly = getN('dividend_gross_annual');
      const investOtherMonthly = getN('invest_other_annual');
      const otherIncMonthly = getN('other_income_annual');

      // Assessable (dividends excluded from slabs)
      const assessable = empLocal + foreignAnnual + biz  + interest  + rent  + investOther  + otherInc ;
      const assessableMonTotal = empLocalMonthly + foreignAnnualMonthly + bizMonthly  + interestMonthly  + rentMonthly  + investOtherMonthly  + otherIncMonthly;
      q('kpi_assessable').textContent = fmt(assessableMonTotal);

      // Deductions
      const personal = getN('relief_personal');
      const rentRelief = (rent*0.25);
      q('relief_rent_auto').textContent = fmt(rentRelief);

      const solarInput = getN('relief_solar');
      const solar = Math.min(solarInput, 600_000);
      if (solarInput !== solar) q('relief_solar').value = money(solar); // clamp to cap

      const qualifying = getN('relief_qualifying');

      const totalDeductions = Math.max(personal + rentRelief + solar + qualifying, 0);
      q('kpi_deductions').textContent = fmt(totalDeductions);

      const taxable = Math.max(assessable - totalDeductions, 0);
      q('kpi_taxable').textContent = fmt(taxable);

      // Split taxable between foreign and other for RULES
      // Apply all deductions to LOCAL first (max benefit), then any leftover to FOREIGN
      const assessLocal = empLocal + biz + interest + rent + investOther + otherInc;
      const assessForeign = foreignAnnual;

      const dedToLocal = Math.min(totalDeductions, assessLocal);
      const localAfterDed = Math.max(assessLocal - dedToLocal, 0);
      const dedLeft = Math.max(totalDeductions - dedToLocal, 0);
      const foreignAfterDed = Math.max(assessForeign - dedLeft, 0);

      const taxableTotal = localAfterDed + foreignAfterDed; // should equal 'taxable'
      q('kpi_taxable').textContent = fmt(taxableTotal);

      // ---- Unified slabs: 6% first 1M (allocated to LOCAL first), then 15% (foreign-only), then 18%/24%/30%/36% for remaining LOCAL
      const first6Cap = Math.min(taxableTotal, 1_000_000);
      const p6_local = Math.min(localAfterDed, first6Cap);
      const p6_foreign = Math.max(first6Cap - p6_local, 0);
      const tax6 = first6Cap * 0.06;

      const remainingLocal = Math.max(localAfterDed - p6_local, 0);
      const remainingForeign = Math.max(foreignAfterDed - p6_foreign, 0);

      // 15% special applies only to remaining FOREIGN portion
      const p15 = remainingForeign;
      const tax15 = p15 * 0.15;

      // Local portion continues at 18%+ slabs
      const resLocal = slabOtherAfter6(remainingLocal);

      const taxLiability = tax6 + tax15 + resLocal.tax;
      q('kpi_tax_liability').textContent = fmt(taxLiability);

      // Build rows for display: 6% then 15% (if any) then 18%+
      const tbody = q('slab_body'); tbody.innerHTML='';

      if (first6Cap > 0){
        const tr6 = document.createElement('tr');
        tr6.innerHTML = `<td class="lbl">First 1,000,000</td>
                         <td class="num">${fmt(first6Cap)}</td>
                         <td class="num">6%</td>
                         <td class="num">${fmt(tax6)}</td>`;
        tbody.appendChild(tr6);
      }

      if (p15 > 0){
        const tr15 = document.createElement('tr');
        tr15.innerHTML = `<td class="lbl">15% (Foreign only)</td>
                          <td class="num">${fmt(p15)}</td>
                          <td class="num">15%</td>
                          <td class="num">${fmt(tax15)}</td>`;
        tbody.appendChild(tr15);
      }

      resLocal.rows.forEach(r=>{
        const tr = document.createElement('tr');
        tr.innerHTML = `<td class="lbl">${r.label}</td>
                        <td class="num">${fmt(r.portion)}</td>
                        <td class="num">${(r.rate*100).toFixed(0)}%</td>
                        <td class="num">${fmt(r.tax)}</td>`;
        tbody.appendChild(tr);
      });

      // Dividend final tax (15%) — shown separately (not part of liability/credits)
      const divTax = divi * 0.15;
      q('sum_div15').textContent = fmt(divTax);

      // ===== APIT (auto) =====
      // APIT = tax on Local Employment Income after personal relief ONLY (normal slabs)
      const apitTaxable = Math.max(empLocal - personal, 0);
      const apitLocal6 = Math.min(apitTaxable, 1_000_000) * 0.06;
      const apitLocalRest = Math.max(apitTaxable - 1_000_000, 0);
      const apitRes = slabOtherAfter6(apitLocalRest);
      const apit = apitLocal6 + apitRes.tax;
      q('credit_apit_auto').textContent = fmt(apit);

      // WHT on interest (auto 10%)
      const whtInterest = interest * 0.10;
      q('credit_wht_interest_auto').textContent = fmt(whtInterest);



      // Credits and final
      const credits = apit + whtInterest;



      const net = taxLiability - credits; // payable (+) or refundable (-)
      q('sum_net').textContent = (net>=0?fmt(net):`(${fmt(Math.abs(net))})`);
      q('sum_net').className = 'num totals ' + (net>=0 ? 'pos' : 'neg');

      const eff = assessable>0 ? (taxLiability/assessable*100) : 0;
      q('sum_eff').textContent = `${eff.toFixed(2)}%`;
    }

    // function resetAll(){
    //   [ 'emp_apit_annual','foreign_amount_annual','biz_profit_annual','interest_gross_annual','rent_gross_annual','dividend_gross_annual','invest_other_annual','other_income_annual','relief_solar','relief_qualifying','annual-money','profit_annual','profit_annual' ].forEach(id=> q(id).value = money(0));
    //   q('relief_personal').value = money(1800000);
    //   q('foreign_currency').value = 'LKR';
    //   q('fx_rate').value = money(300);
    //   calc();
    // }

        function resetAll() {
      // List of fields to clear
      const fieldsToClear = [
        'emp_apit_annual',
        'foreign_amount_annual',
        'biz_profit_annual',
        'interest_gross_annual',
        'rent_gross_annual',
        'dividend_gross_annual',
        'invest_other_annual',
        'other_income_annual',
        'relief_solar',
        'relief_qualifying',
        'annual-money',
        'profit_annual'
      ];

      // Clear them all
      fieldsToClear.forEach(id => q(id).value = "");

      // Set defaults
      q('relief_personal').value = money(1800000);
      q('foreign_currency').value = "USD";
      q('fx_rate').value = money(300);  // or money(300) if you want to keep 300 as default

      // Recalculate if needed
      calc();
    }


    // Live updates on input/change
    document.querySelectorAll('input,select').forEach(el=>{
      el.addEventListener('input', calc);
      el.addEventListener('change', calc);
      if (el.tagName === 'INPUT') el.addEventListener('keyup', calc);
    });
    // Format money on blur for all text inputs
    function formatMoneyInputs(){
        document.querySelectorAll('input[type="text"]').forEach(el=>{ el.value = money(fromMoney(el.value)); }); 
    }

    //document.querySelectorAll('input[type="text"]').forEach(el=>{ el.addEventListener('blur', ()=>{ el.value = money(fromMoney(el.value)); }); });
    // document.querySelectorAll('input[type="text"]').forEach(
    //     el=>{ el.addEventListener('blur', ()=>{ el.value = money(fromMoney(el.value)); calc(); }); });
     document.querySelectorAll('input[type="text"]').forEach(el => {
        el.addEventListener('focus', () => {
            const raw = fromMoney(el.value);
            el.value = raw === '' ? '' : raw; // keep empty fields empty
        });
        el.addEventListener('blur', () => {
            const raw = fromMoney(el.value);
            if (raw !== '') el.value = money(raw);
            calc();
        });
    });
    q('btn_calc').addEventListener('click', ()=>{ formatMoneyInputs(); calc(); });
    q('btn_resett').addEventListener('click', ()=>{ resetAll(); formatMoneyInputs(); calc(); });

    function setupEmptyMoneyInput(inputId) {
      const input = document.getElementById(inputId);
      input.value = ""; // ensure it starts empty
    }
    // Init
    formatMoneyInputs();
    limitTo99MillionPlain('emp_apit_annual');
    //limitTo99MillionPlain('foreign_amount_annual');
    limitTo99MillionPlain('biz_profit_annual');
    limitTo99MillionPlain('interest_gross_annual');
    limitTo99MillionPlain('rent_gross_annual');
    limitTo99MillionPlain('dividend_gross_annual');
    limitTo99MillionPlain('invest_other_annual');
    limitTo99MillionPlain('other_income_annual');
    limitTo99MillionPlain('relief_solar');
    limitTo99MillionPlain('relief_qualifying');
    limitTo99MillionPlain('monthlyIncome');
	limitTo99MillionPlain('monthly_foreign');
	limitTo99MillionPlain('personal_relief');
	limitTo99MillionPlain('salary_lkr');
    
   // limitTo99MillionPlain('annual-money');
   // limitTo99MillionPlain('profit_annual');

    setupEmptyMoneyInput('emp_apit_annual');
     //limitTo99MillionPlain('foreign_amount_annual');
      setupEmptyMoneyInput('biz_profit_annual');
     setupEmptyMoneyInput('interest_gross_annual');
     setupEmptyMoneyInput('rent_gross_annual');
     setupEmptyMoneyInput('dividend_gross_annual');
     setupEmptyMoneyInput('invest_other_annual');
      setupEmptyMoneyInput('other_income_annual');
     setupEmptyMoneyInput('relief_solar');
      setupEmptyMoneyInput('relief_qualifying');
       // setupEmptyMoneyInput('profit_annual');
       // setupEmptyMoneyInput('gross_annual');
       // setupEmptyMoneyInput('other_annual');
       // setupEmptyMoneyInput('gross_annuall');
       // setupEmptyMoneyInput('dividend_annuall');
       //  setupEmptyMoneyInput('other_annual2');
      
       
    calc();
</script>


<script>
    // ---- state helpers ----
    const fmt06 = n => (isFinite(n) ? n.toLocaleString('en-LK', {maximumFractionDigits:0}) : '—');
    const fmt062 = n => (isFinite(n) ? n.toLocaleString('en-LK', {minimumFractionDigits:2, maximumFractionDigits:2}) : '—');

    const els = {
      period: document.getElementById('period'),
      salaryFC: document.getElementById('salaryFC'),
      fx: document.getElementById('fx'),
      salaryLKR: document.getElementById('salaryLKR'),
      relief: document.getElementById('relief'),
      round: document.getElementById('round'),
      addSlab: document.getElementById('addSlab'),
      resetSlabs: document.getElementById('resetSlabs'),
      slabTbody: document.getElementById('slabs'),
      recalc: document.getElementById('recalc'),
      rows: document.getElementById('rows'),
      sumTax: document.getElementById('sumTax'),
      rGross: document.getElementById('rGross'),
      rTaxable: document.getElementById('rTaxable'),
      rTax: document.getElementById('rTax'),
      rAnnual: document.getElementById('rAnnual'),
      rEff: document.getElementById('rEff')
    };

    // Default Table 8 (as per your example)
    let slabs = [
      { upto: 83333.33, rate: 6 },
      { upto: Infinity, rate: 15 }
    ];

    // ---- UI for slabs ----
    function renderSlabs(){
      els.slabTbody.innerHTML = '';
      slabs.forEach((s, i) => {
        const tr = document.createElement('tr');
        const uptoCell = document.createElement('td');
        const rateCell = document.createElement('td');
        const delCell  = document.createElement('td');
        // Inputs
        const upto = document.createElement('input');
        upto.type = 'number'; upto.step = '0.01';
        upto.value = (isFinite(s.upto) ? s.upto : '');
        upto.placeholder = (i === slabs.length - 1 ? 'Above (leave blank)' : '');
        upto.disabled = (i === slabs.length - 1); // last is "Above"
        const rate = document.createElement('input');
        rate.type='number'; rate.step='0.01'; rate.value = s.rate;
        const del = document.createElement('button');
        del.className='btn secondary'; del.textContent='Delete';
        del.onclick = () => { slabs.splice(i,1); if(!slabs.length) slabs=[{upto:Infinity,rate:0}]; // keep one
                              if(slabs[slabs.length-1].upto!==Infinity) slabs.push({upto:Infinity,rate:slabs.pop().rate});
                              renderSlabs(); calc(); };

        upto.oninput = e => { const v = parseFloat(e.target.value); slabs[i].upto = isNaN(v)?Infinity:v; calc(); };
        rate.oninput = e => { slabs[i].rate = parseFloat(e.target.value)||0; calc(); };

        uptoCell.appendChild(upto); rateCell.appendChild(rate); delCell.appendChild(del);
        tr.append(uptoCell, rateCell, delCell);
        els.slabTbody.appendChild(tr);
      });
    }

    document.getElementById('addSlab').onclick = () => {
      // insert before the last "Above" slab
      const last = slabs.pop(); // Infinity
      slabs.push({ upto: 0, rate: 0 }, last);
      renderSlabs();
    };

    document.getElementById('resetSlabs').onclick = () => {
      slabs = [
        { upto: 83333.33, rate: 6 },
        { upto: Infinity, rate: 15 }
      ];
      renderSlabs(); calc();
    };

    // ---- Calculations ----
    function rounder(mode, value){
      if(mode==='down') return Math.floor(value);
      if(mode==='up') return Math.ceil(value);
      return Math.round(value);
    }

    function calcdomestic(){
      // Salary in LKR
      const salaryFC = parseFloat(els.salaryFC.value)||0;
      const fx = parseFloat(els.fx.value)||0;
      const gross = salaryFC * fx;
      els.salaryLKR.value = fmt062(gross);

      // Relief
      const relief = parseFloat(els.relief.value)||0;
      const taxable = Math.max(0, gross - relief);

      // Walk slabs
      let remaining = taxable, lastLimit = 0, totalTax = 0;
      els.rows.innerHTML = '';
      for(let i=0;i<slabs.length;i++){
        const {upto, rate} = slabs[i];
        const cap = isFinite(upto) ? upto : Infinity;
        const span = Math.max(0, Math.min(remaining, cap - lastLimit));
        const tax = span * (rate/100);
        totalTax += tax;

        // row
        const tr = document.createElement('tr');
        const label = isFinite(upto) ? `Up to ${fmt06(upto)}` : 'Above';
        tr.innerHTML = `<td>${label}</td>
                        <td class="mono">${fmt06(rounder(els.round.value, span))}</td>
                        <td>${rate.toFixed(2)}%</td>
                        <td class="mono">${fmt06(rounder(els.round.value, tax))}</td>`;
        els.rows.appendChild(tr);

        remaining -= span; lastLimit = cap;
        if(remaining<=0) break;
      }

      // Results
      const period = els.period.value;
      const taxRounded = rounder(els.round.value, totalTax);
      const annualTax = (period==='monthly') ? taxRounded*12 : taxRounded;
      const effective = gross>0 ? (taxRounded/gross)*100 : 0;

      els.sumTax.textContent = fmt06(taxRounded);
      els.rGross.textContent = fmt06(gross);
      els.rTaxable.textContent = fmt06(taxable);
      els.rTax.textContent = (period==='monthly' ? `Rs. ${fmt06(taxRounded)} / month` : `Rs. ${fmt06(taxRounded)} / year`);
      els.rAnnual.textContent = `Rs. ${fmt06(annualTax)} / year`;
      els.rEff.textContent = `${effective.toFixed(2)}%`;
    }

    // ---- Wire events ----
    ['period','salaryFC','fx','relief','round'].forEach(id=>{
      document.getElementById(id).addEventListener('input', e=>{
        if(id==='period'){
          // auto-switch relief between monthly/annual baseline if it exactly matches the default on change
          const isMonthly = e.target.value==='monthly';
          const currentRelief = parseFloat(els.relief.value)||0;
          if(isMonthly && currentRelief===1800000) els.relief.value = 150000;
          if(!isMonthly && currentRelief===150000) els.relief.value = 1800000;
        }
        calcdomestic();
      });
    });
    document.getElementById('recalc').onclick = calc;

    // Init
    renderSlabs(); calcdomestic();
</script>


<script>
    // =================== Configuration ===================
    // Annual slabs effective 01.04.2025 (editable)
    // Each item: [bandAmountAnnual, rate]
    const CONFIG = {
      reliefAnnual: 1_800_000, // tax-free allowance per year
      slabs: [
        [1_000_000, 0.06], // 6%
        [1_500_000, 0.18], // 18%
        [1_500_000, 0.24], // 24%
        [1_500_000, 0.30], // 30%
        [Infinity, 0.36],  // 36%
      ],
    };

    // =================== Helpers ===================
    const fmt5 = new Intl.NumberFormat("en-LK", { maximumFractionDigits: 2 });
    const fmt50 = new Intl.NumberFormat("en-LK");

    function parseMoneyToNumber(v){
      if(typeof v !== 'string') return Number(v)||0;
      return Number(v.replace(/[^0-9.]/g, '')) || 0;
    }

    function splitSlabsMonthly(monthlyIncome){
      const annual = monthlyIncome * 12;
      const reliefMonthly = CONFIG.reliefAnnual / 12;
      const taxableMonthly = Math.max(0, monthlyIncome - reliefMonthly);

      // Convert annual slabs to monthly sizes
      const monthlySlabs = CONFIG.slabs.map(([amt, rate]) => [
        (amt === Infinity ? Infinity : amt/12), rate
      ]);

      const rows01 = [];
      let remaining = taxableMonthly;
      let idx = 0;
      while(remaining > 0 && idx < monthlySlabs.length){
        const [bandSize, rate] = monthlySlabs[idx];
        const used = Math.min(remaining, bandSize);
        const tax = used * rate;
        rows01.push({
          label: idx===0 ? `First ${fmt50.format(Math.floor(bandSize))} LKR` : (bandSize===Infinity? `Balance` : `Next ${fmt50.format(Math.floor(bandSize))} LKR`),
          ratePct: rate*100,
          amount: used,
          tax,
        });
        remaining -= used;
        idx++;
      }
      return {
        annual,
        reliefMonthly,
        taxableMonthly,
        rows01,
      };
    }

    function updateUI(){
      const inputEl = document.getElementById('monthlyIncome');
      const monthly = parseMoneyToNumber(inputEl.value);

      const { annual, rows01 } = splitSlabsMonthly(monthly);
      const monthlyTax = rows01.reduce((s,r)=>s+r.tax,0);
      const annualTax = monthlyTax*12;

      // Numbers panel
      document.getElementById('outMonthlyIncome').textContent = `Rs. ${fmt50.format(Math.round(monthly))}`;
      document.getElementById('outAnnualIncome').textContent = `Rs. ${fmt50.format(Math.round(annual))}`;
      document.getElementById('outMonthlyTax').textContent = `Rs. ${fmt5.format(monthlyTax)}`;
      document.getElementById('outAnnualTax').textContent = `Rs. ${fmt5.format(annualTax)}`;

      // Relief tag
      document.getElementById('reliefTag').textContent = fmt50.format(CONFIG.reliefAnnual/12);

      // Table rows01
      const tbody = document.getElementById('rows01');
      tbody.innerHTML = '';
      if(monthly <= CONFIG.reliefAnnual/12){
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>Up to ${fmt50.format(CONFIG.reliefAnnual/12)}</td><td>Relief</td><td>–</td><td>–</td>`;
        tbody.appendChild(tr);
      } else {
        // Relief row
        const tr0 = document.createElement('tr');
        tr0.innerHTML = `<td>Up to ${fmt50.format(CONFIG.reliefAnnual/12)}</td><td>Relief</td><td>–</td><td>–</td>`;
        tbody.appendChild(tr0);

        rows01.forEach(r => {
          const tr = document.createElement('tr');
          tr.innerHTML = `<td>${r.label}</td><td>${r.ratePct.toFixed(0)}%</td><td>Rs. ${fmt50.format(Math.round(r.amount))}</td><td>Rs. ${fmt5.format(r.tax)}</td>`;
          tbody.appendChild(tr);
        });
      }

      document.getElementById('monthlyTotal').textContent = `Rs. ${fmt5.format(monthlyTax)}`;
    }

    // =================== Events ===================
    const input = document.getElementById('monthlyIncome');
    input.addEventListener('input', (e)=>{
      // keep user's typing while still allowing commas
      const pos = e.target.selectionStart;
      updateUI();
      // Try to preserve caret position
      requestAnimationFrame(()=>{ e.target.selectionStart = e.target.selectionEnd = pos; });
    });

    document.getElementById('resetBtn').addEventListener('click', ()=>{
      input.value = '';
      updateUI();
      input.focus();
    });

    // Demo value
    input.value = '';
    updateUI();
</script>



<!-- ===== *12 ===== -->
<script>

    const empInput = document.getElementById("emp_apit_annual");
      const annualInput = document.getElementById("annual-money");

      function updateAnnual() {
        const cleaned = empInput.value.replace(/[^0-9.-]/g, '');
    const monthly = Number(cleaned) || 0;

    // Multiply by 12 and format with commas + 2 decimals
    const annual = monthly * 12;
    annualInput.value = annual.toLocaleString(undefined, {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    });
      }

     

      // Update when user types or changes
      empInput.addEventListener("input", updateAnnual);

      // Run once on page load
      updateAnnual();

</script>

<!-- ===== Income Tax Calculator month Income*12 ===== -->

<script>
    function multiplyBy12(inputId, outputId) {
      const input = document.getElementById(inputId);
      const output = document.getElementById(outputId);

        function update() {
          const raw = input.value.replace(/,/g, "");
          const num = parseFloat(raw) || 0;

          // Multiply by 12 and format with commas + 2 decimals
          output.value = (num * 12).toLocaleString("en-US", {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
          });
    }

      input.addEventListener("input", update);
      update(); // run once on load
    }

    // Call for each pair
    multiplyBy12("biz_profit_annual", "profit_annual");
    multiplyBy12("interest_gross_annual", "gross_annual");
    multiplyBy12("invest_other_annual", "other_annual");
    multiplyBy12("rent_gross_annual", "gross_annuall");
    multiplyBy12("dividend_gross_annual", "dividend_annuall");
    multiplyBy12("other_income_annual", "other_annual2");
</script>


<!-- ===== Income Tax Calculator updateAnnualLKR *12 ===== -->
<!-- ===== foring cal ===== -->

<script>
    function calculateTax() {
      const monthlyForeign = parseFloat(document.getElementById("monthly_foreign").value) || 0;
      const exchangeRate = parseFloat(document.getElementById("exchange_rate").value) || 0;
      const personalRelief = parseFloat(document.getElementById("personal_relief").value) || 0;

      const monthlySalaryLKR = monthlyForeign * exchangeRate;
      document.getElementById("salary_lkr").innerText = monthlySalaryLKR.toLocaleString();

      const taxableIncome = Math.max(monthlySalaryLKR - personalRelief, 0);
      document.getElementById("taxable_income").innerText = monthlySalaryLKR.toLocaleString();
      document.getElementById("relief_deduction").innerText = personalRelief.toLocaleString();

      const firstSlab = Math.min(taxableIncome, 83333.33);
      const balance = Math.max(taxableIncome - 83333.33, 0);

      const firstTax = firstSlab * 0.06;
      const balanceTax = balance * 0.15;

      const monthlyTax = firstTax + balanceTax;
      const annualTax = monthlyTax * 12;
      const effectiveRate = monthlySalaryLKR > 0 ? (monthlyTax / monthlySalaryLKR) * 100 : 0;

      document.getElementById("first_slab").innerText = firstSlab.toLocaleString();
      document.getElementById("balance_slab").innerText = balance.toLocaleString();
      document.getElementById("first_tax").innerText = firstTax.toLocaleString();
      document.getElementById("balance_tax").innerText = balanceTax.toLocaleString();
      document.getElementById("monthly_tax").innerText = monthlyTax.toLocaleString();
      document.getElementById("annual_tax").innerText = annualTax.toLocaleString();
      document.getElementById("effective_rate").innerText = effectiveRate.toFixed(2) + "%";
    }


    function resetCalculator() {
document.getElementById("monthly_foreign").value = "";
		 document.getElementById("salary_lkr").innerText = "";
		 document.getElementById("first_slab").innerText = "";
     document.getElementById("first_tax").innerText = "";
     document.getElementById("balance_slab").innerText = "";
     document.getElementById("taxable_income").innerText = "";
     document.getElementById("first_tax").innerText = "";
     document.getElementById("balance_tax").innerText = "";
     document.getElementById("monthly_tax").innerText = "";
     document.getElementById("annual_tax").innerText = "";
     document.getElementById("annual_tax").innerText = "";
     document.getElementById("salary_lkr").innerText = "";
     document.getElementById("salary_lkr").innerText = "";
     document.getElementById("salary_lkr").innerText = "";
     document.getElementById("personal_relief").value = "";
		 document.getElementById("relief_deduction").innerText = "";
     document.querySelectorAll("div.cls-test-div span").forEach(span => span.innerText = "");
     document.getElementById("effective_rate").innerText = "%";
    }

    document.querySelectorAll("#monthly_foreign,#exchange_rate,#personal_relief")
      .forEach(el => el.addEventListener("input", calculateTax));

    calculateTax();
</script>

<!-- ===== END foring cal ===== -->
<!-- ===== rest button changes ===== -->
<!-- =====
<script>

document.getElementById("btn_resett").addEventListener("click", function () {
  // Reset all text input fields
  document.querySelectorAll("input[type='text']").forEach(input => {
    input.value = "0.00"; // reset value
  });

  // Reset all <td> cells that contain numeric values
  document.querySelectorAll("td").forEach(td => {
    if (!isNaN(td.textContent.replace(/,/g, "").trim()) && td.textContent.trim() !== "") {
      td.textContent = "0.00";
    }
  });
});

</script>
-->
<!-- ====== foreign_lkr_annual * 12 ====== -->

<script>
    function updateAnnualLKR() {
      const monthly = parseFloat(document.getElementById("foreign_lkr_annual").textContent.replace(/,/g, "")) || 0;
      const annual = monthly * 12;
      document.getElementById("lkr_annual_all").textContent = annual.toLocaleString("en-US", {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
    }

    // Run once on page load
    updateAnnualLKR();

    // Optional: run every time monthly value changes
    // (If you update foreign_lkr_annual dynamically)
    setInterval(updateAnnualLKR, 500); // checks every 0.5s
</script>
<!-- ====== END foreign_lkr_annual * 12 ====== -->
<!-- ======  kpi_assessable * 12 ====== -->

<script>
    function updateKPIAnnual() {
      // Get value from td
      const monthly = parseFloat(document.getElementById("kpi_assessable").innerText.replace(/,/g, "")) || 0;

      // Calculate annual value
      const annual = monthly * 12;

      // Update the span
      document.querySelector(".kpi_assessable_all").innerText = annual.toLocaleString("en-US", {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
    }

    // Run once on page load
    updateKPIAnnual();

    // Optional: refresh every time td changes dynamically (if updated by JS)
    setInterval(updateKPIAnnual, 500);
</script>


<!-- ====== END kpi_assessable * 12 ====== -->


<script>
    $(document).ready(function () {
    const apiKey = "17f3362860b8346a3277e82d"; // Replace with your free API key
    const apiUrl = "https://v6.exchangerate-api.com/v6/" + apiKey + "/latest/";

    const amountInput = document.getElementById("foreign_amount_annual");
    const currencySelect = document.getElementById("foreign_currency");
    const fxRateInput = document.getElementById("fx_rate");
    const lkrSpan = document.getElementById("foreign_lkr_annual");

    // Function to fetch latest exchange rate
    async function updateExchangeRate() {
        const currency = currencySelect.value;
        try {
            const response = await fetch(`${apiUrl}${currency}`);
            const data = await response.json();

            if(data.result === "success") {
                const rate = data.conversion_rates.LKR;
                fxRateInput.value = rate.toFixed(2);
                updateLKRAmount();
                calc();
            } else {
                console.error("Failed to fetch exchange rate:", data['error-type']);
            }
        } catch (err) {
            console.error("Error fetching exchange rate:", err);
        }
    }

    // Function to update LKR amount
    function updateLKRAmount() {
        const amount = parseFloat(amountInput.value.replace(/,/g, '')) || 0;
        const rate = parseFloat(fxRateInput.value) || 0;
        const lkrAmount = amount * rate;
        lkrSpan.textContent = lkrAmount.toFixed(2);
    }


    // Event listeners
    amountInput.addEventListener("input", updateLKRAmount);
    currencySelect.addEventListener("change", updateExchangeRate);

    // Initial load
    updateExchangeRate();

    });

</script>



<!-- ====== foreign_lkr_annual * 12 ====== -->

<script>
    function updateAnnualLKR() {
      const monthly = parseFloat(document.getElementById("foreign_lkr_annual").textContent.replace(/,/g, "")) || 0;
      const annual = monthly * 12;
      document.getElementById("lkr_annual_all").textContent = annual.toLocaleString("en-US", {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
    }

    // Run once on page load
    updateAnnualLKR();

    // Optional: run every time monthly value changes
    // (If you update foreign_lkr_annual dynamically)
    setInterval(updateAnnualLKR, 500); // checks every 0.5s
</script>
<!-- ====== END foreign_lkr_annual * 12 ====== -->
<!-- ======  kpi_assessable * 12 ====== -->

<script>
    function updateKPIAnnual() {
      // Get value from td
      const monthly = parseFloat(document.getElementById("kpi_assessable").innerText.replace(/,/g, "")) || 0;

      // Calculate annual value
      const annual = monthly * 12;

      // Update the span
      document.querySelector(".kpi_assessable_all").innerText = annual.toLocaleString("en-US", {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
    }

    // Run once on page load
    updateKPIAnnual();

    // Optional: refresh every time td changes dynamically (if updated by JS)
    setInterval(updateKPIAnnual, 500);
</script>


<!-- ====== END kpi_assessable * 12 ====== -->
<!-- ====== foring income ====== -->
<!-- =====<script>

const apiKeyy = "9f7bdbdb1cd0ca90a08d9bfc";
const apiUrll = "https://v6.exchangerate-api.com/v6/" + apiKey + "/latest/";

const amountInputt = document.getElementById("monthly_foreign");
const currencySelectt = document.getElementById("foreign_currencyy");
const fxRateInputt = document.getElementById("exchange_rate");
const lkrSpant = document.getElementById("salary_lkr");

// Fetch exchange rate when currency changes
async function updateExchangeRate() {
    const currency = currencySelectt.value;
    try {
        const response = await fetch(`${apiUrl}${currency}`);
        const data = await response.json();

        if (data.result === "success") {
            const rate = data.conversion_rates.LKR;
            fxRateInputt.value = rate.toFixed(2);
            updateLKRAmount();
        } else {
            console.error("Failed to fetch exchange rate:", data['error-type']);
        }
    } catch (err) {
        console.error("Error fetching exchange rate:", err);
    }
}

// Calculate salary in LKR
function updateLKRAmount() {
    const amount = parseFloat(amountInputt.value) || 0;
    const rate = parseFloat(fxRateInputt.value) || 0;
    const lkrAmount = amount * rate;

    lkrSpant.textContent = lkrAmount.toLocaleString(undefined, {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    });
}

// Event listeners for live updates
amountInputt.addEventListener("input", updateLKRAmount);
fxRateInputt.addEventListener("input", updateLKRAmount);
currencySelectt.addEventListener("change", updateExchangeRate);

// Initial load
updateExchangeRate();

</script>-->
<!-- ===== END  foring income ===== -->

<script>

    const apiKey = "17f3362860b8346a3277e82d";
    const apiUrl = "https://v6.exchangerate-api.com/v6/" + apiKey + "/latest/";

    const amountInput = document.getElementById("monthly_foreign");
    const currencySelect = document.getElementById("foreign_currencyy");
    const fxRateInput = document.getElementById("exchange_rate");
    const lkrSpan = document.getElementById("salary_lkr");

    // Fetch exchange rate when currency changes
    async function updateExchangeRate() {
        const currency = currencySelect.value;
        try {
            const response = await fetch(`${apiUrl}${currency}`);
            const data = await response.json();

            if (data.result === "success") {
                const rate = data.conversion_rates.LKR;
                fxRateInput.value = rate.toFixed(2);
                updateLKRAmount();
    calc();
            } else {
                console.error("Failed to fetch exchange rate:", data['error-type']);
            }
        } catch (err) {
            console.error("Error fetching exchange rate:", err);
        }
    }

    // Calculate salary in LKR
    function updateLKRAmount() {
        const amount = parseFloat(amountInput.value.replace(/,/g, '')) || 0;
        const rate = parseFloat(fxRateInput.value) || 0;
        const lkrAmount = amount * rate;

        lkrSpan.textContent = lkrAmount.toLocaleString(undefined, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        });
    }

    // Event listeners for live updates
    amountInput.addEventListener("input", updateLKRAmount);
    fxRateInput.addEventListener("input", updateLKRAmount);
    currencySelect.addEventListener("change", updateExchangeRate);

    // Initial load
    updateExchangeRate();

</script>

