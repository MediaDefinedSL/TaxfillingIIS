@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@using System.Security.Claims
@using Microsoft.AspNetCore.Html

@{
    var userName = User.FindFirst(ClaimTypes.Name)?.Value;
    var userId = User.Claims.FirstOrDefault(mbox => mbox.Type == "UserID")?.Value;
    bool isAuthenticated = !string.IsNullOrEmpty(userId);
    var apiUrl = Configuration["BaseAPIUrl"];
    var tinNo = User.Claims.FirstOrDefault(c => c.Type == "TinNo")?.Value;
    // var userUploadDocStatus = User.FindFirst("UserUploadDocStatus")?.Value;
    //int docStatus = int.TryParse(userUploadDocStatus, out var parsedStatus) ? parsedStatus : -1;
    int docStatus = ViewBag.UploadedDocStatus ?? -1;
}
<main class="main">

    <!-- Page Title -->
    <div class="page-title accent-background">
        <div class="container d-lg-flex justify-content-between align-items-center">
            <div class="col-lg-4 col-md-6">
                <h2 class="mb-2 mb-lg-0 font-weight-bold">Tax Assisted Filing</h2></br>
                
                <h1 class="mb-2 mb-lg-0">Welcome <span>@userName</span></h1>
            </div>
            <div class="col-lg-2 col-md-4">
                <nav class="breadcrumbs">
                    <ol>
                        @* <li><a href="index.html">Home</a></li>
                        <li class="current">Self Online Flow</li> *@
                    </ol>
                </nav>
            </div>
        </div>
    </div><!-- End Page Title -->
    <!-- File my taxes Section -->
    <section id="Self-Online-Flow" class="">
        <div class="sidebar-main">
            <nav class="sidebar d-flex flex-column flex-shrink-0 position-fixed" style="
    /* position: absolute !important; */">
                <button class="toggle-btn" onclick="toggleSidebar()">
                    <i class="fas fa-chevron-left"></i>
                </button>

                <div class="p-4">
                    <!-- <h4 class="logo-text fw-bold mb-0">@ViewBag.packageName</h4>
                    <h4 class="logo-text fw-bold mb-0">@ViewBag.curancy @ViewBag.price</h4>-->
                </div>

                <div class="nav flex-column">

                    <a href="#" class="sidebar-link active text-decoration-none p-3" data-target="dashboard-section">
                        <i class="fas fa-home me-3"></i>
                        <span class="hide-on-collapse">Dashboard</span>
                    </a>

                    <a class="sidebar-link dropdown-btn text-decoration-none p-3" id="btnLoadSection">
                        <i class="bi bi-person-fill-down"></i>
                        <span class="hide-on-collapse">Personal Information</span>
                    </a>

                    <!-- <button id="btnLoadSection" class="dropdown-btn sidebar-link text-decoration-none p-3">
                    <i class="bi bi-person-fill-down"></i> &nbsp;&nbsp;
                    Personal Information
                    </button>-->
                    <div class="dropdown-container ps-4" style="display: none;">
                        <a class="sub-link sidebar-link" id="linkTaxPayer">
                            <i class="bi bi-cash-coin me-2"></i>TaxPayer(s)
                        </a>
                        <a class="sub-link" id="linkMaritalStatus">
                            <i class="bi bi-activity me-2"></i>Marital Status
                        </a>
                        <a class="sub-link" id="linkLastYear">
                            <i class="fas fa-calendar me-2"></i>Last Year
                        </a>
                        <a class="sub-link" id="linkIdentification">
                            <i class="bi bi-person-vcard-fill me-2"></i>Identification
                        </a>
                        <a class="sub-link" id="linkContactInformation">
                            <i class="bi bi-telephone-outbound me-2"></i>Contact Information
                        </a>
                        <a class="sub-link" id="linkSummary">
                            <i class="bi bi-bar-chart-fill me-2"></i>Summary
                        </a>
                    </div>

                    <a href="#documents-submenu" class="sidebar-link text-decoration-none p-3 d-flex justify-content-between align-items-center"
                    data-bs-toggle="collapse" aria-expanded="false" data-target="documents-section">
                        <span>
                            <i class="fas fa-chart-bar me-3"></i>
                            <span >Documents</span>
                        </span>
                        <i class="fas fa-chevron-down small"></i>
                    </a>

                    <!-- Sub-links under Documents -->
                    <div class="collapse ps-4" id="documents-submenu">
                        <a href="#" class="sidebar-link text-decoration-none py-2 d-block" data-target="employment-section">
                            <i class="fas fa-briefcase me-2"></i> Employment Docs
                        </a>
                        <a href="#" class="sidebar-link text-decoration-none py-2 d-block" data-target="bank-section">
                            <i class="fas fa-university me-2"></i> Bank Confirmation
                        </a>
                        <a href="#" class="sidebar-link text-decoration-none py-2 d-block" data-target="assets-section">
                            <i class="fas fa-balance-scale me-2"></i> Assets & Liabilities
                        </a>
                        <a href="#" class="sidebar-link text-decoration-none py-2 d-block" data-target="other-section">
                            <i class="fas fa-folder me-2"></i> Other Docs
                        </a>
                    </div>

                    <a href="#" class="sidebar-link active text-decoration-none p-3" data-target="declaration-section">
                        <i class="fas fa-file-signature me-2"></i>
                        <span class="hide-on-collapse">Declaration</span>
                    </a>


                </div>

                <div class="profile-section mt-auto p-4">
                    <div class="d-flex align-items-center">
                        <img src="https://randomuser.me/api/portraits/women/70.jpg" style="height:60px" class="rounded-circle" alt="Profile">
                        <div class="ms-3 profile-info">
                            <h6 class="text-white mb-0">Alex Morgan</h6>
                            <small class="text-muted">Admin</small>
                        </div>
                    </div>
                </div>
            </nav>



            <main class="main-content">
                <div class="container-fluid">
                    <div id="dashboard-section" class="content-panel p-4 bg-light rounded shadow-sm">
                        <div class="mt-4">
                            <div class="d-flex align-items-center mb-3">
                                <h4 class="mb-0 mx-auto">Individual Income Tax Filing Summary</h4>
                            
                                <div style="display:none;">
                                    <button class="btn btn-primary me-2" >Continue filing</button>
                                    <button class="btn btn-danger" id="btnRemoveDraft">Remove draft</button>
                                </div>
                            </div>
                            <div class="user-details-section mb-4">
                                <table class="table table-borderless site-color mx-auto" style="width: auto;">
                                    <thead>
                                        <tr>
                                            <th scope="col"><strong>Taxpayer Identification Number (TIN)</strong></th>
                                            <td class="text-center">@tinNo</td>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <th scope="row"><strong>Name of taxpayer</strong></th>
                                            <td class="text-center">@userName</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            
                            <!-- Current Year Info -->
                            <!-- Four separate info boxes -->
                            <!-- Four equal-sized info boxes -->
                            <div class="row mb-4 align-items-stretch">
                                <div class="col-md-3">
                                    <div class="card text-center shadow-sm h-100">
                                        <div class="card-body d-flex flex-column justify-content-center">
                                            <h6 class="card-title">Year of Assesement</h6>
                                            <p class="fs-5 fw-bold">2024/2025</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card text-center shadow-sm h-100">
                                        <div class="card-body d-flex flex-column justify-content-center">
                                            <h6 class="card-title">Due date</h6>
                                            <p class="fs-5 fw-bold">11/30/2025</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="card text-center shadow-sm h-100">
                                        <div class="card-body d-flex flex-column justify-content-center">
                                            <h6 class="card-title">Status</h6>
                                            <span id="statusBadge" class="badge px-2 py-1"></span>
                                        </div>
                                    </div>
                                </div>
                                <script>
                                    const docStatus = @docStatus;                                    
                                    const badge = document.getElementById("statusBadge");

                                   // if (badge && docStatus) {
                                    switch (docStatus) {
                                    case 1:
                                    badge.className = "badge bg-warning text-dark px-2 py-1";
                                    badge.textContent = "Draft";
                                    break;
                                    case 2:
                                    badge.className = "badge bg-success text-light px-2 py-1";
                                    badge.textContent = "Submitted";
                                    break;
                                    case 0:
                                    badge.className = "badge bg-info text-dark px-2 py-1";
                                    badge.textContent = "New";
                                    break;
                                    default:
                                    badge.className = "badge bg-secondary text-light px-2 py-1";
                                    badge.textContent = docStatus;
                                    }
                                   // }
                                </script>
                                <div class="col-md-3">
                                    <div class="card text-center shadow-sm h-100">
                                        <div class="card-body d-flex flex-column justify-content-center">
                                            <h6 class="card-title">Uploads</h6>
                                            <a href="#" id="fileCountLink" class="fs-6 fw-bold text-decoration-none"></a>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <p>Select a year to start or continue your return. Past years are read-only.</p>
                            @{
                                int startYear = 2019;
                                int endYear = DateTime.Now.Month >= 4 ? DateTime.Now.Year - 1 : DateTime.Now.Year - 2;
                            }

                            <div class="row">
                                <!-- Left side: Table -->
                                <div class="col-md-8 ">

                                    <!-- Yearly Summary Table -->
                                    <div class="card shadow-sm rounded-3 mb-4 h-100">
                                        <div class="card-body p-0">
                                            <table class="table table-borderless align-middle mb-0">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th></th>
                                                        <th >Year of assessment</th>
                                                        <th>Due date</th>
                                                        <th>Progress</th>
                                                        <th style="text-align: center;">Status</th>
                                                        <!--<th class="text-end">Actions</th>-->
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @for (int year = endYear; year >= startYear; year--)
                                                    {
                                                        var dueDate = new DateTime(year + 1, 11, 30).ToString("yyyy-MM-dd");
                                                        var isCurrentAssessmentYear = year == endYear;

                                                        int numericStatus = isCurrentAssessmentYear ? docStatus : 2; // default SUBMITTED for past years

                                                        string status = "SUBMITTED"; // default for past years
                                                        if (isCurrentAssessmentYear)
                                                        {
                                                            status = docStatus switch
                                                            {
                                                                0 => "NEW",
                                                                1 => "DRAFT",
                                                                2 => "SUBMITTED",
                                                                3 => "REUPLOAD",
                                                                4 => "RESUBMITTED",
                                                                _ => "UNKNOWN"
                                                            };
                                                        }

                                                        var badgeClass = status switch
                                                        {
                                                            "NEW" => "bg-info text-dark",
                                                            "DRAFT" => "bg-warning text-dark",
                                                            "SUBMITTED" => "bg-success",
                                                            "REUPLOAD" => "bg-danger-subtle text-danger",
                                                            "RESUBMITTED" => "bg-info-subtle text-info",
                                                            _ => "bg-dark"
                                                        };
                                                        // Unique ID for row and badge
                                                        var rowId = $"assessment-row-{year}";
                                                        var badgeId = $"status-badge-{year}";
                                                        <tr id="@rowId" data-status="@numericStatus">
                                                            <td align="center">
                                                                <input class="checkbox-lg" type="checkbox" @(isCurrentAssessmentYear ? "checked" : "") />
                                                            </td>
                                                            <td >@year/@(year + 1)</td>
                                                            <td >@dueDate</td>
                                                            <td align="center">
                                                                <div class="progress" style="height: 6px;">
                                                                    <div class="progress-bar bg-primary" @(numericStatus ==2 ? "style=width:100%" : "")></div>
                                                                </div>
                                                            </td>
                                                            <td align="center">
                                                                <span id="@badgeId" class="badge @badgeClass">@status</span>
                                                            </td>
                                                            <!--<td class="text-end actionButtons"></td>-->

                                                            
                                                        </tr>


                                                    }



                                                   
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>

                                <!-- Right side: Progress Box -->
                                @{
                                    int currentYear = endYear;
                                    string statusText = docStatus switch
                                    {
                                        0 => "New",
                                        1 => "Draft",
                                        2 => "Submitted",
                                        3 => "Reupload",
                                        4 => "Resubmitted",
                                        _ => "Unknown"
                                    };

                                    string statusClass = docStatus switch
                                    {
                                        0 => "bg-info text-dark",
                                        1 => "bg-warning text-dark",
                                        2 => "bg-success text-white",
                                        3 => "bg-danger text-white",
                                        4 => "bg-info text-dark",
                                        _ => "bg-dark text-white"
                                    };

                                    int progressValue = docStatus switch
                                    {
                                        0 => 20,
                                        1 => 40,
                                        2 => 100,
                                        3 => 60,
                                        4 => 80,
                                        _ => 0
                                    };
                                }

                                <div class="col-md-4">
                                    <div class="card h-100">
                                        <!-- Header with status -->
                                        <div id="progressHeader" class="card-header @statusClass">
                                            @currentYear/@(currentYear + 1) – @statusText
                                        </div>

                                        <div class="card-body">
                                            <p><strong>Progress</strong></p>
                                            <div class="progress mb-3" style="height: 8px;">
                                                <div id="progressBar" class="progress-bar bg-primary" style="width: 0%;"></div>
                                            </div>

                                            <ul class="list-group mb-3">
                                                <li class="list-group-item d-flex justify-content-between">
                                                    Personal information completed
                                                    <span id="personalInfoStatus" class="text-secondary"><span class="text-success">✓</span></span>
                                                </li>
                                                <li class="list-group-item d-flex justify-content-between">
                                                    Employment income added
                                                    <span id="employmentIncomeStatus" class="text-secondary">Checking...</span>
                                                </li>
                                                <li class="list-group-item d-flex justify-content-between">
                                                    Bank Confirmation uploaded
                                                    <span id="bankConfirmationStatus" class="text-secondary">Checking...</span>
                                                </li>
                                                <li class="list-group-item d-flex justify-content-between">
                                                    Assets & Liabilities added
                                                    <span id="assetsStatus" class="text-secondary">Checking...</span>
                                                </li>
                                                <li class="list-group-item d-flex justify-content-between">
                                                    Other docs uploaded
                                                    <span id="otherDocsStatus" class="text-secondary">Checking...</span>
                                                </li>
                                            </ul>

                                                
                                            

                                            <!-- Buttons -->
                                            <div class="d-flex gap-2">
                                                @if (docStatus == 1)
                                                {
                                                    <!-- Draft -->
                                                    <button class="btn btn-primary flex-fill" id="btnContinue">Continue filing</button>
                                                    <button class="btn btn-secondary flex-fill" id="btnUploadDocs">Upload documents</button>
                                                    <button class="btn btn-danger flex-fill" id="btnRemoveDft">Remove draft</button>
                                                    <button class="btn btn-info flex-fill" id="btnViewSubmittedDocs" style="display:none">View Docs</button>
                                                }
                                                else if (docStatus == 2)
                                                {
                                                    <!-- Submitted -->
                                                    <button class="btn btn-info flex-fill" id="btnViewSubmittedDocs" style="display:none">
                                                        <i class="fas fa-eye me-1"></i> View Docs
                                                    </button>
                                                }   
                                                else if (docStatus == 0)
                                                {
                                                    <!-- New -->
                                                     <button class="btn btn-primary flex-fill" id="btnContinue">Continue filing</button>
                                                    <button class="btn btn-secondary flex-fill" id="btnUploadDocs">Upload documents</button>
                                                    <button class="btn btn-danger flex-fill" id="btnRemoveDft" style="display:none">Remove draft</button>
                                                    <button class="btn btn-info flex-fill" id="btnViewSubmittedDocs" style="display:none">View Docs</button>
                                                }   
                                                else
                                                {
                                                    <!-- Other statuses -->
                                                    <button class="btn btn-secondary flex-fill">View Details</button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                </div>
                
                <!-- Upload Tracker (place inside each section header) -->
                <!-- Global Upload Tracker -->
                
                <div id="global-upload-tracker">
                    <span class="upload-label">
                        <i class="fas fa-upload me-1 text-primary"></i> Uploaded
                    </span>
                    <span id="globalUploadCount" class="fw-bold text-dark">0 </span> 
                    <span class="fw-bold text-dark">files </span>
                </div>
               
                <div id="in-this-section-container" style="display: none;"></div>
                <div id="documents-section" class="content-panel p-4 bg-light rounded shadow-sm" style="display: none;">
                    <!-- Header Section -->
                    <div class="d-lg-flex justify-content-between align-items-center mb-4">
                        <div class="col-lg-9 col-md-12">
                            <h4>
                                <i class="fas fa-folder-open text-primary me-2"></i> Documents
                            </h4>
                            <p class="text-muted">
                                <i class="fas fa-lock me-1 text-secondary"></i>
                                Upload and manage your tax documents securely and easily.
                            </p>
                        </div>
                        <div class="col-lg-3 col-md-12 text-lg-end text-md-center mt-3 mt-lg-0">
                            <!-- You can place a summary or help link here -->
                        </div>
                    </div>

                    <!-- Upload Prompt -->
                    <div class="uplode-parts">
                        <div class="row ">
                            <div class="col-md-6 alert alert-primary d-flex align-items-center p-4 shadow-lg border border-2 border-primary rounded-4" role="alert" style="background: #e9f4ff;">
                                <i class="fas fa-cloud-upload-alt fa-2x me-4 text-primary pulse-icon"></i>
                                <div>
                                    <h5 class="mb-2 fw-bold text-primary">📤 Ready to submit?</h5>
                                    <p class="mb-2">
                                        Click below to upload your
                                        <span class="text-decoration-underline fw-semibold">2024/2025 Tax Documents</span>.
                                    </p>
                                    <button class="btn btn-primary btn-lg px-4 py-2" id="uploadDoc-btn">
                                        <i class="fas fa-upload me-2"></i> Upload Documents
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-6 guid-line">

                                <div>Required Documents for Upload (as applicable)</div>
                                <ul>
                                    <li><i class="bi bi-check"></i>APIT / PAYE – T10 Certificate (Employment income)</li>
                                    <li><i class="bi bi-check"></i>Bank Confirmation Letters – Savings, Current, Fixed Deposits, Credit Cards, Lease, Loan, WHT certificates </li>
                                    <li><i class="bi bi-check"></i>Rent Income Evidence – Rent agreements, receipts, or statements</li>
                                    <li><i class="bi bi-check"></i>Investment / Dividend Statements – Including unit trusts, share dividends, treasury bills, etc.</li>
                                    <li><i class="bi bi-check"></i>Foreign Income Proof – Payslips, remittance advice, bank credit notices </li>
                                    <li><i class="bi bi-check"></i>Solar Panel Purchase &amp; Donation Receipts – If claiming relevant reliefs</li>
                                    <li><i class="bi bi-check"></i>Tax Payment Evidence – Payment receipts and IRD acknowledgements</li>
                                    <li><i class="bi bi-check"></i>Any Other Supporting Documents relevant for tax filing (e.g., previous year’s tax return,) </li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Optional: Additional Details or Instructions -->
                    <div class="mt-4 document-guidelines">
                        <h5><i class="fas fa-info-circle text-secondary me-2"></i>Document Guidelines</h5>
                        <ul class="text-muted">
                            <li><strong>Accepted formats: <strong>PDF, JPG, PNG</strong></strong></li>
                            <li><strong>Maximum size per file: <strong>5MB</strong></strong></li>
                            <li>Privacy: Files are encrypted in transit and at rest. Only your assigned tax advisor can view them.</li>
                        </ul>
                    </div>

                    <div class="d-flex justify-content-between">
                        <div class="col-lg-6 col-md-6 btn-prv">
                            <!-- Previous Button -->
                            <button class="btn btn-primary btn-lg" id="btnDocPrevious">
                                Previous
                            </button>
                        </div>
                        <div class="col-lg-6 col-md-6 right next-btn">
                            <button class="btn btn-primary btn-lg" id="btnDocNext">
                                Next
                            </button>
                        </div>
                    </div>



                </div>

                <div id="employment-section" class="content-panel p-4 bg-light rounded shadow-sm" style="display: none;">
                    <h4><i class="fas fa-briefcase text-primary me-2"></i> Employment Documents</h4>

                    <!-- Toggle Buttons for Category -->
                    <div class="mb-3 tab-btn-list d-flex flex-wrap gap-2">
                        <button type="button" class="btn category-btn active" data-category="T10">T10</button>
                        <button type="button" class="btn category-btn" data-category="TerminalBenefit">Terminal Benefit</button>
                        <button type="button" class="btn category-btn" data-category="AnyOther">Any Other</button>
                    </div>

                    <!-- T10 Form -->
                    <div id="t10-form" class="upload-form-section" style="display: none;">

                        <input type="hidden" name="CategoryName" value="T10" />
                        <div class="mb-3">
                            <div class="alert alert-info mt-2" role="alert">
                                <strong>Note:</strong> Please upload your T10 Certificate for the relevant period. If you have multiple T10 Certificates for different employees, kindly upload each separately. <br>
                                <a href="#" class="text-primary text-decoration-underline" data-bs-toggle="modal" data-bs-target="#t10Modal">
                                    View Sample T10 Certificate
                                </a>
                            </div>
                            <!-- Modal -->
                            <div class="modal fade" id="t10Modal" tabindex="-1" aria-labelledby="t10ModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered" style="max-width: 600px;">
                                    <!-- smaller width -->
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="t10ModalLabel">Sample T10 Certificate</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body" style="height: 400px;">
                                            <!-- smaller height -->
                                            <iframe src="/assets/files/T10.pdf" style="width:100%; height:100%;" frameborder="0"></iframe>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <label>Employer Name</label>
                            <input type="text" name="T10EmployerName" class="form-control" id="T10EmployerName" />
                            <form method="post" enctype="multipart/form-data" class="mt-3">
                                <label>Upload File</label>
                                <input type="file" id="fileInput" name="UploadedFile" class="form-control" />
                            </form>
                        </div>


                    </div>

                    <!-- Terminal Benefit Form -->
                    <div id="terminal-form" class="upload-form-section" style="display: none;">

                        <input type="hidden" name="CategoryName" value="TerminalBenefit" />
                        <div class="mb-3">
                            <label>Employer Name</label>
                            <input type="text" name="TerminalEmployerName" class="form-control" id="TerminalEmployerName" />
                            <form method="post" enctype="multipart/form-data" class="mt-3">

                                <label>Upload File</label>
                                <input type="file" id="fileInputTerminal" name="UploadedFile" class="form-control" />
                            </form>
                        </div>

                    </div>

                    <!-- Any Other Form -->
                    <div id="AnyOther-form" class="upload-form-section" style="display: none;">

                        <input type="hidden" name="CategoryName" value="AnyOther" />
                        <div class="mb-3">
                            <label class="form-label">Type</label>
                            <select class="form-select" name="OtherType" id="AnyOtherType">
                                <option value="">-- Select Type --</option>
                                <option value="SalarySlips">Salary Slips</option>
                                <option value="Otherbenefits">Other benefits received from the employer</option>
                                <option value="Anyotherdocuments">Any other documents relevant to employment income</option>
                            </select>
                            <!-- Message container -->
                            <div id="otherTypeAlert" class="alert alert-warning mt-2" role="alert" style="display:none;">
                                Such as a vehicle for private use, a house for residential purposes, and company shares.
                            </div>

                            
                            <form method="post" enctype="multipart/form-data" class="mt-3">
                                <label>Upload File</label>
                                <input type="file" id="fileInputAnyOther" name="UploadedFile" class="form-control" />
                            </form>
                        </div>

                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-primary submit-btn" id="submitBtn">
                            <i class="fas fa-save me-1"></i> Upload
                        </button>
                    </div>

                    <div id="uploadedDocs" class="mt-5" style="display: none;">
                        <h5 class="mb-3" id="categoryHeading">Your Documents for 2024/2025</h5>
                        <div class="table-responsive">
                            <table class="table table-bordered table-striped">
                                <thead class="table-light">
                                    <tr>
                                        <th>#</th>
                                        <th>Document Name</th>
                                        <th>Category</th>
                                        <th>Employer Name/Any Other Type</th>
                                        <th>Uploaded On</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="documentsTableBody"></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="col-lg-6 col-md-6 btn-prv">
                            <!-- Previous Button -->
                            <button class="btn btn-primary btn-lg" id="btnPrevious">
                                Previous
                            </button>
                        </div>
                        <div class="col-lg-6 col-md-6 right next-btn">
                            <button class="btn btn-primary btn-lg" id="btnNext">
                                Next
                            </button>
                        </div>
                    </div>


                </div>

                <div id="bank-section" class="content-panel p-4 bg-light rounded shadow-sm" style="display: none;">
                    <h4><i class="fas fa-university me-2 text-primary me-2"></i> Bank Confirmation</h4>

                    <!-- T10 Form -->
                    <div id="bank-form" class="upload-form-section" style="display: block;">

                        <input type="hidden" name="CategoryName" value="T10" />
                        <div class="mb-3">
                            <label class="form-label">Bank Confirmation Type</label>
                            <select class="form-select" name="BankConfirmationType" id="BankConfirmationType">
                                <option value="">-- Select Type --</option>
                                <option value="Savings and Fixed Deposits">Savings and Fixed Deposits</option>
                                <option value="Loans and Leases">Loans and Leases</option>
                                <option value="Credit Cards">Credit Cards</option>
                                <option value="Money Market Accounts">Money Market Accounts</option>
                                <option value="Unit Trust Accounts">Unit Trust Accounts</option>
                                <option value="Any other">Any other </option>

                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Bank Name</label>
                           <!-- <input type="text" class="form-control" name="BankName" id="BankName" />-->
                           @*  <select id="BankName" name="BankName" class="form-select" style="width:100%">
                                <option value="">-- Select Bank --</option>
                            </select> *@                           
                            
                            <input type="text" id="bankInput" class="form-control" placeholder="Type Bank Name" autocomplete="off" />
                            <div id="bankDropdown" class="dropdown"></div>
                           

                        </div>
                        <!-- Branch -->
                        <div class="mb-3">
                            <label>Branch</label>
                            <input type="text" id="branchInput" class="form-control" placeholder="Choose bank first" autocomplete="off" disabled />
                            <div id="branchDropdown" class="dropdown"></div>
                        </div>

                        <!-- Hidden inputs -->
                        <input type="hidden" id="bank_id" name="bank_id" />                        
                        <input type="hidden" id="bank_long" name="bank_long" />
                        <input type="hidden" id="branch_code" name="branch_code" />
                        <input type="hidden" id="branch_name" name="branch_name" />


                        @* <div class="mb-3">
                            <label class="form-label">Branch Name</label>
                            <!-- <input type="text" class="form-control" name="BankName" id="BankName" />-->
                            <select id="BranchName" name="BranchName" class="form-select" style="width:100%">
                                <option value="">-- Select Branch --</option>
                            </select>
                        </div> *@
                        <form method="post" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label>Upload File</label>
                                <input type="file" id="fileInputBank" name="UploadedFile" class="form-control" />
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn btn-primary submit-btn" id="submitBankBtn"><i class="fas fa-save me-1"></i>Upload</button>
                            </div>
                            
                        </form>
                        <div id="uploadedBankDocs" class="mt-5" style="display: none;">
                            <h5 class="mb-3" id="categoryHeading"><span class="text-muted">Your Uploaded</span> <span class="badge bg-primary">Bank Confirmation</span> <span class="text-muted">Documents for 2024/2025</span></h5>
                            <div class="table-responsive">
                                <table class="table table-bordered table-striped mt-2">
                                    <thead class="table-light">
                                        <tr>
                                            <th>#</th>
                                            <th class="col-document-name">Document Name</th>
                                            <th class="col-category">Category</th>
                                            <th class="col-employer-name">Employer Name/Any Other Type</th>
                                            <th class="col-confirmation-type">Bank Confirmation Type</th>
                                            <th class="col-bank-name">Bank Name</th>
                                            <th>Uploaded On</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="documentsTableBankBody"></tbody>
                                </table>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between">
                            <div class="col-lg-6 col-md-6 btn-prv">
                                <!-- Previous Button -->
                                <button class="btn btn-primary btn-lg" id="btnEmployementPrevious">
                                    Previous
                                </button>
                            </div>
                            <div class="col-lg-6 col-md-6 right next-btn">
                                <button class="btn btn-primary btn-lg" id="btnAssestsNext">
                                    Next
                                </button>
                            </div>
                        </div>


                    </div>


                </div>

                <div id="assets-section" class="content-panel p-4 bg-light rounded shadow-sm" style="display: none;">
                    <h4><i class="fas fa-balance-scale me-2 text-primary me-2"></i> Assets & Liabilities</h4>

                    <!-- T10 Form -->
                    <div id="assets-form" class="upload-form-section" style="display: block">

                        <input type="hidden" name="CategoryName" value="T10" />
                        <div class="card p-4 shadow-sm">
                            <h5 class="mb-3">Assets as at <strong>31.03.2025</strong></h5>

                            <!-- Local/Foreign checkbox summary -->
                            <!-- <div class="mb-4">
                                <label class="form-label fw-semibold">Select Asset Location (General)</label>
                                <div class="form-check form-check-inline me-4">
                                    <input class="form-check-input bordered-checkbox" type="checkbox" id="summaryLocal">
                                    <label class="form-check-label" for="summaryLocal">A. Local</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input bordered-checkbox" type="checkbox" id="summaryForeign">
                                    <label class="form-check-label" for="summaryForeign">B. Foreign</label>
                                </div>
                            </div>-->
                            <!-- Upload method selection -->
                            <!-- Upload method selection -->
                            <label class="form-label fw-semibold mb-2">Please provide your Asset and Liability details as at 31.03.2025 by selecting one of the following options:</label>
                            <div class="btn-group mb-4" role="group">
                                <input type="radio" class="btn-check" name="assetInputOption" id="optionExcel" value="1" autocomplete="off" checked>
                                <label class="btn btn-outline-secondary" for="optionExcel">Enter Asset & Liability Details Using Excel Template</label>

                                <input type="radio" class="btn-check" name="assetInputOption" id="optionManual" value="2" autocomplete="off">
                                <label class="btn btn-outline-secondary" for="optionManual">Upload Supporting Documents for Assets & Liabilities</label>
                            </div>



                            <!-- Excel Upload Section -->
                            <div id="excelUploadSection" class="container my-4">
                                <div class="card shadow-sm border-0">
                                    <div class="card-body">

                                        <!-- Info Alert with Download Button -->
                                        <div class="alert alert-info d-flex justify-content-between align-items-center">
                                            <span>
                                                <i class="fas fa-download me-2"></i>
                                                Please download and fill out the Excel sheet for Assets & Liabilities.
                                            </span>
                                            <a href="/assets/files/AssetsAndLiabilityTemplate.xlsx" class="btn btn-sm btn-primary">
                                                Download Template
                                            </a>
                                        </div>

                                        <!-- Visible File Input -->
                                        <label for="assetsExcelFile" class="form-label fw-semibold">
                                            Fill in the pre-formatted Excel sheet provided and upload the completed file. No supporting documents are required.
                                        </label>
                                        <input type="file" id="assetsExcelFile" name="assetsExcelFile"
                                               accept=".xlsx" class="form-control mb-2"
                                               onchange="handleExcelFileChange(event)">

                                        <!-- File Name Display -->
                                        <div id="uploadedFileName" class="mb-3 text-muted" style="font-size: 0.9rem;"></div>

                                        <!-- Validation Message -->
                                        <div id="fileValidationMessage" class="text-danger mb-3" style="font-size: 0.9rem;"></div>

                                        <!-- Button Row -->
                                        <div class="d-flex justify-content-end gap-2">
                                            <button type="submit" class="btn btn-success submit-btn" id="submitExcelBtn" disabled>
                                                Submit
                                            </button>
                                        </div>
                                        <div class="card-body">
                                            <table class="table table-bordered table-striped mt-3" id="uploadedExcelAssetsTable">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th>#</th>
                                                        <th>Document Name</th>
                                                        <th>Uploaded On</th>
                                                        <th>Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <!-- Dynamic rows will be inserted here -->
                                                </tbody>
                                            </table>

                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Manual Entry Table -->
                            <!-- Redesigned Manual Entry Section with Tabbed Layout -->
                            <div class="manual-entry-container p-4 bg-white shadow rounded" id="manualTableSection">
                                <!-- ✅ Success message block -->
                                @if (TempData["SuccessMessage"] != null)
                                {
                                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                                        @TempData["SuccessMessage"]
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                }

                                <div class="alert alert-info mt-2" role="alert">
                                    <strong>Note:</strong> Upload all relevant supporting documents (e.g., Deeds for Land, Vehicle Reports, Share Balances, etc. so we can complete the details on your behalf.
                                </div>
                                <!-- Tab Buttons -->
                                <div class="d-flex gap-2 mb-4" id="manualTabs">
                                    <button type="button" class="btn btn-outline-primary active" id="tabLocal"
                                            onclick="toggleManualTab('local')">
                                        A. Local Assests
                                    </button>
                                    <button type="button" class="btn btn-outline-primary" id="tabForeign"
                                            onclick="toggleManualTab('foreign')">
                                        B. Foreign Assests
                                    </button>
                                </div>

                                <!-- Tab Content: Local -->
                                <form id="assetForm" enctype="multipart/form-data">
                                    <div id="manualLocalTab" class="tab-pane fade show active" style="display: block;">
                                        <div class="table-responsive">
                                            <table class="table table-bordered align-middle">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th style="width: 50px; background-color: #4aadfd;color: #fff !important;">#</th>
                                                        <th style="background-color: #4aadfd; color: #fff !important">Asset Category</th>
                                                        <th style="width: 35%;background-color: #4aadfd; color: #fff !important">Value / Notes</th>
                                                        <th style="width: 25%;background-color: #4aadfd; color: #fff !important">Upload</th>
                                                        <th style="width: 5%;background-color: #4aadfd; color: #fff !important">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr class="table-light align-middle">
                                                        <td class="text-center" style="width: 40px;">1</td>
                                                        <td style="min-width: 220px; font-weight: normal;">
                                                            Deed of land, building, apartment
                                                            <input type="hidden" class="AssetCategory" value="Deed of land, building, apartment" />
                                                        </td>
                                                        <td style="min-width: 280px;">
                                                            <div id="notesContainer-0">
                                                                <input type="text"
                                                                       name="assets[0].Description"
                                                                       class="form-control form-control-sm mb-2"
                                                                       placeholder="Enter value or notes"
                                                                       aria-label="Enter value or notes for asset 1" />
                                                            </div>
                                                        </td>
                                                        <td style="min-width: 220px;">
                                                            <div class="file-upload-wrapper">
                                                                <div class="file-input-group mb-2">
                                                                    <input type="file"
                                                                           name="assets[0].Files"
                                                                           class="form-control form-control-sm"
                                                                           aria-label="Upload file for asset 1" />
                                                                </div>
                                                            </div> <!-- Closing div was missing -->
                                                        </td>
                                                        <td class="text-center" style="width: 110px; vertical-align: middle;">
                                                            <button type="button"
                                                                    class="btn btn-sm btn-success px-3"
                                                                    style="padding-top: 0.375rem; padding-bottom: 0.375rem; line-height: 1.25; min-height: 32px;"
                                                                    onclick="uploadAsset(0,1)"
                                                                    aria-label="Upload asset 1"
                                                                    title="Upload">
                                                                <i class="bi bi-cloud-upload-fill me-1"></i> Upload
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>2</td>
                                                        <td>Movable Properties (Motor Vehicles) <input type="hidden" class="AssetCategory" value="Movable Properties (Motor Vehicles)" /</td>
                                                        <td>
                                                            <div id="vehicleNoteContainer-1">
                                                                <div class="vehicle-note-group mb-2 d-flex gap-2">
                                                                    <select class="form-select" name="assets[1].vehicleTypes">
                                                                        <option value="">Select Vehicle Type</option>
                                                                        <option>Motor Car</option>
                                                                        <option>Van</option>
                                                                        <option>Bike</option>
                                                                        <option>Other</option>
                                                                    </select>
                                                                    <input type="text" name="assets[1].Description" class="form-control" placeholder="Value / Description" />
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="file-upload-wrapper">
                                                                <div class="file-input-group mb-2">
                                                                    <input type="file" name="assets[1].Files" class="form-control" />
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="text-center" style="width: 110px; vertical-align: middle;">
                                                            <button type="button"
                                                                    class="btn btn-sm btn-success px-3"
                                                                    style="padding-top: 0.375rem; padding-bottom: 0.375rem; line-height: 1.25; min-height: 32px;"
                                                                    onclick="uploadAsset(1,1)"
                                                                    aria-label="Upload asset 2"
                                                                    title="Upload">
                                                                <i class="bi bi-cloud-upload-fill me-1"></i> Upload
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <tr class="table-light align-middle">
                                                        <td>3</td>
                                                        <td>Shares/Stocks/Securities as at 31.03.2025 <input type="hidden" class="AssetCategory" value="Shares/Stocks/Securities" /></td>

                                                        <td>
                                                            <div id="institutionTypeNoteContainer-2">
                                                                <div class="institution-note-group mb-2 d-flex gap-2">
                                                                    <select class="form-select mb-2" name="assets[2].InstitutionType">
                                                                        <option value="">Select Institution</option>
                                                                        <option>Share balances on the Sri Lanka Stock Exchange</option>
                                                                        <option>Investments in Treasury bills</option>
                                                                        <option>Investments in Treasury bonds</option>
                                                                        <option>Foreign investments</option>
                                                                        <option>Any other investments</option>
                                                                    </select>
                                                                    <input type="text" name="assets[2].Description" class="form-control" placeholder="Value / Description" />
                                                                </div>
                                                            </div>
                                                        </td>

                                                        <td>
                                                            <div class="file-upload-wrapper">
                                                                <div class="file-input-group mb-2">
                                                                    <input type="file" name="assets[2].Files" class="form-control" />
                                                                </div>
                                                        </td>
                                                        <td class="text-center" style="width: 110px; vertical-align: middle;">
                                                            <button type="button"
                                                                    class="btn btn-sm btn-success px-3"
                                                                    style="padding-top: 0.375rem; padding-bottom: 0.375rem; line-height: 1.25; min-height: 32px;"
                                                                    onclick="uploadAsset(2,1)"
                                                                    aria-label="Upload asset 3"
                                                                    title="Upload">
                                                                <i class="bi bi-cloud-upload-fill me-1"></i> Upload
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>4</td>
                                                        <td>Business Current and Capital Accounts (Form 15, Partnership Accounts) <input type="hidden" class="AssetCategory" value="Business Current and Capital Accounts" /></td>
                                                        <td>
                                                            <div id="notesContainer-3">
                                                                <input type="text" name="assets[3].Description" class="form-control mb-2" placeholder="Enter value or notes" />
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="file-upload-wrapper">
                                                                <div class="file-input-group mb-2">
                                                                    <input type="file" name="assets[3].Files" class="form-control" />
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="text-center" style="width: 110px; vertical-align: middle;">
                                                            <button type="button"
                                                                    class="btn btn-sm btn-success px-3"
                                                                    style="padding-top: 0.375rem; padding-bottom: 0.375rem; line-height: 1.25; min-height: 32px;"
                                                                    onclick="uploadAsset(3,1)"
                                                                    aria-label="Upload asset 4"
                                                                    title="Upload">
                                                                <i class="bi bi-cloud-upload-fill me-1"></i> Upload
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <tr class="table-light align-middle">
                                                        <td>5</td>
                                                        <td>
                                                            Any other assets acquired or gifts received during the year<br />Please provide if you have received any gifts from spouse or children acquition of Assets
                                                            <input type="hidden" class="AssetCategory" value="Any other assets acquired or gifts received" />
                                                        </td>
                                                        <td>
                                                            <div id="notesContainer-4">
                                                                <input type="text" name="assets[4].Description" class="form-control mb-2" placeholder="Enter value or notes" />
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="file-upload-wrapper">
                                                                <div class="file-input-group mb-2">
                                                                    <input type="file" name="assets[4].Files" class="form-control" />
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="text-center" style="width: 110px; vertical-align: middle;">
                                                            <button type="button"
                                                                    class="btn btn-sm btn-success px-3"
                                                                    style="padding-top: 0.375rem; padding-bottom: 0.375rem; line-height: 1.25; min-height: 32px;"
                                                                    onclick="uploadAsset(4,1)"
                                                                    aria-label="Upload asset 5"
                                                                    title="Upload">
                                                                <i class="bi bi-cloud-upload-fill me-1"></i> Upload
                                                            </button>
                                                        </td>
                                                    </tr>

                                                </tbody>
                                            </table>
                                        </div>
                                    </div>

                                    <!-- Tab Content: Foreign -->
                                    <div id="manualForeignTab" class="tab-pane fade" style="display: none;">
                                        <div class="table-responsive">
                                            <table class="table table-bordered align-middle">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th style="width: 50px;background-color: #4aadfd; color: #fff !important">#</th>
                                                        <th style="background-color: #4aadfd; color: #fff !important">Asset Category</th>
                                                        <th style="width: 35%;background-color: #4aadfd; color: #fff !important">Value / Notes</th>
                                                        <th style="width: 25%;background-color: #4aadfd; color: #fff !important">Upload</th>
                                                        <th style="width: 5%;background-color: #4aadfd; color: #fff !important">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr class="table-light">
                                                        <td>1</td>
                                                        <td>Deed of land, building, apartment <input type="hidden" class="AssetCategory" value="Deed of land, building, apartment" /></td>
                                                        <td>
                                                            <div id="notesContainer-5">
                                                                <input type="text" name="assets[5].Description" class="form-control mb-2" placeholder="Enter value or notes" />
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="file-upload-wrapper">
                                                                <div class="file-input-group mb-2">
                                                                    <input type="file" name="assets[5].Files" class="form-control" />
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="text-center" style="width: 110px; vertical-align: middle;">
                                                            <button type="button"
                                                                    class="btn btn-sm btn-success px-3"
                                                                    style="padding-top: 0.375rem; padding-bottom: 0.375rem; line-height: 1.25; min-height: 32px;"
                                                                    onclick="uploadAsset(5,2)"
                                                                    aria-label="Upload asset 1"
                                                                    title="Upload">
                                                                <i class="bi bi-cloud-upload-fill me-1"></i> Upload
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>2</td>
                                                        <td>Movable Properties (Motor Vehicles) <input type="hidden" class="AssetCategory" value="Movable Properties (Motor Vehicles)" /></td>
                                                        <td>
                                                            <div id="vehicleNoteContainer-6">
                                                                <div class="vehicle-note-group mb-2 d-flex gap-2">
                                                                    <select class="form-select" name="assets[6].vehicleTypes">
                                                                        <option value="">Select Vehicle Type</option>
                                                                        <option>Motor Car</option>
                                                                        <option>Van</option>
                                                                        <option>Bike</option>
                                                                        <option>Other</option>
                                                                    </select>
                                                                    <input type="text" name="assets[6].Description" class="form-control" placeholder="Value / Description" />
                                                                </div>
                                                            </div>
                                                        </td>

                                                        <td>
                                                            <div class="file-upload-wrapper">
                                                                <div class="file-input-group mb-2">
                                                                    <input type="file" name="assets[6].Files" class="form-control" />
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="text-center" style="width: 110px; vertical-align: middle;">
                                                            <button type="button"
                                                                    class="btn btn-sm btn-success px-3"
                                                                    style="padding-top: 0.375rem; padding-bottom: 0.375rem; line-height: 1.25; min-height: 32px;"
                                                                    onclick="uploadAsset(6,2)"
                                                                    aria-label="Upload asset 2"
                                                                    title="Upload">
                                                                <i class="bi bi-cloud-upload-fill me-1"></i> Upload
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <tr class="table-light">
                                                        <td>3</td>
                                                        <td>Shares/Stocks/Securities as at 31.03.2025 <input type="hidden" class="AssetCategory" value="Shares/Stocks/Securities" /></td>
                                                        <td>
                                                            <div id="institutionTypeNoteContainer-7">
                                                                <div class="institution-note-group mb-2 d-flex gap-2">
                                                                    <select class="form-select mb-2" name="assets[7].InstitutionType">
                                                                        <option value="">Select Institution</option>
                                                                        <option>Share balances on the Sri Lanka Stock Exchange</option>
                                                                        <option>Investments in Treasury bills</option>
                                                                        <option>Investments in Treasury bonds</option>
                                                                        <option>Foreign investments</option>
                                                                        <option>Any other investments</option>
                                                                    </select>
                                                                    <input type="text" name="assets[7].Description" class="form-control" placeholder="Value / Description" />
                                                                </div>
                                                            </div>

                                                        </td>
                                                        <td>
                                                            <div class="file-upload-wrapper">
                                                                <div class="file-input-group mb-2">
                                                                    <input type="file" name="assets[7].Files" class="form-control" />
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="text-center" style="width: 110px; vertical-align: middle;">
                                                            <button type="button"
                                                                    class="btn btn-sm btn-success px-3"
                                                                    style="padding-top: 0.375rem; padding-bottom: 0.375rem; line-height: 1.25; min-height: 32px;"
                                                                    onclick="uploadAsset(7,2)"
                                                                    aria-label="Upload asset 3"
                                                                    title="Upload">
                                                                <i class="bi bi-cloud-upload-fill me-1"></i> Upload
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>4</td>
                                                        <td>Business Current and Capital Accounts (Form 15, Partnership Accounts) <input type="hidden" class="AssetCategory" value="Business Current and Capital Accounts" /></td>
                                                        <td>
                                                            <div id="notesContainer-8">
                                                                <input type="text" name="assets[8].Description" class="form-control mb-2" placeholder="Enter value or notes" />
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="file-upload-wrapper">
                                                                <div class="file-input-group mb-2">
                                                                    <input type="file" name="assets[8].Files" class="form-control" />
                                                                </div>

                                                            </div>
                                                        </td>
                                                        <td class="text-center" style="width: 110px; vertical-align: middle;">
                                                            <button type="button"
                                                                    class="btn btn-sm btn-success px-3"
                                                                    style="padding-top: 0.375rem; padding-bottom: 0.375rem; line-height: 1.25; min-height: 32px;"
                                                                    onclick="uploadAsset(8,2)"
                                                                    aria-label="Upload asset 4"
                                                                    title="Upload">
                                                                <i class="bi bi-cloud-upload-fill me-1"></i> Upload
                                                            </button>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>

                                    <!-- Submit Button -->
                                    @* <div class="text-end mt-4">
                                        <button type="button" class="btn btn-success px-4 submit-btn" onclick="submitLocalAssets();">Upload</button>
                                </div> *@
                                </form>
                                <div class="card my-4">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Uploaded Files Summary</h5>
                                        <button class="btn btn-sm btn-outline-primary" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#uploadedFilesCollapse"
                                                aria-expanded="false" aria-controls="uploadedFilesCollapse">
                                            <i class="bi bi-chevron-down" id="toggleIcon"></i>
                                        </button>
                                    </div>
                                    <div class="collapse" id="uploadedFilesCollapse">
                                        <div class="card-body">
                                            <table class="table table-bordered table-striped mt-3" id="uploadedAssetsTable">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th>#</th>
                                                        <th>Category</th>
                                                        <th>Asset Type</th>
                                                        <th>Asset Note/Value</th>
                                                        <th>File Name</th>
                                                        <th>Uploaded On</th>
                                                        <th>Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <!-- Dynamic rows will be inserted here -->
                                                </tbody>
                                            </table>

                                        </div>
                                    </div>
                                </div>
                            </div>


                        </div>
                        <div class="d-flex justify-content-between">
                            <div class="col-lg-6 col-md-6 btn-prv">
                                <!-- Previous Button -->
                                <button class="btn btn-primary btn-lg" id="btnBankPrevious">
                                    Previous
                                </button>
                            </div>
                            <div class="col-lg-6 col-md-6 right next-btn">
                                <button class="btn btn-primary btn-lg" id="btnOtherNext">
                                    Next
                                </button>
                            </div>
                        </div>

                    </div>

                </div>
                <div id="other-section" class="content-panel p-4 bg-light rounded shadow-sm" style="display: none;">
                    <h4><i class="fas fa-folder me-2 text-primary"></i> Tax payment slips and other documents</h4>

                    <!-- Tabs Nav -->
                    <ul class="nav nav-tabs" id="taxTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="tax-slips-tab" data-bs-toggle="tab" data-bs-target="#tax-slips" type="button" role="tab">
                                <i class="fas fa-file-upload me-1"></i> Tax Payment Slips
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="income-expenses-tab" data-bs-toggle="tab" data-bs-target="#income-expenses" type="button" role="tab">
                                <i class="fas fa-wallet me-1"></i> Income Tax Payment & Expenses
                            </button>
                        </li>
                    </ul>

                    <!-- Tabs Content -->
                    <div class="tab-content mt-3" id="taxTabsContent">

                        <!-- TAB 1: Tax Payment Slips -->
                        <div class="tab-pane fade show active" id="tax-slips" role="tabpanel">
                            <div id="other-form" class="upload-form-section">
                                <input type="hidden" name="CategoryName" value="T10" />
                                <div class="alert alert-info mt-2">
                                    <strong>Note:</strong> Please upload all available tax payment slips here. If you have any additional documents that should be considered for your tax computation, kindly upload them as well.
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Name of the Document</label>
                                    <input type="text" class="form-control" name="docName" id="otherDocName" />
                                </div>

                                <form method="post" enctype="multipart/form-data">
                                    <div class="mb-3">
                                        <label>Upload File</label>
                                        <input type="file" id="fileInputOther" name="UploadedFile" class="form-control" />
                                    </div>
                                    
                                    <div class="d-flex justify-content-end">
                                        <button type="button" class="btn btn-primary submit-btn" id="submitOtherBtn">
                                            <i class="fas fa-save me-1"></i>Upload
                                        </button>
                                    </div>
                                </form>

                                <div id="uploadedOtherDocs" class="mt-5" style="display: none;">
                                    <h5 class="mb-3" id="categoryHeading">
                                        <span class="text-muted">Your Uploaded</span>
                                        <span class="badge bg-primary">Other Documents</span>
                                        <span class="text-muted">Documents for 2024/2025</span>
                                    </h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered table-striped mt-2">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>#</th>
                                                    <th>Document Name</th>
                                                    <th>Category</th>
                                                    <th>Employer Name/Any Other Type</th>
                                                    <th>Uploaded On</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="documentsTableOtherBody"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- TAB 2: Income Tax Payment and Expenses -->
                        <div class="tab-pane fade" id="income-expenses" role="tabpanel">
                            <div class="alert alert-info mt-3">
                                <i class="fas fa-info-circle me-2"></i>
                                Please provide the following information for the year <strong>01.04.2024 to 31.03.2025</strong>.
                            </div>

                            <!-- Assets Section -->
                            <div class="p-4 border rounded bg-light shadow-sm mb-4">
                                <h6 class="mb-4 text-primary"><i class="fas fa-boxes me-2"></i> Income Tax Payment Details as at 31.03.2025</h6>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Cash in hand</label>
                                        <input type="text" class="form-control numeric-input" name="CashInHand" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Loans given / Receivables</label>
                                        <input type="text" class="form-control numeric-input" name="LoansGiven" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Value of Gold, Silver, Gems, Jewellery</label>
                                        <input type="text" class="form-control numeric-input" name="JewelleryValue" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Disposal of assets</label>
                                        <input type="text" class="form-control numeric-input" name="AssetDisposals" />
                                    </div>
                                </div>
                            </div>

                            <!-- Expenses Section -->
                            <div class="p-4 border rounded bg-light shadow-sm mb-4">
                                <h6 class="mb-4 text-primary"><i class="fas fa-wallet me-2"></i> Expenses Details</h6>
                                <div class="row g-3">
                                    <div class="col-md-6"><label class="form-label">Living Expenses</label><input type="text" class="form-control numeric-input" name="LivingExpenses" /></div>
                                    <div class="col-md-6"><label class="form-label">EPF 8%</label><input type="text" class="form-control numeric-input" name="EPF8Percent" /></div>
                                    <div class="col-md-6"><label class="form-label">Fixed Salary Deductions</label><input type="text" class="form-control numeric-input" name="FixedDeductions" /></div>
                                    <div class="col-md-6"><label class="form-label">Children Education Expenses</label><input type="text" class="form-control numeric-input" name="ChildrenEducation" /></div>
                                    <div class="col-md-6"><label class="form-label">Vehicle Expenses</label><input type="text" class="form-control numeric-input" name="VehicleExpenses" /></div>
                                    <div class="col-md-6"><label class="form-label">Medical Expenses</label><input type="text" class="form-control numeric-input" name="MedicalExpenses" /></div>
                                    <div class="col-md-6"><label class="form-label">Loan Re-Payments</label><input type="text" class="form-control numeric-input" name="LoanRepayments" /></div>
                                    <div class="col-md-6"><label class="form-label">Credit Card Payments</label><input type="text" class="form-control numeric-input" name="CreditCardPayments" /></div>
                                    <div class="col-md-6"><label class="form-label">House Rent</label><input type="text" class="form-control numeric-input" name="HouseRent" /></div>
                                    <div class="col-md-6"><label class="form-label">Donation</label><input type="text" class="form-control numeric-input" name="Donations" /></div>
                                    <div class="col-md-6"><label class="form-label">Life/Medical Insurance Premium</label><input type="text" class="form-control numeric-input" name="InsurancePremium" /></div>
                                    <div class="col-md-6"><label class="form-label">Any Other Expenses</label><input type="text" class="form-control numeric-input" name="OtherExpenses" /></div>
                                </div>
                            </div>

                            <div class="mt-4 d-flex justify-content-end">
                                <button type="button" class="btn btn-success" id="saveFinancialDetailsBtn">
                                    <i class="fas fa-check-circle me-1"></i> Save
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between">
                        <div class="col-lg-6 col-md-6 btn-prv">
                            <!-- Previous Button -->
                            <button class="btn btn-primary btn-lg" id="btnAssetsPrevious">
                                Previous
                            </button>
                        </div>
                        <div class="col-lg-6 col-md-6 right next-btn">
                            <button class="btn btn-primary btn-lg" id="btnDeclareNext">
                                Next
                            </button>
                        </div>
                    </div>


                </div>


                <div id="declaration-section" class="content-panel p-4 bg-light rounded shadow-sm" style="display: none;">
                    <h4 class="mb-3">Declaration of the Tax Payer</h4>

                    <div class="border rounded p-3 bg-light">
                        <p>
                            I declare to the best of my knowledge and belief that all particulars furnished in the Return of Income are
                            true, correct, and complete. I am aware that making an incorrect, false, or misleading statement is an offence.
                        </p>
                        <div class="alert alert-info d-flex align-items-center mt-3" role="alert" style="font-size: 0.95rem;">
                            <i class="bi bi-info-circle-fill me-2"></i>
                            <div>
                                <strong>Note:</strong> All documents uploaded in previous sections (such as <em>Asset Declaration</em>, <em>Bank Confirmation</em>, etc.) will be listed below for your final review before submission.
                            </div>
                        </div>
                        <div id="uploadedDeclarationDocs" style="display: block;">
                            <h5 class="mb-3">Uploaded Documents for Declaration</h5>
                            <table class="table table-bordered table-striped mt-2" id="declarationDocsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>#</th>
                                        <th>Category</th>
                                        <th>Assest Category</th>
                                        <th>Uploaded On</th>

                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Rows will be inserted dynamically -->
                                </tbody>
                            </table>
                            <h5 class="mb-3">Other Tax Payment Details</h5>
                            <table id="otherTaxPaymentsTable" class="table table-bordered table-striped mt-2">
                                <thead class="table-light">
                                    <tr>
                                        <th>#</th>
                                        <th>Name</th>
                                        <th>Value</th>
                                        <th>Uploaded On</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>

                        <div class="form-check my-3">
                            <input class="form-check-input no-print" type="checkbox" id="acceptDeclaration">
                            <label class="form-check-label no-print" for="acceptDeclaration">
                                I accept the above declaration.
                            </label>
                        </div>

                        <div class="mt-4 d-flex justify-content-end">
                            <button type="button" class="btn btn-primary no-print" id="submitDeclarationBtn" disabled>
                                Accept and Submit
                            </button>
                            <button type="button" class="btn btn-secondary ms-2 no-print" id="printDeclarationBtn" disabled>
                                🖨️ Print Declaration
                            </button>
                        </div>

                        
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="col-lg-6 col-md-6 btn-prv">
                            <!-- Previous Button -->
                            <button class="btn btn-primary btn-lg" id="btnOtherPrevious">
                                Previous
                            </button>
                        </div>

                    </div>


                </div>

            </main>
            <!-- Modal Alert Popup -->
            <div id="enhancedModal" class="enhanced-modal" style="display:none;">
                <div class="enhanced-modal-content">
                    <span id="enhancedModalClose" class="enhanced-close">&times;</span>
                    <p id="enhancedModalMessage"></p>
                </div>
            </div>

            <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header bg-warning">
                            <h5 class="modal-title">Warning</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            Your uploaded documents will be deleted. Are you sure?
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" id="confirmDeleteDocsBtn">Yes</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                        </div>
                    </div>
                </div>
            </div>
          
            <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header bg-danger text-white">
                            <h5 class="modal-title" id="confirmDeleteLabel">Confirm Delete</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            Are you sure you want to delete this document?
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button id="confirmDeleteBtn" type="button" class="btn btn-danger">Delete</button>
                        </div>
                    </div>
                </div>
            </div>

            <div id="loadMask" class="load-mask" style="display:none">
                <div class="spinner"></div>
                <div class="load-text">Uploading, please wait...</div>
            </div>
            <input type="hidden" id="docUploadStatus" value="@docStatus" />
            <script src="~/scripts/taxassistedselfonline.js?v=6" asp-append-version="true"></script>
            <script>


                     const sidebarLinks = document.querySelectorAll(".sidebar-link");
                     const contentPanels = document.querySelectorAll(".content-panel");
                     const baseApiUrl = "@apiUrl";
                     console.log("Base API URL:", baseApiUrl);
                     const userId = '@userId';

                    let selectedFile = null;
                    let selectedCategoryName = ""; // set this based on button click
                    let allDocs = [];
                    let globalUploadCount = 0;               

                    const fileInput = document.getElementById('fileInput');
                    const submitBtn = document.getElementById('submitBtn');
                    const submitBankBtn = document.getElementById('submitBankBtn');
                    const submitOtherBtn = document.getElementById('submitOtherBtn');

                   const excelRadio = document.getElementById("optionExcel");
                   const manualRadio = document.getElementById("optionManual");
                   const excelSection = document.getElementById("excelSection");
                   const manualSection = document.getElementById("manualSection");

                   const collapse = document.getElementById('uploadedFilesCollapse');
                   const icon = document.getElementById('toggleIcon');

                   
            

                 function showLoadMask() {
                      //     document.getElementById('loadMask').style.display = 'block';
                    document.getElementById("loadMask").style.display = "flex";
                }

                function hideLoadMask() {
                    document.getElementById("loadMask").style.display = "none";
                }

                   collapse.addEventListener('show.bs.collapse', () => {
                       icon.classList.remove('bi-chevron-down');
                       icon.classList.add('bi-chevron-up');
                   });

                   collapse.addEventListener('hide.bs.collapse', () => {
                       icon.classList.remove('bi-chevron-up');
                       icon.classList.add('bi-chevron-down');
                   });

                
                    const select = document.getElementById('AnyOtherType');
                      const message = document.getElementById('otherTypeAlert');

                    select.addEventListener('change', function() {
                        if (select.value === 'Otherbenefits') {
                            message.style.display = 'block'; // show message
                        } else {
                            message.style.display = 'none'; // hide message
                        }
                    });
           

                   const toggleButton = document.getElementById("financialToggle");
                   const collapseIcon = document.getElementById("collapseIcon");
                   const collapseTarget = document.getElementById("financialDetailsCollapse");

                   // collapseTarget.addEventListener("show.bs.collapse", () => {
                   //     collapseIcon.classList.remove("fa-chevron-down");
                   //     collapseIcon.classList.add("fa-chevron-up");
                   // });

                   // collapseTarget.addEventListener("hide.bs.collapse", () => {
                   //     collapseIcon.classList.remove("fa-chevron-up");
                   //     collapseIcon.classList.add("fa-chevron-down");
                   // });

                 function incrementUploadCount() {
                    globalUploadCount++;
                    $('#globalUploadCount').text(globalUploadCount);
                    
                    if(globalUploadCount > 0)
                    {
                           const payload = {
                                userId: userId,
                                uploadedDocumentStatus: 1
                            };
                                fetch(`${baseApiUrl}api/users/update-document-status`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(payload)
                            })
                            .then(res => res.json())
                            .then(data => {
                                    if(data.success){
                                            // Update status to NEW
                                         const row = document.querySelector('#assessment-row-2024');
                                         // Find the badge by ID
                                        const badgeRow = document.querySelector('#status-badge-2024');
                                           const badge = document.querySelector('#statusBadge');
                                           //const removeBtn = document.getElementById("btnRemoveDraft");
                                              const removeBtn = document.getElementById("btnRemoveDft");
                                        // Update text and classes
                                        if (badge) {
                                          badge.textContent = 'DRAFT';
                                          badge.classList.remove('bg-info');   // remove old status color
                                          badge.classList.add('bg-warning');   // example new color
                                          

                                        }
                                            if (badgeRow) {
                                             badgeRow.textContent = 'DRAFT';
                                             badgeRow.classList.remove('bg-info');   // remove old status color
                                                badgeRow.classList.add('bg-warning');   // example new color
                                             
                                           }

                                           if (removeBtn) {
                                                 removeBtn.style.display = "block";
                                           }
                                           updateProgressHeader(2024, "DRAFT", "bg-warning");

                                      

                                    }
                                    else
                                        alert(data.message);
                            })
                            .catch(err => alert('Error updating status.'));
                }
             }

              function decrementUploadCount() {
                    globalUploadCount--;
                    $('#globalUploadCount').text(globalUploadCount);
                }

                function updateGlobalUploadCount() {
                    if(globalUploadCount == 0)
                    {
                        globalUploadCount = allDocs.length ;
                    }     
                    
                    $('#globalUploadCount').text(globalUploadCount);
                    document.getElementById("fileCountLink").textContent = globalUploadCount + " files";
                }

                   $("#btnRemoveDraft, #btnRemoveDft").click(function () {
                    // Show confirmation modal
                     $("#deleteConfirmationModal").modal("show");
                });


                   $("#confirmDeleteDocsBtn").click(async function () {
                          $("#deleteConfirmationModal").modal("hide");
                          showLoadMask();

                    $("tr[id^='assessment-row-']").each(async function () {
                        const row = $(this);
                        const statusBadge = row.find("span[id^='status-badge-']");
                        const status = statusBadge.text().trim();

                        if (status === "DRAFT") {
                            const assessmentText = row.find("td:nth-child(2)").text().trim();
                            const assessmentYear = assessmentText.split("/")[1]; // e.g., "2025"

                            try {
                                // Delete uploaded documents
                                await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/DeleteAllByUserAndYear?userId=${encodeURIComponent(userId)}&assessmentYear=${encodeURIComponent(assessmentYear)}`, {
                                    method: "DELETE"
                                });

                                // Delete draft data
                                await fetch(`${baseApiUrl}api/UserTaxAssistedOtherAssetsDetails/DeleteDraftOtherTaxByUserAndYear?userId=${encodeURIComponent(userId)}&assessmentYear=${encodeURIComponent(assessmentText)}`, {
                                    method: "DELETE"
                                });

                                  const payload = {
                                         userId: userId,
                                         uploadedDocumentStatus: 0
                                     };
                                        fetch(`${baseApiUrl}api/users/update-document-status`, {
                                         method: 'PUT',
                                          headers: {
                                              'Content-Type': 'application/json'
                                         },
                                         body: JSON.stringify(payload)
                                     })
                                     .then(res => res.json())
                                     .then(data => {
                                           if(data.success){
                                               globalUploadCount = 0;
                                                     // Update status to NEW
                                                     loadUploadedDocs(userId,null);
                                                statusBadge.text("NEW")
                                                .removeClass("bg-warning")
                                                .addClass("bg-info text-dark");
                                                 $("#statusBadge")
                                                    .text("NEW")
                                                    .removeClass("bg-warning")
                                                    .addClass("bg-info text-dark");
                                                   $('#globalUploadCount').text("0");
                                                      updateRemoveBtn();
                                                      updateChecklistStatuses([],0);
                                                         const btnRemoveDft = document.getElementById("btnRemoveDft");
                                                      btnRemoveDft.style.display="none";
                                                         document.getElementById("fileCountLink").textContent = "0 files";
                                                        
                                                               updateProgressHeader(2024, "NEW", "bg-info text-dark");
                                                              
                                                      hideLoadMask();

                                                     
                                           }
                                           else
                                                 alert(data.message);
                                     })
                                      .catch(err => alert('Error updating status.'));
                                      


                               

                                // Uncheck the checkbox
                               // row.find("input[type='checkbox']").prop("checked", false);

                            } catch (err) {
                                console.error(`Failed to delete draft for ${assessmentYear}:`, err);
                                alert(`Failed to delete draft data for ${assessmentYear}`);
                            }
                        }
                    });

                    //modalInstance.hide(); // Close modal after processing
                });

                   function handleExcelFileChange(event) {
                       const fileInput = event.target;
                       const file = fileInput.files[0];
                       const fileNameDisplay = document.getElementById('uploadedFileName');
                       const validationMessage = document.getElementById('fileValidationMessage');
                       const submitBtn = document.getElementById('submitExcelBtn');

                       fileNameDisplay.textContent = "";
                       validationMessage.textContent = "";
                       submitBtn.disabled = true;

                       if (!file) return;

                       const fileName = file.name;
                       const validExtension = /\.xlsx$/i;

                       if (!validExtension.test(fileName)) {
                           validationMessage.textContent = "Invalid file type. Please upload a .xlsx Excel file.";
                           fileInput.value = ""; // Clear file
                       } else {
                           fileNameDisplay.textContent = "Selected file: " + fileName;
                           submitBtn.disabled = false;
                       }
                    }

                    function toggleManualTab(tab) {
                       const localTab = document.getElementById('manualLocalTab');
                       const foreignTab = document.getElementById('manualForeignTab');
                       const btnLocal = document.getElementById('tabLocal');
                       const btnForeign = document.getElementById('tabForeign');

                       btnLocal.classList.remove('active');
                       btnForeign.classList.remove('active');

                      localTab.style.display = 'none';
                      foreignTab.style.display = 'none';

                   if (tab === 'local') {
                       btnLocal.classList.add('active');
                       localTab.style.display = 'block';
                       localTab.classList.add('show', 'active');
                       foreignTab.classList.remove('show', 'active');

                       btnLocal.classList.add('active');
                       btnLocal.classList.remove('btn-outline-primary');
                       btnLocal.classList.add('btn-primary');

                       btnForeign.classList.remove('active');
                       btnForeign.classList.remove('btn-primary');
                       btnForeign.classList.add('btn-outline-primary');
                   } else {
                          btnForeign.classList.add('active');
                          foreignTab.style.display = 'block';
                          foreignTab.classList.add('show', 'active');
                          localTab.classList.remove('show', 'active');

                          btnForeign.classList.add('active');
                          btnForeign.classList.remove('btn-outline-primary');
                          btnForeign.classList.add('btn-primary');

                          btnLocal.classList.remove('active');
                          btnLocal.classList.remove('btn-primary');
                          btnLocal.classList.add('btn-outline-primary');
                   }

                }

                      function addMoreInstitutionTypeNote(index) {
                             const container = document.getElementById(`institutionTypeNoteContainer-${index}`);

                          const wrapper = document.createElement("div");
                             wrapper.className = "institution-note-group mb-2 d-flex gap-2";

                          const select = document.createElement("select");
                          select.className = "form-select";
                             select.name = `assets[${index}].InstitutionType`;
                          select.innerHTML = `
                                          <option value="">Select Institution</option>
                                           <option>Share balances on the Sri Lanka Stock Exchange</option>
                                           <option>Investments in Treasury bills</option>
                                           <option>Investments in Treasury bonds</option>
                                            <option>Foreign investments</option>
                                           <option>Any other investments</option>
                          `;

                          const input = document.createElement("input");
                          input.type = "text";
                          input.name = `assets[${index}].Description`;
                          input.className = "form-control";
                          input.placeholder = "Value / Description";

                          const removeBtn = document.createElement("button");
                          removeBtn.type = "button";
                          removeBtn.className = "btn btn-outline-danger btn-sm";
                          removeBtn.innerHTML = "✖";
                          removeBtn.onclick = function () {
                              removeInstitutionNoteInput(removeBtn);
                          };

                          wrapper.appendChild(select);
                          wrapper.appendChild(input);
                          wrapper.appendChild(removeBtn);
                          container.appendChild(wrapper);
                      }

                         function removeInstitutionNoteInput(button) {
                                          const wrapper = button.closest(".institution-note-group");
                          if (wrapper) wrapper.remove();
                      }

                    function addMoreVehicleNote(index) {
                       const container = document.getElementById(`vehicleNoteContainer-${index}`);

                       const wrapper = document.createElement("div");
                       wrapper.className = "vehicle-note-group mb-2 d-flex gap-2";

                       const select = document.createElement("select");
                       select.className = "form-select";
                       select.name = `assets[${index}].vehicleTypes`;
                       select.innerHTML = `
                           <option value="">Select Vehicle Type</option>
                           <option>Motor Car</option>
                           <option>Van</option>
                           <option>Bike</option>
                           <option>Other</option>
                       `;

                       const input = document.createElement("input");
                       input.type = "text";
                       input.name = `assets[${index}].Description`;
                       input.className = "form-control";
                       input.placeholder = "Value / Description";

                       const removeBtn = document.createElement("button");
                       removeBtn.type = "button";
                       removeBtn.className = "btn btn-outline-danger btn-sm";
                       removeBtn.innerHTML = "✖";
                       removeBtn.onclick = function () {
                           removeVehicleNoteInput(removeBtn);
                       };

                       wrapper.appendChild(select);
                       wrapper.appendChild(input);
                       wrapper.appendChild(removeBtn);
                       container.appendChild(wrapper);
                   }

                   function removeVehicleNoteInput(button) {
                       const wrapper = button.closest(".vehicle-note-group");
                       if (wrapper) wrapper.remove();
                   }

                   function addMoreNotes(index) {
                      const container = document.getElementById(`notesContainer-${index}`);

                       const wrapper = document.createElement("div");
                       wrapper.className = "note-input-group mb-2 d-flex gap-2";

                       const input = document.createElement("input");
                       input.type = "text";
                       input.name = `assets[${index}].Description`;
                       input.className = "form-control";
                       input.placeholder = "Enter value or notes";

                       const removeBtn = document.createElement("button");
                       removeBtn.type = "button";
                       removeBtn.className = "btn btn-outline-danger btn-sm";
                       removeBtn.innerHTML = "✖";
                       removeBtn.onclick = function () {
                           removeNoteInput(removeBtn);
                       };

                       wrapper.appendChild(input);
                       wrapper.appendChild(removeBtn);
                       container.appendChild(wrapper);
                   }

                   function removeNoteInput(button) {
                       const wrapper = button.closest(".note-input-group");
                       if (wrapper) wrapper.remove();
                   }

                   function addMoreFiles(rowId) {
                       const container = document.getElementById(`extraFileInputs-${rowId}`);
                       const fileInput = document.createElement("div");
                       fileInput.classList.add("file-input-group", "mb-2");
                       fileInput.innerHTML = `
                           <div class="d-flex">
                                        <input type="file" name="assets[${rowId}].Files" class="form-control me-2" />
                               <button type="button" class="btn btn-outline-danger btn-sm" onclick="this.parentElement.parentElement.remove()">
                                   ✖
                               </button>
                           </div>`;
                       container.appendChild(fileInput);
                   }

                   function submitLocalAssets() {

                       const isLocal = document.getElementById('tabLocal').classList.contains('active');
                       const formData = new FormData();
                       let assetIndex = 0;

                          function processRows(containerSelector, isLocal) {
                                let type = isLocal ? 1 :2;
                                 const rows = $(`${containerSelector} table tbody tr`);

                             rows.each(function (index) {
                                 const row = $(this);
                                 formData.append(`assets[${assetIndex}].UserId`, userId);
                                    formData.append(`assets[${assetIndex}].AssestType`, type);
                                 const assetCategory = row.find('input.AssetCategory[type="hidden"]').val();
                                    formData.append(`assets[${assetIndex}].AssetCategory`, assetCategory);
                                 // Description
                                 //const description = row.find('input[type="text"], select').first().val() || '';
                                   // formData.append(`assets[${assetIndex}].AssetNote`, description);

                                 // Vehicle Type (optional)
                                  // const vehicleType = row.find(`select[name="assets[${assetIndex}].vehicleTypes"]`).val();
                                 //if (vehicleType)
                                    //       formData.append(`assets[${assetIndex}].AssetVehicleType`, vehicleType);

                                    row.find(`select[name="assets[${assetIndex}].vehicleTypes"]`).each(function (typeIndex) {
                                       const typeVal = $(this).val();
                                       if (typeVal && typeVal.trim() !== "") {
                                              formData.append(`assets[${assetIndex}].AssetVehicleTypes[${typeIndex}]`, typeVal);
                                       }
                                   });

                                   //const assestInstitution = row.find(`select[name="assets[${assetIndex}].InstitutionType"]`).val();
                                 //  if (assestInstitution)
                                           //     formData.append(`assets[${assetIndex}].AssetInstitution`, assestInstitution);
                                      row.find(`select[name="assets[${assetIndex}].InstitutionType"]`).each(function (typeIndex) {
                                       const typeVal = $(this).val();
                                       if (typeVal && typeVal.trim() !== "") {
                                                  formData.append(`assets[${assetIndex}].AssetInstitutions[${typeIndex}]`, typeVal);
                                       }
                                    });


                                    // Files
                                 row.find('input[type="file"]').each(function () {
                                     const input = this;
                                     if (input.files && input.files.length > 0) {
                                         for (let i = 0; i < input.files.length; i++) {
                                                formData.append(`assets[${assetIndex}].Files`, input.files[i]);
                                         }
                                     }
                                 });
                               //     row.find('input[name^="assets["][name$=".Description"]').each(function (noteIndex) {
                               //     formData.append(`assets[${assetIndex}].AssetNotes[${noteIndex}]`, $(this).val());
                               // });

                                   row.find(`input[name="assets[${assetIndex}].Description"]`).each(function (noteIndex) {
                                       const noteVal = $(this).val();
                                       if (noteVal && noteVal.trim() !== "") {
                                           formData.append(`assets[${assetIndex}].AssetNotes[${noteIndex}]`, noteVal);
                                       }
                                   });

                                    assetIndex++;
                             });

                         }

                          processRows('#manualLocalTab', true);  // Local assets
                          processRows('#manualForeignTab', false); // Foreign assets

                       $.ajax({
                                    url: `${baseApiUrl}api/UserUploadTaxAssistedDoc/SubmitAssets`, // Adjust path if needed
                           type: 'POST',
                           data: formData,
                           contentType: false,
                           processData: false,
                           success: function (response) {
                               showMessage("Assets saved successfully!", "success");
                               //alert("Assets saved successfully!");
                               loadAssestsUploadedFiles(userId);
                           },
                           error: function (xhr) {
                               alert("Error saving assets.");
                               console.log(xhr.responseText);
                           }
                       });
                   }

                    document.getElementById('saveFinancialDetailsBtn').addEventListener('click', async () => {
                        const container = document.getElementById('income-expenses');
                     const dataArray = [];

                     container.querySelectorAll('input').forEach(input => {
                       const parentDiv = input.closest('.col-md-6');
                       if (parentDiv) {
                         const label = parentDiv.querySelector('label.form-label');
                         if (label) {
                              const value = input.value.trim();
                               if (value !== "") {  // only add if not empty
                                 dataArray.push({
                                   Category: label.innerText.trim(),
                                   Value: value
                                 });
                               }
                         }
                       }
                     });

                     // Add any other info you want, e.g., userId, assessmentYear
                     const payload = {
                       UserId: userId, // dynamically set
                       AssessmentYear: '2024/2025',
                       Details: dataArray
                     };

                     try {
                             const response = await fetch(`${baseApiUrl}api/UserTaxAssistedOtherAssetsDetails/SaveUserOtherTaxDetails`, {
                         method: 'POST',
                         headers: { 'Content-Type': 'application/json' },
                         body: JSON.stringify(payload),
                       });

                       if (!response.ok) {
                         const err = await response.text();
                         alert('Error: ' + err);
                         return;
                       }

                          showMessage("Data saved successfully!", "success");
                     } catch (err) {
                       alert('Failed to submit: ' + err.message);
                     }
                   });

                      async function loadFinancialDetails(userId, assessmentYear) {
                     try {
                          const url = `${baseApiUrl}api/UserTaxAssistedOtherAssetsDetails/GetUserOtherTaxDetails?userId=${encodeURIComponent(userId)}&assessmentYear=${encodeURIComponent(assessmentYear)}`;
                          const response = await fetch(url);

                            //  if (!response.ok) {
                            //     alert('Failed to load data');
                            //     return;
                            // }
                       const data = await response.json();

                      if (data && data.details && data.details.length > 0) {
                        document.getElementById('saveFinancialDetailsBtn').innerText = "Update"; // change to update
                   } else {
                        document.getElementById('saveFinancialDetailsBtn').innerText = "Save";
                   }

                   const docStatus = document.getElementById("docUploadStatus")?.value;

                   if(docStatus === "2")
                   {
                       document.getElementById('saveFinancialDetailsBtn').disabled = true;
                   }

                       // Clear all inputs first
                        document.querySelectorAll('#income-expenses .col-md-6 input').forEach(input => {
                            input.value = '';      // clear old values
                            input.disabled = false; // re-enable unless docStatus disables again later
                        });

                       // Populate inputs by matching label text with category
                       data.details.forEach(detail => {
                               document.querySelectorAll('#income-expenses .col-md-6').forEach(div => {
                           const label = div.querySelector('label.form-label');
                           const input = div.querySelector('input');
                           if (label && input && label.innerText.trim() === detail.category) {
                            // input.value = detail.value;
                                if (!isNaN(detail.value)) {
                                    input.value = Number(detail.value).toLocaleString('en-US');
                                } else {
                                    input.value = detail.value; // fallback if not a number
                                }

                             if (docStatus === "2") {
                                 input.disabled = true;
                             }
                           }
                           else
                           {
                               if (docStatus === "2") {
                                 input.disabled = true;
                             }
                           }

                         });
                       });
                     } catch (err) {
                       alert('Error loading data: ' + err.message);
                     }
                   }


                    function uploadAsset(index, assetType) {
                     // Get the note input
                     showLoadMask();
                     const noteInput = $(`input[name="assets[${index}].Description"]`);
                     const note = noteInput.val().trim();

                     // Get the file input
                     const fileInput = $(`input[name="assets[${index}].Files"]`)[0];
                     const file = fileInput.files[0];

                   // Vehicle Type (optional)
                     const vehicleType =$(`select[name="assets[${index}].vehicleTypes"]`).val();
                     const assestInstitution = $(`select[name="assets[${index}].InstitutionType"]`).val();
                    const vehicleTypeSelect = $(`select[name="assets[${index}].vehicleTypes"]`);
                   const institutionSelect = $(`select[name="assets[${index}].InstitutionType"]`);

                     // Basic validation
                     // if (!note) {
                     //   alert("Please enter a note or value.");
                     //   noteInput.focus();
                     //   return;
                     // }
                     // if (!file) {
                     //   alert("Please select a file to upload.");
                     //   fileInput.focus();
                     //   return;
                     // }

                     // Prepare form data for AJAX
                     const formData = new FormData();
                    // formData.append(`assets[${index}].AssetNote`, note);
                     formData.append(`AssetNote`, note);
                     formData.append(`Files`, file);
                     formData.append(`AssetCategory`, $(".AssetCategory").eq(index).val()); // category hidden input
                     formData.append(`UserId`, userId);
                        formData.append(`AssestType`, assetType);
                     if (vehicleType)
                          formData.append(`AssetVehicleType`, vehicleType);
                      if (assestInstitution)
                             formData.append(`AssetInstitution`, assestInstitution);
                     // Disable button to prevent multiple clicks
                     const btn = $(`button[onclick='uploadAsset(${index})']`);
                     btn.prop("disabled", true).text("Uploading...");

                     // AJAX upload call (adjust URL to your API endpoint)
                        $.ajax({
                                  url:`${baseApiUrl}api/UserUploadTaxAssistedDoc/SubmitAssets`,
                                          //url:`https://localhost:7119/api/UserUploadTaxAssistedDoc/SubmitAssets`,
                          type: "POST",
                       data: formData,
                       processData: false,
                       contentType: false,
                       success: function (response) {
                            showMessage("Assets saved successfully!", "success");
                              incrementUploadCount();
                                  //alert("Assets saved successfully!");
                           loadAssestsUploadedFiles(userId);
                         // Clear inputs or update UI as needed
                         noteInput.val("");
                         fileInput.value = "";
                               vehicleTypeSelect.prop('selectedIndex', 0); // Reset vehicle type dropdown
                              institutionSelect.prop('selectedIndex', 0); // Reset institution dropdown
                       },
                       error: function (xhr, status, error) {
                         alert("Upload failed: " + error);
                       },
                       complete: function () {
                              
                           hideLoadMask();
                              
                         btn.prop("disabled", false).html('<i class="bi bi-cloud-upload-fill me-1"></i> Upload');
                       },
                     });
                   }


                   document.getElementById("fileInput").addEventListener("change", function () {
                             if (this.files.length > 0) {
                            selectedFile = this.files[0];
                            
                        }
                    });
                    document.getElementById("fileInputTerminal").addEventListener("change", function () {
                              if (this.files.length > 0) {
                               selectedFile = this.files[0];
                                
                           }
                       });
                     document.getElementById("fileInputAnyOther").addEventListener("change", function () {
                              if (this.files.length > 0) {
                               selectedFile = this.files[0];
                           }
                       });
                     document.getElementById("fileInputBank").addEventListener("change", function () {
                        if (this.files.length > 0) {
                            selectedFile = this.files[0];
                        }
                    });
                    document.getElementById("fileInputOther").addEventListener("change", function () {
                        if (this.files.length > 0) {
                            selectedFile = this.files[0];
                        }
                    });

                     document.querySelectorAll('.category-btn').forEach(btn => {
                        btn.addEventListener('click', function () {
                             document.querySelectorAll('.category-btn').forEach(b => b.classList.remove('active'));
                             this.classList.add('active');
                            const category = this.getAttribute('data-category');

                            document.getElementById('t10-form').style.display = (category === 'T10') ? 'block' : 'none';
                            document.getElementById('terminal-form').style.display = (category === 'TerminalBenefit') ? 'block' : 'none';
                            document.getElementById('AnyOther-form').style.display = (category === 'AnyOther') ? 'block' : 'none';

                            const categoryText = this.innerText.trim();
                            selectedCategoryName = categoryText;

                            const selectedCategory = this.dataset.category;
                            const displayMap = {
                                   "T10": "T10",
                                   "TerminalBenefit": "Terminal Benefit",
                                   "AnyOther": "Any Other"
                            };

                          const readableCategory = displayMap[selectedCategory] || selectedCategory;
                          document.getElementById("categoryHeading").innerHTML =
                         `<span class="text-muted">Your Uploaded</span> <span class="badge bg-primary">${readableCategory}</span> <span class="text-muted">Documents for 2024/2025</span>`;
                                renderDocsTable(categoryText); // Only filter already loaded docs
                        });
                    });
                    function toggleSidebar() {
                        const sidebar = document.querySelector('.sidebar');
                        sidebar.classList.toggle('collapsed');
                    }
                    function showPanel(panelId) {

                        document.getElementById('in-this-section-container').style.display = 'none';
                        contentPanels.forEach(panel => {
                            panel.style.display = (panel.id === panelId) ? "block" : "none";
                        });
                        // Remove "active" from all links
                        sidebarLinks.forEach(link => {
                            link.classList.remove("active");
                        });
                        // Add "active" to current clicked link
                        const activeLink = document.querySelector(`.sidebar-link[data-target="${panelId}"]`);
                        if (activeLink) {
                            activeLink.classList.add("active");
                        }
                        // ✅ If employment-section, auto-select T10
                        if (panelId === "employment-section") {
                            const t10Btn = document.querySelector(`.category-btn[data-category="T10"]`);
                            if (t10Btn) t10Btn.click();
                        }
                    }
                    sidebarLinks.forEach(link => {
                        link.addEventListener("click", function (e) {
                            e.preventDefault();
                            const targetId = this.getAttribute("data-target");
                            const panelId = this.dataset.target;

                            showPanel(targetId);

                            if (panelId === "bank-section") {
                                selectedCategoryName = 'Bank Confirmation';
                                loadUploadedDocs(userId,'Bank Confirmation'); // userId must be available in this scope
                            }
                            if (panelId === "employment-section") {
                                selectedCategoryName = 'T10';
                                loadUploadedDocs(userId,'T10'); // userId must be available in this scope
                            }
                            else if (panelId === "assets-section") {
                                    selectedCategoryName = 'Assets Liabilities';
                                   loadAssestsUploadedFiles(userId);// userId must be available in this scope
                                    loadExcelAssestsUploadedFiles(userId);
                            }
                            else if (panelId === "other-section") {
                                selectedCategoryName = 'Other Documents';
                                loadUploadedDocs(userId,'Other Documents'); // userId must be available in this scope
                                   loadFinancialDetails(userId, '2024/2025');
                            }
                               else if (panelId === "declaration-section") {
                                   selectedCategoryName = 'Declaration';
                                   loadDeclarationDocs(userId) ;
                               }

                        });
                     });

                       function loadAssestsUploadedFiles(userId) {
                               $.ajax({
                                  url: `${baseApiUrl}api/UserUploadTaxAssistedDoc/GetUploadedDocsByUser?userId=${userId}`,
                               type: 'GET',
                               success: function (data) {
                                    const collapseEl = document.getElementById('uploadedFilesCollapse');
                                    const collapseInstance = new bootstrap.Collapse(collapseEl, {
                                           show: true,
                                           toggle: false
                                       });
                                  collapseInstance.show();
                                   const tbody = $("#uploadedAssetsTable tbody");
                                   tbody.empty();
                                   // Filter only Asset or Liability categories in JS
                                  const filteredDocs = data.filter(doc =>
                                       doc.categoryName?.trim().toLowerCase() === "assets liabilities"
                                   );


                                   if (filteredDocs.length === 0) {
                                       tbody.append(`<tr><td colspan="7" class="text-center">No Assets/Liabilities uploaded.</td></tr>`);
                                       return;
                                   }

                                   filteredDocs.forEach((doc, index) => {
                                       const dateOnly = doc.uploadDate.split("T")[0];
                                       const assetTypeLabel = doc.assestType === 1 ? "Local" : "Foreign";
                                       const row = `
                                           <tr>
                                               <td>${index + 1}</td>
                                                  <td>${doc.assetCategory}</td>
                                                  <td>${assetTypeLabel}</td>
                                                   <td>
                                                     ${doc.assetNote || ""}
                                                     ${doc.assetVehicleType ? ' - ' + doc.assetVehicleType : ''}
                                                                 ${!doc.assetVehicleType && doc.assetInstitution ? ' - ' + doc.assetInstitution : ''}
                                                   </td>
                                                     <td>${doc.originalName || ""}</td>
                                                        <td>${dateOnly}</td>
                                               <td>
                                                    <button class="btn btn-primary btn-sm" onclick="viewDoc('${doc.fileName}', '${doc.decryptionKey}')">View</button>
                                                        <button class="btn btn-danger btn-sm delete-btn" onclick="showDeleteConfirm('${doc.userUploadId}', '${doc.uploadId}')">Delete</button>
                                               </td>
                                           </tr>
                                       `;

                                       tbody.append(row);
                                             

                                          const docStatus = document.getElementById("docUploadStatus")?.value;
                                             updateChecklistStatuses(data,docStatus);

                                        if (docStatus === "2") {
                                            // Disable all delete buttons after they're dynamically added
                                                document.querySelectorAll(".delete-btn").forEach(btn => {
                                                    btn.disabled = true;
                                                    btn.title = "You cannot delete after submission";
                                                    btn.removeAttribute("onclick");
                                                });

                                        }
                                   });
                               },
                               error: function (xhr) {
                                   console.error("Error loading uploaded documents", xhr.responseText);
                               }
                           });

                          }

                          function loadExcelAssestsUploadedFiles(userId) {
                                     $.ajax({
                                        url: `${baseApiUrl}api/UserUploadTaxAssistedDoc/GetUploadedDocsByUser?userId=${userId}`,
                                     type: 'GET',
                                     success: function (data) {
                                         // Filter only Asset or Liability categories in JS
                                        const filteredDocs = data.filter(doc =>
                                                doc.categoryName?.trim().toLowerCase() === "assests upload excel"
                                         );
                                         const tbody = $("#uploadedExcelAssetsTable tbody");
                                            tbody.empty();
                                         if (filteredDocs.length === 0) {
                                             tbody.append(`<tr><td colspan="5" class="text-center">No Assets/Liabilities uploaded.</td></tr>`);
                                             return;
                                         }

                                         filteredDocs.forEach((doc, index) => {
                                             const dateOnly = doc.uploadDate.split("T")[0];

                                             const row = `
                                                 <tr>
                                                     <td>${index + 1}</td>
                                                        <td>${doc.originalName}</td>
                                                        <td>${dateOnly}</td>
                                                     <td>
                                                          <button class="btn btn-primary btn-sm" onclick="viewDoc('${doc.fileName}', '${doc.decryptionKey}')">View</button>
                                                              <button class="btn btn-danger btn-sm delete-btn" onclick="showDeleteConfirm('${doc.userUploadId}', '${doc.uploadId}')">Delete</button>
                                                     </td>
                                                 </tr>
                                             `;

                                             tbody.append(row);
                                             

                                                 const docStatus = document.getElementById("docUploadStatus")?.value;
                                                    updateChecklistStatuses(data,docStatus);

                                                if (docStatus === "2") {
                                                    // Disable all delete buttons after they're dynamically added
                                                        document.querySelectorAll(".delete-btn").forEach(btn => {
                                                            btn.disabled = true;
                                                            btn.title = "You cannot delete after submission";
                                                            btn.removeAttribute("onclick");
                                                        });

                                                }
                                         });
                                     },
                                     error: function (xhr) {
                                         console.error("Error loading uploaded documents", xhr.responseText);
                                     }
                                 });

                           }

                       function showBankConfirmationColumns() {
                           // Hide default columns
                               $('.col-employer-name').addClass('d-none');

                           // Show bank-specific columns
                                 $('.col-confirmation-type, .col-bank-name').removeClass('d-none');
                      }

                       function showDefaultColumns() {
                       // Show default columns
                              $('.col-employer-name').removeClass('d-none');

                       // Hide bank-specific
                                 $('.col-confirmation-type, .col-bank-name').addClass('d-none');
                       }

                     async function loadUploadedDocs(userId, selectedCategory = null) {
                         //alert("2");
                         if(selectedCategory == 'Bank Confirmation'){
                             document.getElementById("uploadedBankDocs").style.display = "block";
                         }
                         else if(selectedCategory == 'Other Documents'){
                             document.getElementById("uploadedOtherDocs").style.display = "block";
                         }
                         else
                         {
                            document.getElementById("uploadedDocs").style.display = "block";
                         }


                        try {
                            const res = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/GetUploadedDocsByUser?userId=${userId}`);
                            if (!res.ok) {
                                alert("Failed to load uploaded documents");
                                return;
                            }

                            allDocs = await res.json();
                           updateGlobalUploadCount();
                            renderDocsTable(selectedCategory);
                               updateChecklistStatuses(allDocs,docStatus);
                        } catch (err) {
                            console.error("Error loading documents:", err);
                            alert("An error occurred while loading documents");
                        }

                    }

                    function updateProgressHeader(year, newStatusText, newStatusClass) {
                        const header = document.getElementById("progressHeader");
                        // update text
                        header.textContent = `${year}/${year + 1} – ${newStatusText}`;
                        // reset classes (keep "card-header")
                        header.className = "card-header " + newStatusClass;
                }

                       function updateChecklistStatuses(docs, docStatus = null) {
                            let totalItems = 5;
                            let completed = 0;
                    // employment income
                    const hasEmploymentIncome = docs.some(d => d.categoryName === "T10");
                    setStatus("employmentIncomeStatus", hasEmploymentIncome);
                       if (hasEmploymentIncome) completed++;

                    // bank confirmation
                    const hasBankConfirmation = docs.some(d => d.categoryName === "Bank Confirmation");
                    setStatus("bankConfirmationStatus", hasBankConfirmation);
                     if (hasBankConfirmation) {
                         completed++;
                     }

                    // assets
                    const hasAssets = docs.some(d =>
                        d.categoryName === "Assets Liabilities" ||
                           d.categoryName === "Assests Upload Excel"
                     );
                    setStatus("assetsStatus", hasAssets);
                    if (hasAssets) completed++;

                    // other docs
                    const hasOther = docs.some(d => d.categoryName === "Other Documents");
                    setStatus("otherDocsStatus", hasOther);
                          if (hasOther) completed++;

                    // personal info (dummy logic, adapt as needed)
                    const hasPersonalInfo = docs.some(d => d.categoryName === "Personal Information");
                       completed++;
                    //setStatus("personalInfoStatus", hasPersonalInfo);

                   let progress = 0;
                      //const docStatus = document.getElementById("docUploadStatus")?.value;
                if(completed === totalItems && docStatus === 2){
                    progress = 100;
                }
                else if (completed === totalItems) {
                    progress = 90; // all uploaded but not submitted
                } else if (completed === 1) {
                    progress = 18; // one completed
                } else {
                    progress = Math.round((completed / totalItems) * 90);
                }
                  if (docStatus === 2) {
                    progress = 100;
                }
                 const bar = document.getElementById("progressBar");
                if (bar) {
                    bar.style.width = progress + "%";
                    bar.textContent = progress + "%";
                }
                   updateCurrentAssessementProgressbar("2024",progress);

                }

                function updateCurrentAssessementProgressbar(year,progress)
                {
                    const progressBar = document.querySelector(`#assessment-row-${year} .progress-bar`);
                    if (progressBar) {
                           progressBar.style.width = progress + "%";
                        //progressBar.textContent = percent + "%"; // optional
                    }
                       if(progress == 100 && year == 2024)
                            document.getElementById("btnViewSubmittedDocs").style.display = "block";
                       else
                               document.getElementById("btnViewSubmittedDocs").style.display = "none";

                }

                

                 function setStatus(elementId, isUploaded) {
                    const el = document.getElementById(elementId);
                    if (!el) return;

                    if (isUploaded) {
                        el.textContent = "✓";
                        el.className = "text-success";
                    } else {
                        el.textContent = "Missing";
                        el.className = "text-danger";
                    }
                    //setStepsIndicatorProgress(elementId);
                }

                   

                     function renderDocsTable(categoryFilter = null) {
                        let tableBody;
                        if (categoryFilter === 'Bank Confirmation')
                            tableBody = document.getElementById("documentsTableBankBody");
                        else if (categoryFilter === 'Other Documents')
                            tableBody = document.getElementById("documentsTableOtherBody");
                        else
                            tableBody = document.getElementById("documentsTableBody");

                        // ❗️Check if the target element exists
                        if (!tableBody) {
                            console.error("Table body element not found for the selected category.");
                            return;
                        }

                        tableBody.innerHTML = "";

                        const filteredDocs = categoryFilter
                            ? allDocs.filter(doc => doc.categoryName === categoryFilter)
                            : allDocs;

                           filteredDocs.forEach((doc, index) => {
                            const dateOnly = doc.uploadDate.split("T")[0];
                             let employmentValue = "";
                             let bankConfirmationType = "";
                             let bankName ="";

                                 if (doc.categoryName === "T10") {
                                           employmentValue = doc.t10EmployerName;
                                 } else if (doc.categoryName === "Terminal Benefit") {
                                           employmentValue = doc.terminalEmployerName;
                                  } else if (doc.categoryName === "Any Other") {
                                            employmentValue = doc.anyOtherType;
                                   } else if(doc.categoryName === "Other Documents"){
                                            employmentValue = doc.otherDocumentName;
                                   }

                              employmentValue = employmentValue ?? "";
                              const row = document.createElement("tr");

                              bankConfirmationType = doc.bankConfirmationType ?? "";
                              bankName = doc.bankName ?? "";

                            row.innerHTML = `
                               <td>${index + 1}</td>
                                <td>${doc.originalName}</td>
                                <td>${doc.categoryName}</td>
                                <td class="col-employer-name d-none">${employmentValue}</td>
                                 <td class="col-confirmation-type d-none">${bankConfirmationType}</td>
                                 <td class="col-bank-name d-none">${bankName}</td>
                                <td>${dateOnly}</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" onclick="viewDoc('${doc.fileName}', '${doc.decryptionKey}')">View</button>
                                         <button class="btn btn-danger btn-sm delete-btn" onclick="showDeleteConfirm('${doc.userUploadId}', '${doc.uploadId}')">Delete</button>
                                </td>
                            `;
                            tableBody.appendChild(row);
                        });

                        if (categoryFilter === 'Bank Confirmation')
                           showBankConfirmationColumns();
                       else
                           showDefaultColumns();

                          const docStatus = document.getElementById("docUploadStatus")?.value;

                          if (docStatus === "2") {
                              // Disable all delete buttons after they're dynamically added
                                  document.querySelectorAll(".delete-btn").forEach(btn => {
                                      btn.disabled = true;
                                      btn.title = "You cannot delete after submission";
                                      btn.removeAttribute("onclick");
                                  });

                          }

                    }
                     async function viewDoc(fileName, decryptionKey) {
                        const width = 800;
                        const height = 600;
                        const left = (screen.width / 2) - (width / 2);
                        const top = (screen.height / 2) - (height / 2);

                        const formData = new FormData();
                        formData.append("filename", fileName); // Match the API's expected field
                        formData.append("decryptionKey", decryptionKey);                        
                        formData.append("year", new Date().getFullYear().toString());

                        const viewRes = await fetch("https://file.taxfiling.lk/view", {
                            method: "POST",
                            headers: {
                            "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                filename: fileName,
                                decryptionKey: decryptionKey,
                                userId : userId,
                                year : new Date().getFullYear().toString()
                            })

                        });

                        if (!viewRes.ok) {
                            const err = await viewRes.text();
                            console.error("View API error:", err);
                            throw new Error("External load failed: " + err);
                        }
                        const contentType = viewRes.headers.get("Content-Type") || "application/octet-stream";
                        const blob = await viewRes.blob();
                        const fileURL = URL.createObjectURL(new Blob([blob], { type: contentType }));

                        window.open(
                            fileURL,
                            '_blank',
                            `toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=${width},height=${height},top=${top},left=${left}`
                        );
                    }
                                    function showMessage(message, type = "success", autoClose = true, autoCloseTime = 5000) {
                     const modal = document.getElementById("enhancedModal");
                     const modalContent = modal.querySelector(".enhanced-modal-content");
                     const msgElem = document.getElementById("enhancedModalMessage");
                     const closeBtn = document.getElementById("enhancedModalClose");

                     // Set message text
                     msgElem.textContent = message;

                     // Remove previous type classes
                     modalContent.classList.remove("modal-success", "modal-error", "modal-info");

                     // Add current type class
                     if (type === "success") modalContent.classList.add("modal-success");
                     else if (type === "error") modalContent.classList.add("modal-error");
                     else modalContent.classList.add("modal-info");

                     // Show modal
                     modal.style.display = "flex";

                     // Close function
                     function closeModal() {
                       modal.style.display = "none";
                       // Cleanup event listeners to avoid duplicates if called again
                       closeBtn.removeEventListener("click", closeModal);
                       window.removeEventListener("click", outsideClick);
                       if (autoCloseTimer) clearTimeout(autoCloseTimer);
                     }

                     // Close when clicking close button
                     closeBtn.addEventListener("click", closeModal);

                     // Close when clicking outside modal content
                     function outsideClick(e) {
                       if (e.target === modal) closeModal();
                     }
                     window.addEventListener("click", outsideClick);

                     // Auto-close timer if enabled
                     let autoCloseTimer;
                     if (autoClose) {
                       autoCloseTimer = setTimeout(closeModal, autoCloseTime);
                     }
                   }

                    function showDeleteConfirm(userUploadId,uploadId) {

                        const modalElement = document.getElementById("confirmDeleteModal");
                        const originalDeleteBtn = document.getElementById("confirmDeleteBtn");

                        const newDeleteBtn = originalDeleteBtn.cloneNode(true);
                        originalDeleteBtn.parentNode.replaceChild(newDeleteBtn, originalDeleteBtn);

                         newDeleteBtn.addEventListener("click", () => {
                            const modalInstance = bootstrap.Modal.getInstance(modalElement);
                            modalInstance.hide();

                            setTimeout(() => {
                                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                                document.body.classList.remove('modal-open');
                            }, 500);

                            deleteDoc(userUploadId);
                            deleteFilefromServer(uploadId);

                        });

                        const modal = new bootstrap.Modal(modalElement);
                        modal.show();
                    }

                      async function deleteFilefromServer(uploadId) {

                          try {
                                let year = new Date().getFullYear();
                                const response = await fetch(`https://file.taxfiling.lk/file/${uploadId}/${userId}/${year}`, {
                                  method: "DELETE"
                              });

                              if (!response.ok) {
                                  const errMsg = await response.text();
                                  showMessage("❌ Failed to delete document. " + errorText, "danger");
                                  //throw new Error("Delete failed: " + errMsg);
                              }
                              else
                              {
                                 const message = await response.text();
                              }

                              // Optionally refresh document list or remove the row from the table
                          } catch (error) {
                              console.error(error);
                              alert("Error: " + error.message);
                          }
                      }

                     async function deleteDoc(userUploadId) {

                        try {
                            const response = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/DeleteDoc/${userUploadId}`, {
                                method: "DELETE"
                            });

                            if (!response.ok) {
                                const errMsg = await response.text();
                                showMessage("❌ Failed to delete document. " + errorText, "danger");
                                //throw new Error("Delete failed: " + errMsg);
                            }
                            else
                            {
                                showMessage("✅ Document deleted successfully.", "success");
                                const userId = '@User.FindFirst("UserID")?.Value';
                                  decrementUploadCount();
                                loadUploadedDocs(userId,selectedCategoryName);
                                      if(selectedCategoryName == "Assets Liabilities" || selectedCategoryName == "Assests Upload Excel")
                                      {
                                            loadExcelAssestsUploadedFiles(userId);
                                             loadAssestsUploadedFiles(userId);
                                      }
                                    
                            }

                            // Optionally refresh document list or remove the row from the table
                        } catch (error) {
                            console.error(error);
                            alert("Error: " + error.message);
                        }
                    }

                    const acceptCheckbox = document.getElementById("acceptDeclaration");
                    const submitDeclareBtn = document.getElementById("submitDeclarationBtn");
                    const printBtn = document.getElementById("printDeclarationBtn");
                    const declarationSection = document.getElementById("declaration-section");

                       acceptCheckbox.addEventListener("change", function () {
                        submitDeclareBtn.disabled = !this.checked;

                    });

                    submitDeclareBtn.addEventListener("click", function () {
                           if (acceptCheckbox.checked) {
                                   const userId = '@userId';
                                   const status = 2; // SUBMITTED
                                   const currentYear = new Date().getFullYear()-1;
                                   const badgeId = `status-badge-${currentYear}`;
                                   const badge = document.getElementById(badgeId);
                                  const payload = {
                                       userId: userId,
                                       uploadedDocumentStatus: 2
                                   };
                                      fetch(`${baseApiUrl}api/users/update-document-status`, {
                                       method: 'PUT',
                                        headers: {
                                            'Content-Type': 'application/json'
                                       },
                                       body: JSON.stringify(payload)
                                   })
                                   .then(res => res.json())
                                   .then(data => {
                                         if(data.success){
                                                 document.getElementById("docUploadStatus").value = status;
                                                   acceptCheckbox.disabled = true;
                                                   

                                                 if (badge) {
                                                   badge.innerText = "SUBMITTED";
                                                   badge.className = "badge bg-success";
                                               }
                                               //Disable delete and submit buttons
                                               document.querySelectorAll('.delete-btn, .submit-btn').forEach(btn => {
                                                   btn.disabled = true;
                                                   btn.title = "Disabled after submission";

                                                    // Optional: remove onclick handler
                                                  btn.onclick = function (e) {
                                                      e.preventDefault();
                                                      e.stopPropagation();
                                                      return false;
                                                  };
                                               });

                                                  updateProgressHeader(2024, "SUBMITTED", "bg-success text-white");
                                                    const btnContinue = document.getElementById("btnContinue");
                                                    const btnUploadDocs = document.getElementById("btnUploadDocs");
                                                    const btnRemoveDft = document.getElementById("btnRemoveDft");
                                                    const btnViewSubmittedDocs = document.getElementById("btnViewSubmittedDocs");
                                                       const bar = document.getElementById("progressBar");
                                                        if (bar) {
                                                            bar.style.width =  "100%";
                                                            bar.textContent = "100%";
                                                        }
                                                    if(btnContinue)
                                                        btnContinue.style.display = "none";
                                                    if(btnUploadDocs)
                                                           btnUploadDocs.style.display = "none";
                                                    if(btnRemoveDft)
                                                              btnRemoveDft.style.display = "none";
                                                    if(btnViewSubmittedDocs)
                                                              btnViewSubmittedDocs.style.display = "block";

                                                    updateChecklistStatuses(allDocs,2);
                                                    updateCurrentAssessementProgressbar(2024,100);
                                                       $("#statusBadge")
                                                       .text("SUBMITTED")
                                                       .removeClass("bg-warning")
                                                          .addClass("badge bg-success");


                                               this.disabled = true;
                                               this.innerText = "Terms Accepted";
                                              //alert("Your Documents submitted successfully");
                                                showMessage("Your Documents submitted successfully and Tax admins are contact you ASAP!", "success");
                                               printBtn.disabled = false;
                                               const steps = document.querySelectorAll('.taxAssistedSteps span');
                                               if (!steps.length) return;
                                                  steps[5].classList.add('completed');
                                                  steps[6].classList.add('completed');



                                         }
                                         else
                                               alert(data.message);
                                   })
                                    .catch(err => alert('Error updating status.'));

                        }
                    });

                    printBtn.addEventListener("click", function () {
                         window.print();
                   });

                    function toggleUpload(checkboxId, fileInputId) {
                        const checkbox = document.getElementById(checkboxId);
                        const fileInput = document.getElementById(fileInputId);
                        if (checkbox && fileInput) {
                            fileInput.style.display = checkbox.checked ? "block" : "none";
                        }
                    }

                   async function loadDeclarationDocs(userId) {
                       try {
                           const res = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/GetUploadedDocsByUser?userId=${userId}`);
                           if (!res.ok) {
                               alert("Failed to load declaration documents.");
                               return;
                           }

                           const allDocs = await res.json();
                           const tbody = $("#declarationDocsTable tbody");
                           tbody.empty();
                              $("#uploadedDeclarationDocs").show();
                           if (allDocs && allDocs.length > 0) {
                               //$("#uploadedDeclarationDocs").show();
                               allDocs.forEach((doc, index) => {
                                   const uploadDate = doc.uploadDate ? doc.uploadDate.split("T")[0] : "";
                                   const assetTypeLabel = doc.categoryName === "Assets Liabilities"
                                      ? (doc.assestType === 1 ? "Local" : "Foreign")  : "";
                                  const displayName = doc.originalName?.trim() || doc.assetNote;
                                  let assetCategoryDisplayName = "";
                                 if(doc.categoryName === "T10")
                                          assetCategoryDisplayName = doc.t10EmployerName ?? "";
                                else if(doc.categoryName === "Bank Confirmation")
                                                assetCategoryDisplayName = `${doc.bankConfirmationType ?? ""} ${doc.bankName ?? ""}`.trim();
                                else if(doc.categoryName === "Terminal Benefit")
                                                    assetCategoryDisplayName = `${doc.terminalEmployerName ?? ""}`;
                                else if(doc.categoryName === "Any Other")
                                         assetCategoryDisplayName = doc.anyOtherType;
                                else if(doc.categoryName === "Assets Liabilities")
                                            assetCategoryDisplayName = doc.assetCategory;
                                  else if(doc.categoryName === "Other Documents")
                                                  assetCategoryDisplayName =`${doc.otherDocumentName ?? ""}`;
                                   const row = `
                                       <tr>
                                           <td>${index + 1}</td>
                                             <td>${doc.categoryName}</td>
                                                 <td>${assetCategoryDisplayName || "NA"}</td>
                                                 <td class="no-wrap">${uploadDate}</td>

                                       </tr>
                                   `;
                                   tbody.append(row);
                               });
                           } else {
                                  tbody.append(`
                                    <tr>
                                        <td colspan="4" class="text-center">No files uploaded.</td>
                                    </tr>
                                `);
                               //$("#uploadedDeclarationDocs").hide();
                           }
                        const assessmentYear ="2024/2025";
                            const otherTbody = $("#otherTaxPaymentsTable tbody");
                            otherTbody.empty();
                        // --- Second API: Other Tax Details ---
                        const resOtherAssets = await fetch(`${baseApiUrl}api/UserTaxAssistedOtherAssetsDetails/GetUserOtherTaxDetails?userId=${encodeURIComponent(userId)}&assessmentYear=${encodeURIComponent(assessmentYear)}`);
                        if (resOtherAssets.ok) {
                                const otherAssets = await resOtherAssets.json();
                            if (otherAssets && otherAssets.details.length > 0) {
                                  // $("#uploadedDeclarationDocs").show();
                                $("#otherTaxPaymentsTable").show();
                                otherAssets.details.forEach((doc, index) => {
                                    const row = `
                                        <tr>
                                            <td>${otherTbody.children().length + 1}</td>
                                            <td>${doc.category}</td>
                                                  <td>${Number(doc.value).toLocaleString('en-US')}</td>
                                            <td class="no-wrap">${doc.createdDate.split("T")[0]}</td>
                                        </tr>
                                    `;
                                    otherTbody.append(row);
                                });
                            } else {
                                $("#otherTaxPaymentsTable").hide();
                            }   
                        } else {
                            alert("Failed to load other tax details.");
                        }

                       } catch (err) {
                           console.error("Error loading declaration docs:", err);
                           alert("An error occurred while fetching declaration documents.");
                       }
                   }

                function updateRemoveBtn() {
                    // find the checked row
                    const checked = document.querySelector(".checkbox-lg:checked");
                    const removeBtn = document.getElementById("btnRemoveDraft");
                    if (checked) {
                        const row = checked.closest("tr");
                        const status = row.querySelector("span.badge").innerText.trim();

                        // disable remove button if status is SUBMITTED or NEW
                        if (status === "SUBMITTED" || status === "NEW") {
                            removeBtn.disabled = true;
                        } else {
                            removeBtn.disabled = false;
                        }
                    } else {
                        removeBtn.disabled = true; // nothing selected
                    }

                }

                 

                     //page load
                document.addEventListener("DOMContentLoaded", function () {

                

                   const checkboxes = document.querySelectorAll(".checkbox-lg");
                   const removeBtn = document.getElementById("btnRemoveDraft");

                checkboxes.forEach(cb => {
                    cb.addEventListener("change", function () {
                        if (this.checked) {
                            // uncheck all others
                            checkboxes.forEach(other => {
                                if (other !== this) other.checked = false;
                            });
                            setStatus("employmentIncomeStatus", true);
                            setStatus("bankConfirmationStatus", true);
                            setStatus("assetsStatus", true);
                            setStatus("otherDocsStatus", true);
                            const row = this.closest("tr");
                            const yearText = parseInt(row.cells[1].textContent.trim().split("/")[0], 10); // 2024
                            const currentYear = new Date().getFullYear();
                            const statusText = row.cells[4].textContent.trim();
                            const statusBadge = row.querySelector("span.badge");
                            const newStatusClass = statusBadge.className.replace("badge", "").trim();
                               const progressBar = row.querySelector(".progress-bar");
                                        const widthValue = progressBar.style.width; // "54%"
                const progress = parseInt(widthValue, 10);
                            
                               if(yearText + 1 != currentYear)
                               {
                                       updateProgressHeader(yearText, "SUBMITTED", "bg-success text-white");
                                       const btnContinue = document.getElementById("btnContinue");
                                       const btnUploadDocs = document.getElementById("btnUploadDocs");
                                       const btnRemoveDft = document.getElementById("btnRemoveDft");
                                       const btnViewSubmittedDocs = document.getElementById("btnViewSubmittedDocs");
                                          const bar = document.getElementById("progressBar");
                                           if (bar) {
                                               bar.style.width = progress + "%";
                                               bar.textContent = progress + "%";
                                           }
                                       if(btnContinue)
                                           btnContinue.style.display = "none";
                                       if(btnUploadDocs)
                                              btnUploadDocs.style.display = "none";
                                       if(btnRemoveDft)
                                                 btnRemoveDft.style.display = "none";
                                       if(btnViewSubmittedDocs)
                                                    btnViewSubmittedDocs.style.display = "none";

                               }
                               else
                               {
                                               updateProgressHeader(yearText, statusText, newStatusClass);
                                                  updateChecklistStatuses(allDocs,parseInt(document.getElementById("docUploadStatus").value, 10));
                                                  const bar = document.getElementById("progressBar");
                                              if (bar) {
                                                  bar.style.width = progress + "%";
                                                  bar.textContent = progress + "%";
                                              }
                                                  if(parseInt(document.getElementById("docUploadStatus").value, 10) == 1)
                                            {
                                                   btnContinue.style.display = "block";
                                                   btnRemoveDft.style.display = "block";
                                                      btnUploadDocs.style.display = "block";
                                                         btnViewSubmittedDocs.style.display = "none";

                                            }
                                               else if(parseInt(document.getElementById("docUploadStatus").value, 10) == 0)
                                            {
                                                   btnContinue.style.display = "block";
                                                   btnRemoveDft.style.display = "none";
                                                      btnUploadDocs.style.display = "block";
                                                         btnViewSubmittedDocs.style.display = "none";

                                            }
                                                  else if(parseInt(document.getElementById("docUploadStatus").value, 10) == 2)
                                               {
                                                          btnViewSubmittedDocs.style.display = "block";
                                                             btnContinue.style.display = "none";
                                                         btnRemoveDft.style.display = "none";
                                                            btnUploadDocs.style.display = "none";

                                               }
                                                  
                               }
                           



                           }

                        updateRemoveBtn();
                    });
                });

                            // Allow only numeric input
                $(".numeric-input").on("keypress", function(e) {
                    var charCode = (e.which) ? e.which : e.keyCode;
                    // Allow numbers, backspace, delete
                    if (charCode != 8 && charCode != 46 && (charCode < 48 || charCode > 57)) {
                        e.preventDefault();
                    }
                });

                // Auto-format number on blur (e.g., 1000 → 1,000)
                $(".numeric-input").on("blur", function() {
                    var value = $(this).val().replace(/,/g, '');
                    if(value) {
                        $(this).val(Number(value).toLocaleString('en-US'));
                    }
                });

                // Remove formatting on focus for easy editing
                $(".numeric-input").on("focus", function() {
                    $(this).val($(this).val().replace(/,/g, ''));
                });

                // Initial state: disable remove button until a valid row is selected
               updateRemoveBtn();

                //let allBranches = [];

                // // Load all branches once
                // $.getJSON("https://mail.taxfiling.lk/bank-branches", function(data) {
                //     allBranches = data.map(branch => ({
                //         id: branch.BranchCode,
                //        // text: branch.BranchName + " (" + branch.bankName + ")" // show both branch and bank
                //          text: branch.BranchName
                //     }));

                //     $('#BankName').select2({
                //         placeholder: "Select bank",
                //         minimumInputLength: 0, // allow opening full list without typing
                //         data: allBranches,
                //         matcher: function(params, data) {
                //             // If no search term, show all
                //             if ($.trim(params.term) === '') {
                //                 return data;
                //             }

                //             // Match text anywhere (contains match, not just startsWith)
                //             if (data.text.toLowerCase().startsWith(params.term.toLowerCase())) {
                //                 return data;
                //             }

                //             return null;
                //         },
                //         dropdownAutoWidth: true,
                //         width: 'resolve',
                //         allowClear: true
                //     });
                // });

                //  $('#BankName').on('select2:open', function() {
                //     let searchBox = document.querySelector('.select2-container--open .select2-search__field');
                //     if (searchBox) {
                //         searchBox.setAttribute('placeholder', 'Filter your choice');
                //     }
                // });

                //                                                                    $('#BankName').select2({
                //     placeholder: "Type full name or short name (HNB, BOC)",
                //     ajax: {
                //         url: "https://mail.taxfiling.lk/getallbank",
                //         dataType: 'json',
                //         delay: 250,
                //         processResults: function (data) {
                //             return {
                //                 results: data.map(function(bank) {
                //                     return { id: bank.bankCode, text: bank.bankName  };
                //                 })
                //             };
                //         }
                //     },
                   
                // minimumInputLength: 1,          // ✅ search using main box
                // minimumResultsForSearch: Infinity // ✅ removes inner search box
                // });

                // // 2. When bank is selected → load branches
                //    $("#BankName").on("change", function () {
                //     let bankCode = $(this).val();
                //     if (!bankCode) {
                //         $("#BranchName").prop("disabled", true).empty();
                //         return;
                //     }

                //     $.getJSON("https://mail.taxfiling.lk/getbranches/" + bankCode, function (branches) {
                //         let branchList = branches.map(br => ({
                //             id: br.BranchCode,
                //             text: br.BranchName
                //         }));

                //            $("#BranchName").prop("disabled", false).empty().select2({
                //             placeholder: "Select a Branch",
                //             data: branchList,
                //             allowClear: true,
                //             width: 'resolve'
                //         });
                //     });
                // });

                  let allBanks = [];
                  let selectedBank = null;
                  let highlightedIndex = -1;
                     let highlightedBranchIndex = -1;

                    $.getJSON("https://mail.taxfiling.lk/getallbank", function (data) {
                        allBanks = data;  
                    });

                   $("#bankInput").on("input focus", function () {
                    const q = $(this).val().toLowerCase();
                    let results = allBanks;

                    if (q) {
                        results = results.filter(b =>
                                  (b.bankName && b.bankName.toLowerCase().startsWith(q))
                           );
                    }

                    let html = "";
                    if (results.length === 0) html = "<div>No banks match.</div>";
                    results.forEach(b => {
                           html += `<div data-id="${b.BankCode}" data-long="${b.bankName}">
                                          ${b.bankName} 
                                 </div>`;
                    });

                    $("#bankDropdown").html(html).show();
                });

                       
                $("#bankDropdown").on("mousedown", "div", function () {
                    const bankId = $(this).data("id");
                   
                    const bankLong = $(this).data("long");

                    $("#bankInput").val(bankLong);
                    $("#bank_id").val(bankId);                   

                    selectedBank = bankId;
                    
                                  $("#branchInput")
                .prop("disabled", false)       // enable input
                .val("")                        // clear previous value
                .attr("placeholder", "Type branch name or code")
                .focus();

                                //$("#branchInput").val("").prop("disabled", false).attr("placeholder", "Type branch name or code");
                    $("#branch_code, #branch_name").val("");
                       $("#bankDropdown").hide();
                    $.getJSON(`https://mail.taxfiling.lk/getbranches/${selectedBank}`, (branches) => {
                    if (!branches.length) return $("#branchDropdown").hide();

                    const html = branches.map(br =>
                        `<div data-code="${br.BranchCode}" data-name="${br.BranchName}">${br.BranchName}</div>`
                    ).join("");

                    $("#branchDropdown").html(html).show();
                    $("#branchDropdown div").removeClass("highlight").first().addClass("highlight");
                    highlightedBranchIndex = 0; // first item highlighted
                });
                    
                });

                //  $("#branchInput").on("input focus", function() {
                //     if (!selectedBank) return;

                //     const q = $(this).val().toLowerCase();

                //        $.getJSON(`https://mail.taxfiling.lk/getbranches/${selectedBank}`, (branches) => {
                //         const results = q
                //             ? branches.filter(br =>
                //                    br.BranchName.toLowerCase().startsWith(q) )
                //             : branches;

                //         if (!results.length) return $("#branchDropdown").hide();

                //         const html = results.map(br =>
                //                   `<div data-code="${br.BranchCode}" data-name="${br.BranchName}">
                //                    ${br.BranchName} </span>
                //             </div>`
                //         ).join("");

                //         $("#branchDropdown").html(html).show();
                //     });
                // });

                
                $("#branchDropdown").on("mousedown", "div", function() {
                    const brCode = $(this).data("code");
                    const brName = $(this).data("name");

                    $("#branchInput").val(brName);
                    $("#branch_code").val(brCode);
                    $("#branch_name").val(brName);

                    $("#branchDropdown").hide();
                });

                
                $(document).on("click", (e) => {
                    if (!$(e.target).closest("#bankInput, #bankDropdown").length) {
                        $("#bankDropdown").hide();
                    }
                    if (!$(e.target).closest("#branchInput, #branchDropdown").length) {
                        $("#branchDropdown").hide();
                    }
                });

                 $("#bankInput").on("keydown", function(e) {
                    const items = $("#bankDropdown div");
                    if (!items.length) return;

                    if (e.key === "ArrowDown") {
                        e.preventDefault();
                        highlightedIndex = (highlightedIndex + 1) % items.length;
                        items.removeClass("highlight").eq(highlightedIndex).addClass("highlight");
                    }
                    else if (e.key === "ArrowUp") {
                        e.preventDefault();
                        highlightedIndex = (highlightedIndex - 1 + items.length) % items.length;
                        items.removeClass("highlight").eq(highlightedIndex).addClass("highlight");
                    }
                    else if (e.key === "Enter") {
                        e.preventDefault();
                        if (highlightedIndex >= 0) {
                            const selected = items.eq(highlightedIndex);
                            const bankId = selected.data("id");
                            const bankName = selected.data("long");

                            $("#bankInput").val(bankName);
                            $("#bank_id").val(bankId);
                            selectedBank = bankId;

                               $("#branchInput")
                   .prop("disabled", false)       // enable input
                   .val("")                        // clear previous value
                   .attr("placeholder", "Type branch name or code")
                   .focus();

                            // reset branch
                            //$("#branchInput").val("").prop("disabled", false).attr("placeholder", "Type branch name or code");
                            $("#branch_code, #branch_name").val("");

                            $("#bankDropdown").hide();
                               
                               $.getJSON(`https://mail.taxfiling.lk/getbranches/${selectedBank}`, (branches) => {
                               if (!branches.length) return $("#branchDropdown").hide();

                               const html = branches.map(br =>
                                   `<div data-code="${br.BranchCode}" data-name="${br.BranchName}">${br.BranchName}</div>`
                               ).join("");

                               $("#branchDropdown").html(html).show();
                               //highlightedBranchIndex = -1; // reset highlight

                               $("#branchDropdown div").removeClass("highlight").first().addClass("highlight");
                                highlightedBranchIndex = 0; // first item highlighted
                            });
                        }
                    }
                });


                 $("#bankDropdown").on("mouseenter", "div", function() {
                    $("#bankDropdown div").removeClass("highlight");
                    $(this).addClass("highlight");
                    highlightedIndex = $(this).index();
                });

                  $("#branchInput").on("keydown", function(e) {
                    
                    const items = $("#branchDropdown div");
                    if (!items.length) return;

                    if (e.key === "ArrowDown") {
                        e.preventDefault();
                        highlightedBranchIndex = (highlightedBranchIndex + 1) % items.length;
                        items.removeClass("highlight").eq(highlightedBranchIndex).addClass("highlight");
                    }
                    else if (e.key === "ArrowUp") {
                        e.preventDefault();
                        highlightedBranchIndex = (highlightedBranchIndex - 1 + items.length) % items.length;
                        items.removeClass("highlight").eq(highlightedBranchIndex).addClass("highlight");
                    }
                    else if (e.key === "Enter") {
                        e.preventDefault();
                        if (highlightedBranchIndex >= 0) {
                            const selected = items.eq(highlightedBranchIndex);
                            const brCode = selected.data("code");
                            const brName = selected.data("name");

                            $("#branchInput").val(brName);
                            $("#branch_code").val(brCode);
                            $("#branch_name").val(brName);

                            $("#branchDropdown").hide();
                            highlightedBranchIndex = -1;
                        }
                    }
                });

                 $("#branchDropdown").on("mouseenter", "div", function() {
                    $("#branchDropdown div").removeClass("highlight");
                    $(this).addClass("highlight");
                    highlightedBranchIndex = $(this).index();
                });

                  $("#branchInput").on("focus input", function() {
                    if (!selectedBank) return; // No bank selected, do nothing

                    const q = $(this).val().toLowerCase();

                    $.getJSON(`https://mail.taxfiling.lk/getbranches/${selectedBank}`, (branches) => {
                        if (!branches.length) return $("#branchDropdown").hide();

                        // Filter if user typed something
                        const results = q
                               ? branches.filter(br => br.BranchName.toLowerCase().startsWith(q))
                            : branches;

                        if (!results.length) return $("#branchDropdown").hide();

                        const html = results.map(br =>
                            `<div data-code="${br.BranchCode}" data-name="${br.BranchName}">${br.BranchName}</div>`
                        ).join("");

                        $("#branchDropdown").html(html).show();

                        // Highlight first item
                        $("#branchDropdown div").removeClass("highlight").first().addClass("highlight");
                        highlightedBranchIndex = 0;
                    });
                });







                     const userId = '@User.FindFirst("UserID")?.Value';
                    loadUploadedDocs(userId,'T10');
                    toggleManualTab('local');
                    const docStatus = document.getElementById("docUploadStatus")?.value;

                     if (docStatus === "2") {

                           document.querySelectorAll('.submit-btn').forEach(btn => {
                               btn.disabled = true;
                               btn.title = "Disabled after submission";
                            });
                            document.getElementById("status-badge-2024").innerText = "SUBMITTED";
                            document.getElementById("status-badge-2024").className = "badge bg-success";
                            const acceptCheckbox = document.getElementById("acceptDeclaration");
                            acceptCheckbox.checked = true;
                              acceptCheckbox.disabled = true;
                     }

                    const message = '@TempData["SuccessMessage"]';
                   if (message) {
                       alert(message); // You can use SweetAlert or Bootstrap Toast instead of `alert`

                       // Optional: Scroll to a specific section
                     // const target = document.getElementById("assets-section");
                     //   if (target) {
                     //       target.scrollIntoView({ behavior: 'smooth' });
                     //   }
                           showPanel("assets-section");
                   }

                   const radioExcel = document.getElementById("optionExcel");
                   const radioManual = document.getElementById("optionManual");
                   const excelSection = document.getElementById("excelUploadSection");
                   const manualSection = document.getElementById("manualTableSection");

                   function toggleInputMode() {
                           if (radioExcel.checked) {
                               excelSection.style.display = "block";
                               manualSection.style.display = "none";
                           } else {
                               excelSection.style.display = "none";
                               manualSection.style.display = "block";
                           }
                   }

                        radioExcel.addEventListener("change", toggleInputMode);
                        radioManual.addEventListener("change", toggleInputMode);
                         toggleInputMode(); // on load

                     const firstLink = document.querySelector(".sidebar-link[data-target]");
                    if (firstLink) {
                        const firstTarget = firstLink.getAttribute("data-target");
                       // const firstButton = buttons[0];
                        showPanel(firstTarget);
                        selectedCategoryName = 'T10'; //firstButton.innerText.trim();
                    }

                    //scroll to top of the page
                     $("#start-btn, #btnContinue, #btnNext, #btnAssestsNext, #btnDocNext,#btnOtherNext, #btnDeclareNext,#btnOtherPrevious,#btnAssetsPrevious, #btnBankPrevious, #btnEmployementPrevious, #btnPrevious,#btnDocPrevious, #linkTaxPayerNext,#divSummaryAssistedNext,#linkTaxPayerContinue").on("click", function () {
                         $("html, body").animate({ scrollTop: 0 }, "smooth");
                    }); 

                    const startBtn = document.getElementById("start-btn");
                    const btnContinue = document.getElementById("btnContinue");
                    [startBtn, btnContinue].forEach(btn => {
                    if (btn) {
                        btn.addEventListener("click", function () {
                            document.getElementById("btnLoadSection").click();
                            // showPanel("documents-section");
                        });
                    }
                });



                    const  nextBtn= document.getElementById("btnNext");
                    if (nextBtn) {
                        nextBtn.addEventListener("click", function () {
                            selectedCategoryName = 'Bank Confirmation';
                            showPanel("bank-section");
                           loadUploadedDocs(userId,'Bank Confirmation');
                        });
                    }

                    const  nextAssestBtn= document.getElementById("btnAssestsNext");
                    if (nextAssestBtn) {
                        nextAssestBtn.addEventListener("click", function () {

                            showPanel("assets-section");
                                 loadExcelAssestsUploadedFiles(userId);
                                loadAssestsUploadedFiles(userId);

                        });
                    }

                    const  nextOtherBtn= document.getElementById("btnOtherNext");
                    if (nextOtherBtn) {
                        nextOtherBtn.addEventListener("click", function () {
                            selectedCategoryName = 'Other Documents';
                            showPanel("other-section");
                            loadUploadedDocs(userId,'Other Documents');
                                  loadFinancialDetails(userId,'2024/2025');
                        });
                    }

                    const  nextDeclareBtn= document.getElementById("btnDeclareNext");
                    if (nextDeclareBtn) {
                        nextDeclareBtn.addEventListener("click", function () {
                            showPanel("declaration-section");
                            loadDeclarationDocs(userId) ;

                        });
                    }
                    const  btnDocNext= document.getElementById("btnDocNext");

                     if (btnDocNext) {
                        btnDocNext.addEventListener("click", function () {
                            showPanel("employment-section");

                        });
                    }
                     const  btnDocPrevious= document.getElementById("btnDocPrevious");

                     if (btnDocPrevious) {
                        btnDocPrevious.addEventListener("click", function () {
                            $('#linkSummary').click();

                        });
                    }

                    const  previousBtn= document.getElementById("btnPrevious");
                    const  btnUploadDocs= document.getElementById("btnUploadDocs");
                    const btnViewSubmittedDocs = document.getElementById("btnViewSubmittedDocs");

                            [previousBtn, btnUploadDocs, btnViewSubmittedDocs].forEach(btn => {
                    if (btn) {
                        btn.addEventListener("click", function () {
                               showPanel("documents-section");
                        });
                    }
                });
                       if (previousBtn || btnUploadDocs) {
                        previousBtn.addEventListener("click", function () {
                           showPanel("documents-section");
                        });
                    }

                    const  previousEmploymentBtn= document.getElementById("btnEmployementPrevious");
                    if (previousEmploymentBtn) {
                        previousEmploymentBtn.addEventListener("click", function () {
                           showPanel("employment-section");
                            loadUploadedDocs(userId,'T10');

                        });
                    }

                    const  previousBankBtn= document.getElementById("btnBankPrevious");
                    if (previousBankBtn) {
                        previousBankBtn.addEventListener("click", function () {
                             selectedCategoryName = 'Bank Confirmation';
                           showPanel("bank-section");
                            loadUploadedDocs(userId,'Bank Confirmation');

                        });
                    }

                   const  previousOtherBtn= document.getElementById("btnOtherPrevious");
                    if (previousOtherBtn) {
                        previousOtherBtn.addEventListener("click", function () {
                            selectedCategoryName =  'Other Documents';
                                  showPanel("other-section");
                                   loadUploadedDocs(userId,'Other Documents');

                        });
                    }

                    const  previousAssetsBtn= document.getElementById("btnAssetsPrevious");
                    if (previousAssetsBtn) {
                        previousAssetsBtn.addEventListener("click", function () {
                           showPanel("assets-section");
                            loadExcelAssestsUploadedFiles(userId);
                                loadAssestsUploadedFiles(userId);
                        });
                    }

                    const uploadDocBtn = document.getElementById("uploadDoc-btn");
                    if (uploadDocBtn) {
                        uploadDocBtn.addEventListener("click", function () {
                            showPanel("employment-section");
                            const documentsSubmenu = document.getElementById("documents-submenu");
                            if (documentsSubmenu && documentsSubmenu.classList.contains("collapse")) {
                                documentsSubmenu.classList.add("show");
                            }
                        });
                    }

                    // Activate tab from URL parameter
                    const urlParams = new URLSearchParams(window.location.search);
                    const section = urlParams.get("section");
                        if (section) {

                            if (section === "assets") {
                               const manualOption = document.getElementById("optionManual");
                               if (manualOption) {
                                       manualOption.checked = true;
                                      toggleInputMode();
                                      // document.querySelector('label[for="optionManual"]')?.classList.add("active");
                                      //document.querySelector('label[for="optionExcel"]')?.classList.remove("active");
                                  }
                           }
                           showPanel(`${section}-section`);
                        } else {
                            showPanel("dashboard-section"); // default
                        }
                    });

                     submitBtn.addEventListener("click", async function () {

                        if (!selectedFile || !selectedCategoryName) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Upload file',
                            text: 'Please upload a file before submitting.',
                                        customClass: {
                            popup: 'small-swal-popup'
                        }
                        });

                        return;
                        }
                           showLoadMask(); 

                        try {
                            // 1. Upload to external API
                            const formData = new FormData();
                            formData.append("file", selectedFile);
                            formData.append("userId", userId);
                            formData.append("year", new Date().getFullYear().toString());

                                     const uploadRes = await fetch("https://file.taxfiling.lk/upload", {
                                method: "POST",
                                body: formData
                            });

                            if (!uploadRes.ok) throw new Error("External upload failed");

                            const uploadResult = await uploadRes.json();

                            if (!uploadResult.success || !uploadResult.data) {
                                throw new Error("Upload failed: " + uploadResult.message);
                            }

                            const data = uploadResult.data;

                            console.log("Employement" + selectedCategoryName);

                            // 2. Call your internal API to save metadata
                            const saveResponse = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/SaveUploadedDocs`, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    userId: '@userId',
                                    categoryName: selectedCategoryName,
                                    uploadedFileName: data.originalName,
                                    fileName: data.filename,
                                    location: data.location,
                                    uploadTime: data.uploadTime,
                                    decryptionKey: data.decryptionKey,
                                    uploadId: data.uploadId,
                                    originalName: data.originalName,
                                     // Optional fields based on category
                                    t10EmployerName: document.getElementById("T10EmployerName")?.value || null,
                                    terminalEmployerName: document.getElementById("TerminalEmployerName")?.value || null,
                                    anyOtherType: document.getElementById("AnyOtherType")?.value || null,
                                    bankConfirmationType: document.getElementById("BankConfirmationType")?.value || null,
                                      bankName: null,//document.getElementById("BankName")?.value || null,
                                    otherDocumentName: document.getElementById("otherDocName")?.value || null
                                })
                            });

                            if (!saveResponse.ok) throw new Error("Failed to save metadata");
                             incrementUploadCount();
                            const saveResult = await saveResponse.json();
                            const userUploadId = saveResult.userUploadId;
                            showMessage("File Submitted successfully!", "success");
                           
                           // alert("File submitted successfully!");

                            // Optional: add to table UI
                            const documentsTable = document.getElementById("documentsTableBody");
                            const fileSizeKB = (selectedFile.size / 1024).toFixed(2); // Convert bytes to KB
                            document.getElementById("uploadedDocs").style.display = "block";
                            let employmentValue = "";
                            let bankConfirmationType = "";
                            let bankName = "";

                              if (selectedCategoryName === "T10") {
                                         employmentValue = document.getElementById("T10EmployerName")?.value || null;
                               } else if (selectedCategoryName === "Terminal Benefit") {
                                      employmentValue = document.getElementById("TerminalEmployerName")?.value || null;
                               } else if (selectedCategoryName === "Any Other") {
                                         employmentValue = document.getElementById("AnyOtherType")?.value || null;
                               }

                               employmentValue = employmentValue ?? "";
                               bankConfirmationType = document.getElementById("BankConfirmationType")?.value || "";
                               bankName= "";//document.getElementById("BankName")?.value || "";

                                const tableBody = document.querySelector("#documentsTableBody");
                                  const currentCount = tableBody.querySelectorAll("tr").length;
                                 const index = currentCount + 1; // next index

                            const row = document.createElement("tr");
                            row.innerHTML = `
                            <td>${index }</td>
                                   <td>${data.originalName}</td>
                                    <td>${selectedCategoryName}</td>
                                    <td class="col-employer-name ">${employmentValue}</td>
                                     <td class="col-confirmation-type d-none">${bankConfirmationType}</td>
                                         <td class="col-bank-name d-none">${bankName}</td>
                                <td>${new Date(data.uploadTime).toISOString().split("T")[0]}</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" onclick="viewDoc('${data.filename}', '${data.decryptionKey}')">View</button>
                                           <button class="btn btn-danger btn-sm delete-btn" onclick="showDeleteConfirm('${userUploadId}','${data.uploadId}')">Delete</button>
                                </td>`;

                            documentsTable.appendChild(row);

                            loadUploadedDocs(userId,selectedCategoryName);
                            // Reset UI
                            selectedFile = null;
                             const fileInput = document.getElementById("fileInput");
                             if (fileInput) fileInput.value = "";
                                const fileInputTerminal = document.getElementById("fileInputTerminal");
                                if (fileInputTerminal) fileInputTerminal.value = "";
                             const fileInputAnyOther = document.getElementById("fileInputAnyOther");
                                if (fileInputAnyOther) fileInputAnyOther.value = "";

                             let el;
                           (el = document.getElementById("T10EmployerName")) && (el.value = "");
                              (el = document.getElementById("TerminalEmployerName")) && (el.value = "");
                           (el = document.getElementById("AnyOtherType")) && (el.selectedIndex = 0);
                           updateChecklistStatuses(allDocs,docStatus);
                            //document.getElementById("file-name").textContent = "";
                            //document.getElementById("submitBtn").style.display = "none";

                        } catch (err) {
                            console.error(err);
                            alert("Upload failed: " + err.message);
                        }
                        finally {
                             hideLoadMask(); 
                        }
                    });

                    submitBankBtn.addEventListener("click", async function () {

                        if (!selectedFile || !selectedCategoryName){
                               Swal.fire({
                               icon: 'warning',
                               title: 'Upload file',
                               text: 'Please upload a file before submitting.',
                                           customClass: {
                               popup: 'small-swal-popup'
                           }
                           });
                            
                            return;
                        }
                        showLoadMask();
                        try {
                            // 1. Upload to external API
                            const formData = new FormData();
                            formData.append("file", selectedFile);
                            formData.append("userId", userId);
                            formData.append("year", new Date().getFullYear().toString());

                            const uploadRes = await fetch("https://file.taxfiling.lk/upload", {
                                method: "POST",
                                body: formData
                            });

                            if (!uploadRes.ok) throw new Error("External upload failed");

                            const uploadResult = await uploadRes.json();

                            if (!uploadResult.success || !uploadResult.data) {
                                throw new Error("Upload failed: " + uploadResult.message);
                            }

                            const data = uploadResult.data;
                            console.log("Bank" + selectedCategoryName);
                            // 2. Call your internal API to save metadata
                            const saveResponse = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/SaveUploadedDocs`, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    userId: '@userId',
                                    categoryName: selectedCategoryName,
                                    uploadedFileName: data.originalName,
                                    fileName: data.filename,
                                    location: data.location,
                                    uploadTime: data.uploadTime,
                                    decryptionKey: data.decryptionKey,
                                    uploadId: data.uploadId,
                                    originalName: data.originalName,
                                     // Optional fields based on category
                                    t10EmployerName: document.getElementById("T10EmployerName")?.value || null,
                                    terminalEmployerName: document.getElementById("TerminalEmployerName")?.value || null,
                                    anyOtherType: document.getElementById("AnyOtherType")?.value || null,
                                    bankConfirmationType: document.getElementById("BankConfirmationType")?.value || null,
                                       // bankName: $('#BankName').select2('data')[0].text,//document.getElementById("BankName")?.value || null,
                                       bankName : $("#bankInput").val() + "-" + $("#branchInput").val(),
                                    otherDocumentName: document.getElementById("otherDocName")?.value || null
                                })
                            });

                            if (!saveResponse.ok) throw new Error("Failed to save metadata");
                             incrementUploadCount();
                            const saveResult = await saveResponse.json();
                            const userUploadId = saveResult.userUploadId;
                             showMessage("File Submitted successfully!", "success");
                            //alert("File submitted successfully!");

                            // Optional: add to table UI
                            const documentsTable = document.getElementById("documentsTableBankBody");
                            const fileSizeKB = (selectedFile.size / 1024).toFixed(2); // Convert bytes to KB
                            document.getElementById("uploadedBankDocs").style.display = "block";

                               let employmentValue = "";
                               let bankConfirmationType = "";
                               let bankName = "";

                                 if (selectedCategoryName === "T10") {
                                            employmentValue = document.getElementById("T10EmployerName")?.value || null;
                                  } else if (selectedCategoryName === "Terminal Benefit") {
                                         employmentValue = document.getElementById("TerminalEmployerName")?.value || null;
                                  } else {
                                            employmentValue = document.getElementById("otherDocName")?.value || null;
                                  }

                                  employmentValue = employmentValue ?? "";
                                  bankConfirmationType = document.getElementById("BankConfirmationType")?.value || "";
                                       bankName= $("#bankInput").val() + "-" + $("#branchInput").val();//document.getElementById("BankName")?.value || "";

                                  const tableBody = document.querySelector("#documentsTableBankBody");
                                  const currentCount = tableBody.querySelectorAll("tr").length;
                                 const index = currentCount + 1; // next index
                                 console.log("bank index" + index + ","  + currentCount )
                            const row = document.createElement("tr");
                            row.innerHTML = `
                            <td>${index }</td>
                                <td>${data.originalName}</td>
                                   <td>${selectedCategoryName}</td>
                                   <td class="col-employer-name d-none">${employmentValue}</td>
                                <td class="col-confirmation-type ">${bankConfirmationType}</td>
                               <td class="col-bank-name ">${bankName}</td>
                                <td>${new Date(data.uploadTime).toISOString().split("T")[0]}</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" onclick="viewDoc('${data.filename}', '${data.decryptionKey}')">View</button>
                                         <button class="btn btn-danger btn-sm delete-btn" onclick="showDeleteConfirm('${userUploadId}','${data.uploadId}')">Delete</button>
                                </td>`;

                            documentsTable.appendChild(row);

                            loadUploadedDocs(userId,selectedCategoryName);
                            // Reset UI
                            selectedFile = null;
                            document.getElementById("BankConfirmationType").selectedIndex = 0;
                            //document.getElementById("BankName").value = "";
                            //$('#BankName').val(null).trigger('change');
                            $("#bankInput").val("");
                            $("#bank_id").val("");
                            $("#branchInput").val("").prop("disabled", true).attr("placeholder", "Select a bank first");
                            $("#branch_code, #branch_name").val("");
                            $("#branchDropdown").hide();
                            $("#bankDropdown").hide();

                            selectedBank = null;
                            highlightedBranchIndex = -1;
                            document.getElementById("fileInputBank").value = "";
                            updateChecklistStatuses(allDocs,docStatus);
                            //document.getElementById("file-name").textContent = "";
                            //document.getElementById("submitBtn").style.display = "none";

                        } catch (err) {
                            console.error(err);
                            alert("Upload failed: " + err.message);
                        }
                        finally{
                            hideLoadMask();
                        }
                    });

                 submitExcelBtn.addEventListener("click", async function () {

                       const fileInput = document.getElementById('assetsExcelFile');
                       const selectedFile = fileInput.files[0];
                       const selected = document.querySelector('input[name="assetInputOption"]:checked');

                       if (!selectedFile) {
                           alert("Please select a file before submitting.");
                           return;
                       }

                       showLoadMask();

                           try {

                               // 1. Upload to external API
                               const formData = new FormData();
                               formData.append("file", selectedFile);
                               formData.append("userId", userId);
                               formData.append("year", new Date().getFullYear().toString());

                               const uploadRes = await fetch("https://file.taxfiling.lk/upload", {
                                   method: "POST",
                                   body: formData
                               });

                               if (!uploadRes.ok) throw new Error("External upload failed");

                               const uploadResult = await uploadRes.json();

                               if (!uploadResult.success || !uploadResult.data) {
                                   throw new Error("Upload failed: " + uploadResult.message);
                               }

                               const data = uploadResult.data;
                               // 2. Call your internal API to save metadata
                               const saveResponse = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/SaveUploadedDocs`, {
                                   method: "POST",
                                   headers: { "Content-Type": "application/json" },
                                   body: JSON.stringify({
                                       userId: '@userId',
                                        categoryName: 'Assests Upload Excel',
                                       uploadedFileName: data.originalName,
                                       fileName: data.filename,
                                       location: data.location,
                                       uploadTime: data.uploadTime,
                                       decryptionKey: data.decryptionKey,
                                       uploadId: data.uploadId,
                                       originalName: data.originalName,
                                        // Optional fields based on category
                                       t10EmployerName: document.getElementById("T10EmployerName")?.value || null,
                                       terminalEmployerName: document.getElementById("TerminalEmployerName")?.value || null,
                                       anyOtherType: document.getElementById("AnyOtherType")?.value || null,
                                       bankConfirmationType: document.getElementById("BankConfirmationType")?.value || null,
                                       bankName: null,//document.getElementById("BankName")?.value || null,
                                       otherDocumentName: document.getElementById("otherDocName")?.value || null,
                                       assestOptionType:selected.value,
                                       AssestsUploadExcelSheetName: data.originalName
                                   })
                               });

                               if (!saveResponse.ok) throw new Error("Failed to save metadata");
                                incrementUploadCount();
                               const saveResult = await saveResponse.json();
                               const userUploadId = saveResult.userUploadId;
                                showMessage("File Submitted successfully!", "success");
                                loadExcelAssestsUploadedFiles(userId);
                               //alert("File submitted successfully!");

                               // // Optional: add to table UI
                               // const documentsTable = document.getElementById("documentsTableOtherBody");
                               // const fileSizeKB = (selectedFile.size / 1024).toFixed(2); // Convert bytes to KB
                               // document.getElementById("uploadedOtherDocs").style.display = "block";

                               // const row = document.createElement("tr");
                               // row.innerHTML = `
                               //     <td>${data.originalName}</td>

                               //     <td>${new Date(data.uploadTime).toISOString().split("T")[0]}</td>
                               //     <td>
                               //         <button class="btn btn-primary btn-sm" onclick="viewDoc('${data.filename}', '${data.decryptionKey}')">View</button>
                               //         <button class="btn btn-danger btn-sm" onclick="showDeleteConfirm('${userUploadId}')">Delete</button>
                               //     </td>`;

                               // documentsTable.appendChild(row);

                               // loadUploadedDocs(userId,selectedCategoryName);
                               // // Reset UI
                               // selectedFile = null;
                           document.getElementById("assetsExcelFile").value = ""; // clear file input
                           document.getElementById("uploadedFileName").textContent = ""; // clear filename
                              
                                           //document.getElementById("file-name").textContent = "";
                               //document.getElementById("submitBtn").style.display = "none";

                           } catch (err) {
                               console.error(err);
                               alert("Upload failed: " + err.message);
                           }
                              finally{
                               hideLoadMask();
                           }
                       });


                    submitOtherBtn.addEventListener("click", async function () {

                        if (!selectedFile || !selectedCategoryName) {
                               Swal.fire({
                               icon: 'warning',
                               title: 'Upload file',
                               text: 'Please upload a file before submitting.',
                                           customClass: {
                               popup: 'small-swal-popup'
                           }
                           });
                            
                            return;
                        }

                        showLoadMask();

                        try {

                            // 1. Upload to external API
                            const formData = new FormData();
                            formData.append("file", selectedFile);
                            formData.append("userId", userId);
                            formData.append("year", new Date().getFullYear().toString());

                            const uploadRes = await fetch("https://file.taxfiling.lk/upload", {
                                method: "POST",
                                body: formData
                            });

                            if (!uploadRes.ok) throw new Error("External upload failed");

                            const uploadResult = await uploadRes.json();

                            if (!uploadResult.success || !uploadResult.data) {
                                throw new Error("Upload failed: " + uploadResult.message);
                            }

                            const data = uploadResult.data;
                                     console.log("Other" + selectedCategoryName);
                            // 2. Call your internal API to save metadata
                            const saveResponse = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/SaveUploadedDocs`, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    userId: '@userId',
                                    categoryName: selectedCategoryName,
                                    uploadedFileName: data.originalName,
                                    fileName: data.filename,
                                    location: data.location,
                                    uploadTime: data.uploadTime,
                                    decryptionKey: data.decryptionKey,
                                    uploadId: data.uploadId,
                                    originalName: data.originalName,
                                     // Optional fields based on category
                                    t10EmployerName: document.getElementById("T10EmployerName")?.value || null,
                                    terminalEmployerName: document.getElementById("TerminalEmployerName")?.value || null,
                                    anyOtherType: document.getElementById("AnyOtherType")?.value || null,
                                    bankConfirmationType: document.getElementById("BankConfirmationType")?.value || null,
                                    bankName: null,//document.getElementById("BankName")?.value || null,
                                    otherDocumentName: document.getElementById("otherDocName")?.value || null
                                })
                            });

                            if (!saveResponse.ok) throw new Error("Failed to save metadata");
                             incrementUploadCount();
                            const saveResult = await saveResponse.json();
                            const userUploadId = saveResult.userUploadId;
                            showMessage("File Submitted successfully!", "success");
                           // alert("File submitted successfully!");

                            // Optional: add to table UI
                            const documentsTable = document.getElementById("documentsTableOtherBody");
                            const fileSizeKB = (selectedFile.size / 1024).toFixed(2); // Convert bytes to KB
                            document.getElementById("uploadedOtherDocs").style.display = "block";

                               let employmentValue = "";
                               let bankConfirmationType = "";
                               let bankName = "";


                                 if (selectedCategoryName === "T10") {
                                            employmentValue = document.getElementById("T10EmployerName")?.value || null;
                                  } else if (selectedCategoryName === "Terminal Benefit") {
                                         employmentValue = document.getElementById("TerminalEmployerName")?.value || null;
                                  } else {
                                            employmentValue = document.getElementById("otherDocName")?.value || null;
                                  }

                                  employmentValue = employmentValue ?? "";
                                  bankConfirmationType = document.getElementById("BankConfirmationType")?.value || "";
                                  bankName="";// document.getElementById("BankName")?.value || "";


                                  const tableBody = document.querySelector("#documentsTableOtherBody");
                                  const currentCount = tableBody.querySelectorAll("tr").length;
                                 const index = currentCount + 1; // next index

                            const row = document.createElement("tr");
                            row.innerHTML = `
                             <td>${index}</td>
                                <td>${data.originalName}</td>
                                   <td>${selectedCategoryName}</td>
                                   <td class="col-employer-name">${employmentValue}</td>
                                   <td class="col-confirmation-type d-none">${bankConfirmationType}</td>
                                   <td class="col-bank-name d-none">${bankName}</td>
                                <td>${new Date(data.uploadTime).toISOString().split("T")[0]}</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" onclick="viewDoc('${data.filename}', '${data.decryptionKey}')">View</button>
                                         <button class="btn btn-danger btn-sm delete-btn" onclick="showDeleteConfirm('${userUploadId}','${data.uploadId}')">Delete</button>
                                </td>`;

                            documentsTable.appendChild(row);

                            loadUploadedDocs(userId,selectedCategoryName);
                            // Reset UI
                            selectedFile = null;
                            document.getElementById("otherDocName").value = "";
                            document.getElementById("fileInputOther").value = "";
                               updateChecklistStatuses(allDocs,docStatus);
                            //document.getElementById("file-name").textContent = "";
                            //document.getElementById("submitBtn").style.display = "none";

                        } catch (err) {
                            console.error(err);
                            alert("Upload failed: " + err.message);
                        }
                           finally{
                               hideLoadMask();
                           }
                    });


            </script>
        </div>

    </section>
    <!-- /File my taxes -->

</main>




