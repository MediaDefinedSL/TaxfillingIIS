@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@using System.Security.Claims
@using Microsoft.AspNetCore.Html

@{
    var userName = User.FindFirst(ClaimTypes.Name)?.Value;
    var userId = User.Claims.FirstOrDefault(mbox => mbox.Type == "UserID")?.Value;
    bool isAuthenticated = !string.IsNullOrEmpty(userId);    
    var apiUrl = Configuration["BaseAPIUrl"];

}
<main class="main">
    <!-- Page Title -->
    <div class="page-title accent-background py-4">
        <div class="container d-flex justify-content-between align-items-center">
            <div>
                <h1 class="mb-1">Tax Assisted Docs Submit</h1>
                <h1 class="mb-2 mb-lg-0">Welcome <span>@userName</span></h1>
            </div>
        </div>
    </div>

    <div class="container pt-5">
        <!-- Back Button -->
        <a href="@Url.Action("Index", "UserUploadTaxAssistedDoc", new { section = "documents" })" class="btn btn-secondary mb-4">
            <i class="fas fa-arrow-left me-1"></i> Back to Documents
        </a>

        <!-- Category Navigation -->
        <div class="mb-4">
            <div class="btn-group flex-wrap" role="group">
                <button type="button" class="btn btn-outline-primary category-btn" data-target="t10-fields">T10-T10 D Forms</button>
                <button type="button" class="btn btn-outline-primary category-btn" data-target="terminal-fields">Terminal Benefit</button>
                <button type="button" class="btn btn-outline-primary category-btn" data-target="other-fields">Any Other</button>
                <button type="button" class="btn btn-outline-primary category-btn" data-target="bank-fields">Bank Confirmation</button>
                <button type="button" class="btn btn-outline-primary category-btn" data-target="assets-fields">Assets Liability</button>
            </div>
        </div>

        <!-- Form Sections -->
        <div class="form-section" id="t10-fields" style="display: none;">
            <form asp-action="Upload" method="post" enctype="multipart/form-data">
                <input type="hidden" name="CategoryName" value="T10" />
                <div class="mb-2">
                    <label>Employer Name</label>
                    <input type="text" name="EmployerName" class="form-control" id="EmployerName" />
                </div>
                <div class="mb-2">
                    <label>File</label>
                    <input type="file" name="UploadFile" class="form-control" />
                </div>
                <button class="btn btn-primary">Submit</button>
            </form>
        </div>

        <div class="form-section" id="terminal-fields" style="display: none;">
            <div class="mb-3">
                <label class="form-label">Employee Name</label>
                <input type="text" class="form-control" name="EmployeeName_Terminal" id="TerminalEmployerName" />
            </div>
        </div>

        <div class="form-section" id="other-fields" style="display: none;">
            <div class="mb-3">
                <label class="form-label">Type</label>
                <select class="form-select" name="OtherType" id="AnyOtherType">
                    <option value="">-- Select Type --</option>
                    <option value="SalarySlips">Salary Slips</option>
                    <option value="PaySheets">Pay Sheets</option>
                </select>
            </div>
        </div>

        <div class="form-section" id="bank-fields" style="display: none;">
            <div class="mb-3">
                <label class="form-label">Bank Confirmation Type</label>
                <select class="form-select" name="BankConfirmationType" id="BankConfirmationType">
                    <option value="">-- Select Type --</option>
                    <option value="SavingAccounts">Saving Accounts</option>
                    <option value="BankDeposits">Bank Deposits</option>
                    <option value="Loans">Loans</option>
                    <option value="CreditCards">Credit Cards</option>
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label">Bank Name</label>
                <input type="text" class="form-control" name="BankName" id="BankName" />
            </div>
        </div>

        <div class="form-section" id="assets-fields" style="display: none;">
            <div class="mb-3">
                <label class="form-label">Type</label>
                <select class="form-select" name="AssetType">
                    <option value="">-- Select Type --</option>
                    <option value="Property">Property</option>
                    <option value="Investments">Investments</option>
                </select>
            </div>
        </div>

        <!-- Upload Panel -->
        <div class="bg-white p-4 rounded shadow-sm mt-5">
            <h4 class="mb-4">Add or Manage 2024/2025 Documents</h4>

            <form id="uploadForm" enctype="multipart/form-data" method="post" asp-controller="Upload" asp-action="UploadFile">
                <div id="drop-zone" class="border border-primary rounded d-flex flex-column justify-content-center align-items-center p-5"
                     style="cursor: pointer; background-color: #f8f9fa;">
                    <div class="text-center">
                        <i class="bi bi-cloud-arrow-up display-5 text-primary mb-2"></i>
                        <div class="fs-5">Upload File</div>
                        <small class="text-muted">(Click to select or drag a file here)</small>
                    </div>
                    <input type="file" id="fileInput" name="UploadedFile" class="form-control d-none" />
                </div>

                <!-- File Info & Submit Button -->
                <div id="file-info" class="d-flex align-items-center justify-content-center gap-3 mt-4 flex-wrap text-center">
                    <span id="file-name" class="text-truncate fw-bold"></span>
                    <span id="upload-success" style="color: green; font-size: 1.5rem; display: none;">✔️</span>
                    <div class="progress w-50" style="height: 20px; display: none;">
                        <div id="upload-progress" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%">0%</div>
                    </div>
                    <button type="button" class="btn btn-success" id="submitBtn" style="display: none;">
                        <i class="fas fa-save me-1"></i> Submit
                    </button>
                </div>
            </form>
        </div>

        <!-- Uploaded Docs Table -->
        <div id="uploadedDocs" class="mt-5" style="display: none;">
            <h5 class="mb-3">Your Documents for 2024/2025</h5>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>Document Name</th>                           
                            <th>Uploaded On</th>
                            <th>Category</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="documentsTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>
</main>

<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="confirmDeleteLabel">Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this document?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="confirmDeleteBtn" type="button" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

<style>
    #feedbackMessage {
        background-color: #ffffff !important; /* Bright white background */
        color: #000 !important; /* Black text for contrast */
        border: 2px solid #28a745 !important; /* Green border for success */
        font-size: 1rem;
        font-weight: bold;
        padding: 1rem;
        z-index: 1050; /* Higher than modal backdrop */
        box-shadow: 0 0 15px rgba(0,0,0,0.2); /* Optional subtle shadow */
    }

    /* Optional: Specific color for danger messages */
    .alert-danger#feedbackMessage {
        border-color: #dc3545 !important;
    }
</style>

<script>
    const baseApiUrl = "@apiUrl";
    console.log("Base API URL:", baseApiUrl);    

    let selectedFile = null;
    let selectedCategoryName = ""; // set this based on button click

    document.getElementById("fileInput").addEventListener("change", function () {
        if (this.files.length > 0) {
            
            selectedFile = this.files[0];            
            document.getElementById("file-name").textContent = selectedFile.name;
            document.getElementById("submitBtn").style.display = "inline-block";
        }
    });
    

    async function loadUploadedDocs(userId) {     
        document.getElementById("uploadedDocs").style.display = "block";

        const res = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/GetUploadedDocsByUser?userId=${userId}`);
        if (!res.ok) {
            alert("Failed to load uploaded documents");
            return;
        }

        const docs = await res.json();
        const tableBody = document.getElementById("documentsTableBody");
        tableBody.innerHTML = "";

        docs.forEach(doc => {
            const row = document.createElement("tr");
            const fullDate = doc.uploadDate; // e.g. "2025-07-18T00:00:00"
            const dateOnly = fullDate.split("T")[0];
            row.innerHTML = `
                <td>${doc.originalName}</td>                
                <td>${dateOnly}</td>
                <td>${doc.categoryName}</td>
                <td>
                    <button class="btn btn-primary btn-sm" onclick="viewDoc('${doc.fileName}', '${doc.decryptionKey}')">View</button>
                    <button class="btn btn-danger btn-sm" onclick="showDeleteConfirm('${doc.userUploadId}')">Delete</button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }

        async function viewDoc(fileName, decryptionKey) {
        const width = 800;
        const height = 600;
        const left = (screen.width / 2) - (width / 2);
        const top = (screen.height / 2) - (height / 2);

        const formData = new FormData();
        formData.append("filename", fileName); // Match the API's expected field
        formData.append("decryptionKey", decryptionKey);

        const viewRes = await fetch("https://file.taxfiling.lk/view", {
            method: "POST",
            headers: {
            "Content-Type": "application/json"
            },
            body: JSON.stringify({
                filename: fileName,
                decryptionKey: decryptionKey
            })
            
        });

        if (!viewRes.ok) {
            const err = await viewRes.text();
            console.error("View API error:", err);
            throw new Error("External load failed: " + err);
        }

        // ✅ If the API returns the raw file (e.g., image/pdf/blob)
        const contentType = viewRes.headers.get("Content-Type") || "application/octet-stream";
        const blob = await viewRes.blob();
        const fileURL = URL.createObjectURL(new Blob([blob], { type: contentType }));

        // ✅ Open file in a new tab
        window.open(
            fileURL,
            '_blank',
            `toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=${width},height=${height},top=${top},left=${left}`
        );
    }

   
    function showMessage(message, type = "success") {
        
        const existing = document.getElementById("feedbackMessage");
        if (existing) existing.remove();

        const alertDiv = document.createElement("div");
        alertDiv.id = "feedbackMessage";
        alertDiv.className = `alert alert-${type} alert-dismissible fade show shadow`;
        alertDiv.style.position = "fixed";
        alertDiv.style.bottom = "30px";
        alertDiv.style.left = "50%";
        alertDiv.style.transform = "translateX(-50%)";
        alertDiv.style.zIndex = "9999";
        alertDiv.style.backgroundColor = "#fff";
        alertDiv.style.border = "2px solid #28a745";
        alertDiv.style.color = "#000";
        alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

        document.body.appendChild(alertDiv);

        setTimeout(() => {
            alertDiv.classList.remove("show");
            setTimeout(() => alertDiv.remove(), 300);
        }, 4000);
    }

    function showDeleteConfirm(userUploadId) {

        const modalElement = document.getElementById("confirmDeleteModal");
        const originalDeleteBtn = document.getElementById("confirmDeleteBtn");

        // ✅ Clone the button to remove all previous event listeners
        const newDeleteBtn = originalDeleteBtn.cloneNode(true);
        originalDeleteBtn.parentNode.replaceChild(newDeleteBtn, originalDeleteBtn);

        // ✅ Add a fresh event listener (only one)
        newDeleteBtn.addEventListener("click", () => {
            const modalInstance = bootstrap.Modal.getInstance(modalElement);
            modalInstance.hide();

            // Cleanup backdrop in case it's stuck
            setTimeout(() => {
                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                document.body.classList.remove('modal-open');
            }, 500);

            // Proceed to delete
            deleteDoc(userUploadId);
        });

        // ✅ Show modal using Bootstrap’s Modal API
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
    }

     async function deleteDoc(userUploadId) {      

        try {
            const response = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/DeleteDoc/${userUploadId}`, {
                method: "DELETE"
            });

            if (!response.ok) {
                const errMsg = await response.text();
                showMessage("❌ Failed to delete document. " + errorText, "danger");
                //throw new Error("Delete failed: " + errMsg);
            }
            else
            {
                showMessage("✅ Document deleted successfully.", "success");
                const userId = '@User.FindFirst("UserID")?.Value';
                loadUploadedDocs(userId);                
            }
            
            // Optionally refresh document list or remove the row from the table
        } catch (error) {
            console.error(error);
            alert("Error: " + error.message);
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        const userId = '@User.FindFirst("UserID")?.Value';
        loadUploadedDocs(userId);
        const buttons = document.querySelectorAll(".category-btn");
        const sections = document.querySelectorAll(".form-section");
        let currentCategoryName = "";

        buttons.forEach(button => {
            button.addEventListener("click", function () {

                currentCategoryName = this.innerText.trim();
                selectedCategoryName = this.innerText.trim();               

                const targetId = this.getAttribute("data-target");
                // Hide all sections
                sections.forEach(sec => sec.style.display = "none");
                // Show selected section
                const target = document.getElementById(targetId);
                if (target) target.style.display = "block";

                // Remove active class from all buttons
                buttons.forEach(btn => btn.classList.remove("active"));

                // Add active class to the clicked button
                this.classList.add("active");

                // Reset all buttons to default
                buttons.forEach(btn => {
                    btn.classList.remove("active", "btn-outline-primary");
                    btn.classList.add("btn-link");
                });

                // Highlight the clicked button with border
                this.classList.add("active", "btn-outline-primary");
                this.classList.remove("btn-link");
            });

             
        });

        if (buttons.length > 0) {
            const firstButton = buttons[0];
            const targetId = firstButton.getAttribute("data-target");
            const target = document.getElementById(targetId);
            currentCategoryName = firstButton.innerText.trim();
            selectedCategoryName = firstButton.innerText.trim();
            // Show section
            if (target) target.style.display = "block";

             buttons.forEach(btn => {
                btn.classList.remove("active", "btn-outline-primary");
                btn.classList.add("btn-link");
            });

            firstButton.classList.add("active", "btn-outline-primary");
            firstButton.classList.remove("btn-link");
        }



         const dropZone = document.getElementById('drop-zone');
         const fileInput = document.getElementById('fileInput');
         const fileNameSpan = document.getElementById('file-name');
         const progressWrapper = document.querySelector('.progress');
         const progressBar = document.getElementById('upload-progress');
         const successIcon = document.getElementById('upload-success');
         const submitBtn = document.getElementById('submitBtn');
         const uploadedDocs = document.getElementById('uploadedDocs');
         const documentsTable = document.getElementById('documentsTableBody');

            dropZone.addEventListener("click", () => fileInput.click());

            fileInput.addEventListener("change", function () {
              if (fileInput.files.length > 0) {
                
              }
            });

            dropZone.addEventListener("dragover", e => {
              e.preventDefault();
              dropZone.classList.add("bg-light");
            });

            dropZone.addEventListener("dragleave", () => {
              dropZone.classList.remove("bg-light");
            });

            dropZone.addEventListener("drop", e => {
              e.preventDefault();
              dropZone.classList.remove("bg-light");
              const files = e.dataTransfer.files;
              if (files.length > 0) {
                fileInput.files = files;
                
              }
            });

            function handleFileUpload(file) {
              // Reset UI
              fileNameSpan.textContent = file.name;
              progressBar.style.width = "0%";
              progressBar.textContent = "0%";
              progressWrapper.style.display = "block";             
             

              const formData = new FormData();
              formData.append("UploadedFile", file);
              formData.append("Category", currentCategoryName);


              const xhr = new XMLHttpRequest();
              xhr.open("POST", "/UserUploadTaxAssistedDoc/SubmitFiles", true);

              xhr.upload.addEventListener("progress", e => {
                if (e.lengthComputable) {
                  const percent = Math.round((e.loaded / e.total) * 100);
                  progressBar.style.width = percent + "%";
                  progressBar.textContent = percent + "%";
                }
              });

              xhr.onload = () => {
                if (xhr.status === 200) {
                  progressWrapper.style.display = "none";
                  //upload-success.style.display = "inline-block";
                  successIcon.style.display = "inline-block";
                    submitBtn.style.display = "inline-block";

                // Store file info to use on "submit"
                    uploadedFileData = {
                        name: file.name,
                        size: (file.size / 1024).toFixed(2) // KB
                    };
                } else {
                  alert("Upload failed");
                  progressWrapper.style.display = "none";
                }
              };

              xhr.onerror = () => {
                alert("Upload failed");
                progressWrapper.style.display = "none";
              };

              xhr.send(formData);
            }   

        submitBtn.addEventListener("click", async function () {           
 
             if (!selectedFile || !selectedCategoryName) return;

            try {
                // 1. Upload to external API
                const formData = new FormData();
                formData.append("file", selectedFile); // key should match external API

                const uploadRes = await fetch("https://file.taxfiling.lk/upload", {
                    method: "POST",
                    body: formData
                });

                if (!uploadRes.ok) throw new Error("External upload failed");

                const uploadResult = await uploadRes.json();

                if (!uploadResult.success || !uploadResult.data) {
                    throw new Error("Upload failed: " + uploadResult.message);
                }

                const data = uploadResult.data;                
              
                // 2. Call your internal API to save metadata
                const saveResponse = await fetch(`${baseApiUrl}api/UserUploadTaxAssistedDoc/SaveUploadedDocs`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        userId: '@userId',
                        categoryName: selectedCategoryName,
                        uploadedFileName: data.originalName,
                        fileName: data.filename,
                        location: data.location,
                        uploadTime: data.uploadTime,
                        decryptionKey: data.decryptionKey,
                        uploadId: data.uploadId,
                        originalName: data.originalName,
                         // Optional fields based on category
                        t10EmployerName: document.getElementById("T10EmployerName")?.value || null,
                        terminalEmployerName: document.getElementById("TerminalEmployerName")?.value || null,
                        anyOtherType: document.getElementById("AnyOtherType")?.value || null,
                        bankConfirmationType: document.getElementById("BankConfirmationType")?.value || null,
                        bankName: document.getElementById("BankName")?.value || null
                    })
                });

                if (!saveResponse.ok) throw new Error("Failed to save metadata");

                const saveResult = await saveResponse.json();
                const userUploadId = saveResult.userUploadId;

                alert("File submitted successfully!");

                // Optional: add to table UI
                const documentsTable = document.getElementById("documentsTableBody");               
                const fileSizeKB = (selectedFile.size / 1024).toFixed(2); // Convert bytes to KB
                document.getElementById("uploadedDocs").style.display = "block";
                
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${data.originalName}</td>
                    
                    <td>${new Date(data.uploadTime).toISOString().split("T")[0]}</td>
                    <td>${selectedCategoryName}</td>
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="viewDoc('${data.filename}', '${data.decryptionKey}')">View</button>
                        <button class="btn btn-danger btn-sm" onclick="showDeleteConfirm('${userUploadId}')">Delete</button>
                    </td>`;
    
                documentsTable.appendChild(row);

                // Reset UI
                selectedFile = null;
                document.getElementById("fileInput").value = "";
                document.getElementById("file-name").textContent = "";
                document.getElementById("submitBtn").style.display = "none";

            } catch (err) {
                console.error(err);
                alert("Upload failed: " + err.message);
            }
        });
    });
</script>